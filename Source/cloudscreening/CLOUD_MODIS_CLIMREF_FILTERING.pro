;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      CLOUD_MODIS_CLIMREF_FILTERING       
;* 
;* PURPOSE:
;*      THIS FUNCTION READS THE STATISTICAL MAPS OD NIR SURFACE REFLECTANCE COMPUTED FROM MODIS A DATA OVER LIBYA4
;* 
;* 
;* CALLING SEQUENCE:
;*      RES = CLOUD_MODIS_CLIMREF_FILTERING(SITE_NAME, LATITUDE, LONGITUDE, CS_ANG, VISR_BAND, NIR_BAND, BLUE_BAND, CIRRUS_BAND=CIRRUS_BAND, VERBOSE=VERBOSE)    
;* 
;* INPUTS:
;*      SITE_NAME   - NAME OF THE SITE
;*      LAT         - LATITUDE OF THE SELECTED PIXELS
;*      LON         - LONGITUDE OF THE SELECTED PIXELS
;*      CS_ANG      - SUN AND VIEWING ANGLES
;*      VISR_BAND   - VISIBLE RED BAND
;*      VISR_BAND   - NIR BAND
;*      BLUE_BAND   - BLUE BAND
;*      CIRRUS_BAND - CIRRUS BAND
;*
;* KEYWORDS:
;*      VERBOSE    - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      CLIMREF_PIXEL_CLASSIFICATION - VALIDITY MASK OF THE PIXELS 
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      15 NOV 2014 - B BERTHELOT   - DIMITRI-3 M V1.0
;*
;* VALIDATION HISTORY:
;*      15 NOV 2014 - B BERTHELOT   - NOMINAL COMPILATION AND OPERATION ON WINDOWS 32BIT 
;*                               IDL 7.1 AND LINUX 64BIT IDL 8.0
;*      20 JAN 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************


FUNCTION CLOUD_MODIS_CLIMREF_FILTERING, SITE_NAME, LATITUDE, LONGITUDE, CS_ANG, VISR_BAND, NIR_BAND, BLUE_BAND, CIRRUS_BAND=CIRRUS_BAND, VERBOSE=VERBOSE

  DEBUG_MODE = 0			; SET TO 1 IF WANT TO DEBUG THIS PROCEDURE
  
  MISSING_VALUE_INT    = FIX(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))
  MISSING_VALUE_FLOAT    = FLOAT(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))

  PX_CLEAR = 0
  PX_CLOUD = 1
  
  NB_PIXELS = N_ELEMENTS(LATITUDE)
  CLIMREF_PIXEL_CLASSIFICATION = MAKE_ARRAY(NB_PIXELS,/INTEGER,VALUE=MISSING_VALUE_INT)

  ;READ CLIMATOLOGY OF NIR REFLECTANCE
  CLIM_MEANNIR = GET_MODIS_CLIMREF(SITE_NAME, LATITUDE, LONGITUDE, VERBOSE=VERBOSE)
  MEAN_NIR_THRESHOLD = CLIM_MEANNIR[0,*]
  STDV_NIR_THRESHOLD = CLIM_MEANNIR[1,*]
  
  THETAS=CS_ANG[*,0]
  PHIS  =CS_ANG[*,1]
  THETAV=CS_ANG[*,2]
  PHIV  =CS_ANG[*,3]
  
  ; VALIDITY TEST
  IF KEYWORD_SET(CIRRUS_BAND) THEN BEGIN
    IDG  = WHERE ((CIRRUS_BAND[*] NE MISSING_VALUE_FLOAT AND VISR_BAND[*] GT 0.25 AND NIR_BAND[*] GT 0.35) , COUNT_IDG, $)
                 COMPLEMENT=N_IDG, NCOMPLEMENT=N_COUNT_IDG )
  ENDIF ELSE BEGIN
    IDG  = WHERE ((VISR_BAND[*] GT 0.25 AND NIR_BAND[*] GT 0.35) , COUNT_IDG, $)
                 COMPLEMENT=N_IDG, NCOMPLEMENT=N_COUNT_IDG )                
  ENDELSE

  IF DEBUG_MODE THEN PRINT, 'DEBUG_MODE - VALIDITY TEST - COUNT_IDG = ', COUNT_IDG, ' / N_COUNT_IDG = ', N_COUNT_IDG
  
  ; GT 2 INSTEAD OF GT 0 DUE TO STDDEV FUNCTION USED AFTER
  IF COUNT_IDG  GT 2 THEN BEGIN
    CLIMREF_PIXEL_CLASSIFICATION[IDG]    = PX_CLEAR 
  ENDIF ELSE BEGIN
    CLIMREF_PIXEL_CLASSIFICATION[*]  = PX_CLOUD    
    GOTO, SKIP_PASS
  ENDELSE
  IF N_COUNT_IDG  NE 0 THEN CLIMREF_PIXEL_CLASSIFICATION[N_IDG]  = PX_CLOUD    

  MEANCIRRUS = 0.0
  IF KEYWORD_SET(CIRRUS_BAND) THEN MEANCIRRUS = MEAN(CIRRUS_BAND[IDG])

  IF DEBUG_MODE THEN PRINT, 'DEBUG_MODE - MEANCIRRUS = ', MEANCIRRUS

; REMOVE POINTS FAR FROM SCATTERPLOTS VIS NIR
 COEF = LINFIT(VISR_BAND[IDG], NIR_BAND[IDG])
 NIREST = COEF[0] + VISR_BAND[IDG] * COEF[1]
 NIRSTD = STDDEV(NIREST,/NAN)
 
 IDSIG2=WHERE(ABS(NIREST-NIR_BAND[IDG]) LT NIRSTD AND (MEANCIRRUS LT 0.03),COUNT_IDSIG2, $
                 COMPLEMENT=N_IDSIG2, NCOMPLEMENT=N_COUNT_IDSIG2 )
  
 IF N_COUNT_IDSIG2  NE 0 THEN CLIMREF_PIXEL_CLASSIFICATION[IDG[N_IDSIG2]]  = PX_CLOUD    
 IF   COUNT_IDSIG2  NE 0 THEN CLIMREF_PIXEL_CLASSIFICATION[IDG[IDSIG2]]    = PX_CLEAR $
                         ELSE GOTO, SKIP_PASS

  IF DEBUG_MODE THEN PRINT, 'DEBUG_MODE - SCATTERPLOTS - COUNT_IDG = ', COUNT_IDG, ' / N_COUNT_IDG = ', N_COUNT_IDG

;ADJUST VS THETAS

  IDX_VALID = IDG[IDSIG2]

  XTS=THETAS[IDX_VALID]
  YTS=NIR_BAND[IDX_VALID]
        
  MEANNIR_BANDSENSOR=MEAN(YTS);

  IF DEBUG_MODE THEN PRINT, 'DEBUG_MODE - THETAS - MEANNIR_BANDSENSOR = ', MEANNIR_BANDSENSOR
        
  ;COEF DU POLYNOME
  A1=[ 0.000001968072500,  -0.000201728450661,   0.006640367507495,   0.495113033118706]
  MEANNIR_GLISSANT=A1[3] + A1[2]*XTS + A1[1]*XTS*XTS + A1[0] *XTS*XTS*XTS
        
  ; SLIDING MEAN       
  NEW_MEAN_NIR_THRESHOLD = MEAN_NIR_THRESHOLD[IDX_VALID]
  DELTAMEAN = MEANNIR_BANDSENSOR - MEANNIR_GLISSANT;
            
; CALCUL DU DELTA
; POUR CHAQUE TS
; INDICE DES POINTS SANS NUAGES : IDSIG:
;IDSIG_1=WHERE(NIR_BAND[IDG[IDSIG2]] GT (NEW_MEAN_NIR_THRESHOLD+DELTAMEAN-2*STDV_NIR_THRESHOLD[IDG[IDSIG2]]),COUNT_IDSIG1)
;IDSIG_2=WHERE(NIR_BAND[IDG[IDSIG2]] LT (NEW_MEAN_NIR_THRESHOLD+DELTAMEAN+2*STDV_NIR_THRESHOLD[IDG[IDSIG2]]),COUNT_IDSIG2)

  IDSIG=WHERE(NIR_BAND[IDX_VALID] GT (NEW_MEAN_NIR_THRESHOLD + DELTAMEAN - 2*STDV_NIR_THRESHOLD[IDX_VALID]) $ 
        AND NIR_BAND[IDX_VALID] LT (NEW_MEAN_NIR_THRESHOLD + DELTAMEAN + 2*STDV_NIR_THRESHOLD[IDX_VALID]),COUNT_IDSIG, $
            COMPLEMENT=N_IDSIG, NCOMPLEMENT=N_COUNT_IDSIG )
  
  IF N_COUNT_IDSIG NE 0 THEN CLIMREF_PIXEL_CLASSIFICATION[IDX_VALID[N_IDSIG]]  = PX_CLOUD    
  IF   COUNT_IDSIG NE 0 THEN CLIMREF_PIXEL_CLASSIFICATION[IDX_VALID[IDSIG]]    = PX_CLEAR $
                       ELSE GOTO, SKIP_PASS
 
  IF DEBUG_MODE THEN PRINT, 'DEBUG_MODE - THETAS - COUNT_IDSIG = ', COUNT_IDSIG, ' / N_COUNT_IDSIG = ', N_COUNT_IDSIG
  
  IDX_VALID = IDX_VALID[IDSIG]
;
; PASS1, FILTER 2: BLEU/SWIR RATIO 

  IDX_VALID_BLUE_BAND = WHERE( BLUE_BAND[IDX_VALID] NE MISSING_VALUE_FLOAT , NB_PX_VALID_BLUE_BAND)
  IF  NB_PX_VALID_BLUE_BAND GT 2 THEN BEGIN
  
    RATIO = BLUE_BAND[IDX_VALID[IDX_VALID_BLUE_BAND]] / NIR_BAND[IDX_VALID[IDX_VALID_BLUE_BAND]]
    MEANRATIO = MEAN(RATIO);
    STDRATIO = STDDEV(RATIO);
    
    IF DEBUG_MODE THEN PRINT, 'DEBUG_MODE - BLEU/SWIR RATIO - MEANRATIO = ', MEANRATIO, ' / STDRATIO = ', STDRATIO

    COSTHETAR = SIN(THETAS*!PI/180) * SIN(THETAV*!PI/180)*COS(PHIS*!PI/180-PHIV*!PI/180) - COS(THETAV*!PI/180)*COS(THETAS*!PI/180);
    ATR = POLY_FIT(RATIO,COSTHETAR[IDX_VALID],  3)
    
    IF ABS(ATR[0]) GT 1 THEN BEGIN
      YESTTR=RATIO
    ENDIF ELSE BEGIN
      COSTHETAR_VALID = COSTHETAR[IDX_VALID]
      YESTTR=ATR[0] + ATR[1] * COSTHETAR_VALID + ATR[2]*COSTHETAR_VALID*COSTHETAR_VALID + $
                    ATR[3] * COSTHETAR_VALID*COSTHETAR_VALID*COSTHETAR_VALID
    ENDELSE    
    
    NB1=N_ELEMENTS(YESTTR)
               
    K2=1
   
    IDRATIO = WHERE (RATIO LT (YESTTR + 2 * STDRATIO ) OR RATIO GT (YESTTR - 2 * STDRATIO) , COUNT_RATIO,$
                  COMPLEMENT=N_IDRATIO, NCOMPLEMENT=N_COUNT_RATIO )
    
    IF N_COUNT_RATIO  NE 0 THEN CLIMREF_PIXEL_CLASSIFICATION[IDX_VALID[N_IDRATIO]]  = PX_CLOUD   
    IF   COUNT_RATIO  NE 0 THEN CLIMREF_PIXEL_CLASSIFICATION[IDX_VALID[IDRATIO]]    = PX_CLEAR $    
                           ELSE GOTO, SKIP_PASS

    IF DEBUG_MODE THEN PRINT, 'DEBUG_MODE - BLEU/SWIR RATIO - COUNT_RATIO = ', COUNT_RATIO, ' / N_COUNT_RATIO = ', N_COUNT_RATIO
    
  ENDIF
  
  SKIP_PASS: 
  
  RETURN, CLIMREF_PIXEL_CLASSIFICATION
    
END 
        