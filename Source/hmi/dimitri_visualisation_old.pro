;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      DIMITRI_VISUALISATION     
;* 
;* PURPOSE:
;*      THIS IS THE MAIN PROGRAM FOR THE DIMITRI VISUALISATION HMI. AN INTERACTIVE 
;*      OBJECT GRAPHICS WIDGET IS UTILISED TO DISPLAY REQUESTED INFORMATION. OPTION 
;*      ARE AVAILABLE TO SAVE THE PLOT AND IMAGES OR A CSV FILE. 
;*
;*      THIS FILE CONTAINS A NUMBER OF PROGRAMS UTILISED BY THE VISUALISATION MODULE. 
;*      THE VISUALISATION CODE IS AT THE END OF THE FILE.
;* 
;* CALLING SEQUENCE:
;*      DIMITRI_VISUALISATION,OUTPUTFOLDER,REGION,DIMITRI_BAND,REF_SENSOR,REF_PROC_VER      
;*
;* INPUTS:
;*      OUTPUTFOLDER  - A STRING OF THE FULL PATH FOER THE OUTPUT FOLDER WHICH 
;*                      CONTAINS THE DIMITRI OUTPUT DATA
;*      REGION        - A STRING OF THE DIMITRI VALIDATION SITE REQUESTED
;*      DIMITRI_BAND  - AN INTEGER VALUE OF THE DIMITRI BAND INDEX (STARTS FROM 0)
;*      REF_SENSOR    - A STRING OF THE REFERENCE SENSOR UTILISED FOR PROCESSING
;*      REF_PROC_VER  - A STRING OF THE REFERENCE SENSOR'S PROCESSING VERSION 
;*
;* KEYWORDS:
;*      VERBOSE - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      NONE
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      08 FEB 2011 - C KENT    - DIMITRI-2 V1.0
;*      18 FEB 2011 - C KENT    - CHANGED FONT SIZE ON PLOT, AND MODIFIED WIDGET 
;*                                FOR APPEARANCE ON LINUX
;*      08 MAR 2011 - C KENT    - ADDED ERROR HANDLING IF NO REFERENCE REFLECTANCE 
;*                                DATA FOUND, AND GROUP_LEADER FUNCTIONALITY
;*      17 MAR 2011 - C KENT    - UPDATED OVERLAYING DATA SECTION
;*      19 MAY 2011 - C KENT    - MAJOR UPDATE TO INTERNAL FUNCTION OF ROUTINE TO ALLOW 
;*                                SUPER SENSOR DATA AND VGT SIMULATION OUTPUTS TO BE PLOTTED
;*
;* VALIDATION HISTORY:
;*      08 FEB 2011 - C KENT    - WINDOWS 32-BIT MACHINE IDL 7.1/IDL 8.0: NOMINAL 
;*      18 FEB 2011 - C KENT    - LINUX 64-BIT MACHINE IDL 8.0: NOMINAL BEHAVIOUR
;*      14 APR 2011 - C KENT    - WINDOWS 32-BIT IDL 7.1 AND LINUX 64-BIT IDL 8.0 NOMINAL
;*                                COMPILATION AND OPERATION
;**************************************************************************************
;**************************************************************************************

PRO VISU_OBJECT_EVENT,EVENT,VERBOSE=VERBOSE

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=VISU_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE=ACTION

;------------------------------------
; FIND THE REQUESTED PLOT TYPE AND 
; BUTTON SENSOR CONFIG 
  
  IF N_ELEMENTS(ACTION) EQ 0 THEN GOTO, NO_ACTION
    
  REQUESTED_PLOT_TYPE = STRMID(ACTION,0,3)
  ACTION_CONFIG       = STRMID(ACTION,4,STRLEN(ACTION)-4)
  REQ_PLOT_IDX        = WHERE(STRCMP(VISU_INFO.VISU_PAR_NAMES_SML,REQUESTED_PLOT_TYPE) EQ 1)
  SCFIG_IDX           = WHERE(STRCMP(VISU_INFO.VISU_SENSOR_CONFIG,ACTION_CONFIG) EQ 1)

  REQ_PLOT_IDX= REQ_PLOT_IDX[0] & SCFIG_IDX=SCFIG_IDX[0] 

;------------------------------------
; IF DATA NOT AVAILABLE FOR SENSOR THEN SKIP

  if VISU_INFO.VISU_DATA_ABL[0,SCFIG_IDX] eq 0 then GOTO, NO_ACTION

;------------------------------------
; IF REQUESTED PLOT TYPE IS RECAL 
; THEN CHANGE IT TO REFL

  IF STRCMP(REQUESTED_PLOT_TYPE,VISU_INFO.VISU_PAR_NAMES_SML[5]) THEN $
    REQUESTED_PLOT_TYPE = VISU_INFO.VISU_PAR_NAMES_SML[0]
 
;------------------------------------
; IF THE CURRENT PLOT TYPE IS DIFFERENT 
; TO THE PLOT TYPE THEN RESET THE PLOT 
 
  IF STRCMP(VISU_INFO.VISU_PLOT_TYPE,REQUESTED_PLOT_TYPE) EQ 0 THEN BEGIN 

;------------------------------------  
; SET ALL DATA TO ZERO and off, AND 
; CHANGE THE PLOT TYPE 
    
    FOR I=0,(N_ELEMENTS(VISU_INFO.VISU_OBJ_PLT_MOD)/2)-1 DO BEGIN
      VISU_INFO.VISU_OBJ_PLT_MOD[I]->SETPROPERTY,DATAX=[0.0],DATAY=[0.0]
      VISU_INFO.VISU_DATA_ON[*] = 0
    ENDFOR
    VISU_INFO.VISU_PLOT_TYPE  = REQUESTED_PLOT_TYPE      

;------------------------------------ 
; FIND OUT INDEX OF PLOT TYPE AND CHANGE Y-AXIS AND X-AXIS

    IDX = WHERE(STRCMP(VISU_INFO.VISU_PAR_NAMES_SML,VISU_INFO.VISU_PLOT_TYPE) EQ 1)
    OBJ_DESTROY,VISU_INFO.BASE_YAXIS
    
    RANGE = [VISU_INFO.VISU_YRANGE_MIN[IDX],VISU_INFO.VISU_YRANGE_MAX[IDX]]
    VISU_INFO.BASE_YAXIS = OBJ_NEW('IDLGRAXIS', 1, TICKLEN=0.025, TITLE=VISU_INFO.VISU_YTITLE[IDX], $
                                    MAJOR=VISU_INFO.VISU_MAJORTICKS[IDX],RANGE=RANGE,/exact,       $
                                    YCOORD_CONV=NORM_COORD(RANGE))
    VISU_INFO.BASE_YAXIS->GETPROPERTY,TICKTEXT=TEMP_TEXTX
    TEMP_TEXTX->SETPROPERTY,FONT=VISU_INFO.VISU_LEGEND_FONT

    OBJ_DESTROY,VISU_INFO.BASE_XAXIS
    RANGE = VISU_INFO.BASE_XRANGE
    VISU_INFO.BASE_XAXIS = OBJ_NEW('IDLGRAXIS',0, TICKLEN=0.025, TITLE=VISU_INFO.BASE_XTITLE, $
                                    RANGE=RANGE,/EXACT,       $
                                    XCOORD_CONV=NORM_COORD(RANGE))
    VISU_INFO.BASE_XAXIS->GETPROPERTY,TICKTEXT=TEMP_TEXTX
    TEMP_TEXTX->SETPROPERTY,FONT=VISU_INFO.VISU_LEGEND_FONT
    VISU_INFO.BASE_MODEL->ADD,    VISU_INFO.BASE_xAXIS

    
    VISU_INFO.BASE_MODEL->ADD,    VISU_INFO.BASE_YAXIS
    VISU_INFO.VISU_WINDOW->DRAW,  VISU_INFO.VISU_VIEW
  
  ENDIF

;------------------------------------
; CHECK IF THE REQUESTED SENSOR CONFIG 
; DATA IS ALREADY PLOTTED

  IF VISU_INFO.VISU_DATA_ON[REQ_PLOT_IDX,SCFIG_IDX] EQ 0 THEN BEGIN
  
;------------------------------------
; UPDATE THE PLOT OBJECT WITH NEW DATA

    IF ((REQ_PLOT_IDX) GT 0 AND (REQ_PLOT_IDX) LT 5) or (REQ_PLOT_IDX eq 7) THEN $
    	RES = WHERE(VISU_INFO.VISU_ALL_DATA_time[*,SCFIG_IDX,REQ_PLOT_IDX[0]] GT 0) $
    	else RES = WHERE(VISU_INFO.VISU_ALL_DATA[*,SCFIG_IDX,REQ_PLOT_IDX[0]] GT 0)
    
    stop
    
    TEMPXRANGE = [MIN(VISU_INFO.VISU_ALL_DATA_TIME[RES,SCFIG_IDX,REQ_PLOT_IDX[0]]), MAX(VISU_INFO.VISU_ALL_DATA_TIME[RES,SCFIG_IDX,REQ_PLOT_IDX[0]])]
    TEMPYRANGE = [VISU_INFO.VISU_YRANGE_MIN[REQ_PLOT_IDX[0]]    , VISU_INFO.VISU_YRANGE_MAX[REQ_PLOT_IDX[0]]    ]

    TMPX = VISU_INFO.VISU_ALL_DATA_time[RES,SCFIG_IDX,REQ_PLOT_IDX[0]]
    TMPY = VISU_INFO.VISU_ALL_DATA[RES,SCFIG_IDX,REQ_PLOT_IDX[0]]

;------------------------------------
; UPDATE THE X AXIS IS REQUIRED


    VISU_INFO.BASE_XAXIS->GETPROPERTY,RANGE=BASE_XRANGE
    VISU_INFO.BASE_YAXIS->GETPROPERTY,RANGE=BASE_YRANGE

    IF TEMPXRANGE[0] LT BASE_XRANGE[0] THEN BASE_XRANGE[0] = TEMPXRANGE[0]
    IF TEMPXRANGE[1] GT BASE_XRANGE[1] THEN BASE_XRANGE[1] = TEMPXRANGE[1]

    OBJ_DESTROY,VISU_INFO.BASE_XAXIS
    VISU_INFO.BASE_XAXIS = OBJ_NEW('IDLGRAXIS',0, TICKLEN=0.025, TITLE=VISU_INFO.BASE_XTITLE, $
                                    RANGE=BASE_XRANGE,/EXACT,       $
                                    XCOORD_CONV=NORM_COORD(BASE_XRANGE))
    VISU_INFO.BASE_XAXIS->GETPROPERTY,TICKTEXT=TEMP_TEXTX
    TEMP_TEXTX->SETPROPERTY,FONT=VISU_INFO.VISU_LEGEND_FONT
    VISU_INFO.BASE_MODEL->ADD,    VISU_INFO.BASE_XAXIS
    
;------------------------------------
; UPDATE THE PLOT OBJECT

    VISU_INFO.VISU_OBJ_PLT_MOD[REQ_PLOT_IDX,SCFIG_IDX,0]->SETPROPERTY, DATAX=TMPX,$
                                                        DATAY=TMPY,$
                                                        COLOR=VISU_INFO.VISU_ACTION_COLOUR[*,SCFIG_IDX+REQ_PLOT_IDX* $
                                                                           N_ELEMENTS(VISU_INFO.VISU_SENSOR_CONFIG)],$
                                                        XCOORD_CONV=NORM_COORD(BASE_XRANGE)        ,$
                                                        YCOORD_CONV=NORM_COORD(base_YRANGE)
 
;------------------------------------
; IF ANGULAR/CHI PLOT THEN TURN ON THE SYMBOLS

    IF ((REQ_PLOT_IDX) GT 0 AND (REQ_PLOT_IDX) LT 5) or (REQ_PLOT_IDX eq 7) THEN BEGIN
      
      SF = (TEMPYRANGE[1]-TEMPYRANGE[0])/(TEMPXRANGE[1]-TEMPXRANGE[0])
      XSYMSIZE = (TEMPXRANGE[1]-TEMPXRANGE[0])*0.015*0.5
      YSYMSIZE = (TEMPYRANGE[1]-TEMPYRANGE[0])*0.015*0.5
      
      VISU_INFO.VISU_PLOTSYMBOL[REQ_PLOT_IDX,SCFIG_IDX]->SETPROPERTY,SIZE=[XSYMSIZE, YSYMSIZE],$
                                                         COLOR=VISU_INFO.VISU_ACTION_COLOUR[*,SCFIG_IDX]   
    ENDIF

;------------------------------------
; RECORD THAT THE DATA IS NOW ON
 
    VISU_INFO.VISU_DATA_ON[REQ_PLOT_IDX,SCFIG_IDX] = 1

;------------------------------------
; REDRAW THE LEGEND IF IT IS ON    

    VISU_INFO.VISU_LEGEND->GETPROPERTY,HIDE=TEMP
    IF TEMP EQ 0 THEN BEGIN
      RES     = WHERE(VISU_INFO.VISU_DATA_ON EQ 1)
      LSTYLE  = INTARR(N_ELEMENTS(RES))
      TMP     = FLOOR(RES/VISU_INFO.VISU_NB_PARAMS)
      RES2    = RES-(TMP*VISU_INFO.VISU_NB_PARAMS)
     ; FOR I =0,N_ELEMENTS(RES)-1 DO IF RES2[I] EQ 5 THEN LSTYLE[I] = 1
      VISU_INFO.VISU_LEGEND->SETPROPERTY, ITEM_NAME  = VISU_INFO.VISU_ACTION_NAMES[RES]         ,$ 
                                          ITEM_COLOR = VISU_INFO.VISU_ACTION_COLOUR[*,tmp]      ,$
                                          ITEM_LINESTYLE = LSTYLE                               ,$
                                          THICK      = MAKE_ARRAY(N_ELEMENTS(RES),VALUE=2)      ,$
                                          HIDE = 0     
      
    ENDIF

  ENDIF 

;------------------------------------  
; REDRAW THE PLOT

  NO_ACTION:
  VISU_INFO.VISU_WINDOW->DRAW, VISU_INFO.VISU_VIEW 
  WIDGET_CONTROL, EVENT.TOP, SET_UVALUE = VISU_INFO,/NO_COPY

END

;**************************************************************************************
;**************************************************************************************

PRO STATS_TABLE_EVENT,EVENT
  
  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=STATS_STRUCT, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE=ACTION

  CASE STRUPCASE(ACTION) OF

  'SAVE': BEGIN
            FILENAME = DIALOG_PICKFILE(/WRITE,FILE='DIMITRI_STATS.csv',/OVERWRITE_PROMPT,$
                                        PATH=STATS_struct.OUTPUTFOLDER)
            IF FILENAME EQ '' THEN GOTO, NO_OUTPUT
          
            DIMS = SIZE(STATS_STRUCT.DATA)
            OPENW,OUTF,FILENAME,/GET_LUN
            NCOLS = N_ELEMENTS(STATS_STRUCT.COL_HEADERS)
            FORMAT = '('+STRTRIM(STRING(NCOLS),2)+'(A,1H;),1(A))'
            PRINTF,OUTF,'DATA',STATS_STRUCT.COL_HEADERS,FORMAT = FORMAT
          
            FORMAT = '( 1(A,1H;), '+STRTRIM(STRING(NCOLS-1),2)+'(F15.6,1H;),1(F15.6))'
            FOR I=0,N_ELEMENTS(STATS_STRUCT.ROW_HEADERS)-1 DO BEGIN
            PRINTF,OUTF,STATS_STRUCT.ROW_HEADERS[I],STATS_STRUCT.DATA[*,I],FORMAT=FORMAT
            ENDFOR
                   
            FREE_LUN,OUTF
            NO_OUTPUT:
          END
  'CLOSE':BEGIN
            WIDGET_CONTROL, EVENT.TOP, /DESTROY 
          END
  ENDCASE
END

;**************************************************************************************
;**************************************************************************************
  
PRO STATS_TABLE_RESIZE,EVENT

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=re_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE=ACTION


END

;**************************************************************************************
;**************************************************************************************

PRO VISU_OBJECT_OPTION,EVENT,VERBOSE=VERBOSE

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=visu_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE=ACTION

  CASE STRUPCASE(ACTION) OF 

;------------------------------------    
; SET ALL DATA TO ZERO AND OFF, AND 
; TURN OFF LEGEND IF IT IS ON 
    
    'RESET':BEGIN
              FOR I=0,(N_ELEMENTS(VISU_INFO.VISU_OBJ_PLT_MOD)/2)-1 DO $
                VISU_INFO.VISU_OBJ_PLT_MOD[I]->SETPROPERTY,DATAX=[0.0],DATAY=[0.0]
                VISU_INFO.VISU_DATA_ON[*] = 0
                VISU_INFO.VISU_LEGEND->GETPROPERTY,HIDE=TEMP
              IF TEMP EQ 0 THEN VISU_INFO.VISU_LEGEND->SETPROPERTY,HIDE=1
            END

;------------------------------------    
; TURN LEGEND OFF/ON 

    'LEGEND':BEGIN

              VISU_INFO.VISU_LEGEND->GETPROPERTY,HIDE=TEMP
              IF TEMP EQ 0 THEN BEGIN 
                VISU_INFO.VISU_LEGEND->SETPROPERTY,HIDE=1
                GOTO,LEGEND_SWITCH
              ENDIF
 
              DATA_ON = VISU_INFO.VISU_DATA_ON
              NAMES   = VISU_INFO.VISU_ACTION_NAMES
              COLOURS = VISU_INFO.VISU_ACTION_COLOUR
                           
              RES     = WHERE(DATA_ON EQ 1)
              IF RES[0] EQ -1 THEN GOTO,LEGEND_SWITCH
              LSTYLE  = INTARR(N_ELEMENTS(RES))
                           
              TMP     = FLOOR(RES/VISU_INFO.VISU_NB_PARAMS)
              RES2    = RES-(TMP*VISU_INFO.VISU_NB_PARAMS)
            ;  FOR I = 0,N_ELEMENTS(RES)-1 DO IF RES2[I] EQ 5 THEN LSTYLE[I] = 1
              
              VISU_INFO.VISU_LEGEND->SETPROPERTY, ITEM_NAME  = NAMES[RES]       ,$ 
                                                  ITEM_COLOR = COLOURS[*,TMP]    ,$
                                                  ITEM_LINESTYLE=LSTYLE                               ,$
                                                  THICK      = MAKE_ARRAY(N_ELEMENTS(RES),VALUE=2)    ,$
                                                  HIDE=0
              LEGEND_SWITCH:
            END
  
    'STATS':BEGIN
 
 ;------------------------------------   
 ; FIND WHICH SENSOR CONFIGS AND 
 ; PARAMETER TYPES ARE ON
 
             RES         = WHERE(VISU_INFO.VISU_DATA_ON EQ 1)
             IF RES[0] EQ -1 THEN GOTO, NO_STATS
             CFIG_ON     = FLOOR(RES/VISU_INFO.VISU_NB_PARAMS)
             PARAM_ON    = RES-(CFIG_ON*VISU_INFO.VISU_NB_PARAMS)
             TEMP_LABEL  = STRARR(N_ELEMENTS(RES))

             NEW_STATS_DATA = MAKE_ARRAY(5,N_ELEMENTS(CFIG_ON),/DOUBLE)
             FOR I=0,N_ELEMENTS(CFIG_ON)-1 DO BEGIN
               NEW_STATS_DATA[*,I] = VISU_INFO.STATS_ARRAY[*,CFIG_ON[I],PARAM_ON[I]]
               TEMP_LABEL[I]       = STRING(VISU_INFO.VISU_SENSOR_CONFIG[CFIG_ON[I]]+'_'+ $
                                             VISU_INFO.VISU_PAR_NAMES_SML[PARAM_ON[I]])
             ENDFOR
  
             DIMS  = GET_SCREEN_SIZE()
             XSIZE = 500
             YSIZE = 200
             XLOC  = (DIMS[0]/2)-(XSIZE/2)
             YLOC  = (DIMS[1]/2)-(YSIZE/2)
  
             STATS_STRUCT = {$
                              DATA:NEW_STATS_DATA                     ,$
                              COL_HEADERS:VISU_INFO.STATS_COLUMNS     ,$
                              STATS_struct:VISU_INFO.OUTPUTFOLDER     ,$
                              ROW_HEADERS:TEMP_LABEL                  }
    
             TABLE_BASE    = WIDGET_BASE(MBAR=MENU,TITLE='DIMITRI V2.0 VISU: STATS',$
                                         XSIZE=XSIZE,YSIZE=YSIZE,XOFFSET=XLOC,YOFFSET=YLOC)
             VISU_WD_DLIM  = WIDGET_BUTTON(MENU,      VALUE='||', SENSITIVE=0)
             FILE_MENU     = WIDGET_BUTTON(MENU,      VALUE='File',/MENU)
             VISU_WD_DLIM  = WIDGET_BUTTON(MENU,      VALUE='||', SENSITIVE=0)
             FILE_SAVE     = WIDGET_BUTTON(FILE_MENU, VALUE='Save',UVALUE='SAVE',EVENT_PRO='STATS_TABLE_EVENT')
             FILE_CLOSE    = WIDGET_BUTTON(FILE_MENU, VALUE='Close',UVALUE='CLOSE',/SEPARATOR,EVENT_PRO='STATS_TABLE_EVENT')
             TABLE         = WIDGET_TABLE(TABLE_BASE,VALUE=NEW_STATS_DATA,/RESIZEABLE_COLUMNS,/SCROLL, $
                                            SCR_XSIZE=XSIZE,SCR_ySIZE=ySIZE,COLUMN_WIDTHS=95,           $
                                            COLUMN_LABELS=VISU_INFO.STATS_COLUMNS,ROW_LABELS=TEMP_LABEL)
    
             WIDGET_CONTROL, TABLE_BASE, /REALIZE
             WIDGET_CONTROL, TABLE_BASE, SET_UVALUE =STATS_STRUCT,/NO_COPY
             XMANAGER,'STATS_OBJECT', TABLE_BASE,/NO_BLOCK,GROUP_LEADER=EVENT.TOP
             NO_STATS:
           END
   
  ENDCASE

;------------------------------------  
; REDRAW THE PLOT

 VISU_INFO.VISU_WINDOW->DRAW, VISU_INFO.VISU_VIEW 
 WIDGET_CONTROL, EVENT.TOP, SET_UVALUE = VISU_INFO,/NO_COPY

END

;**************************************************************************************
;**************************************************************************************

PRO VISU_OBJECT_EXPORT,EVENT

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE = VISU_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE = ACTION
 
;------------------------------------ 
; STORE THE IMAGE WITHIN THE 
; CURRENT VISU_WINDOW

  VISU_INFO.VISU_WINDOW->GETPROPERTY, IMAGE_DATA = VISU_IMAGE   
  VISU_IMAGE2 = COLOR_QUAN(VISU_IMAGE,1,R,G,B)
  
;------------------------------------ 
; DEFINE THE TEMP FILENAME

  TEMP_FNAME = STRING('DIMITRI_VISU_'+VISU_INFO.VISU_PLOT_TYPE)  

;------------------------------------ 
; SAVE THE DATA AS REQUESTED
  
  CASE ACTION OF 
    'PNG':  BEGIN
              FILENAME = DIALOG_PICKFILE(/WRITE,FILE=TEMP_FNAME+'.png',/OVERWRITE_PROMPT,$
                          PATH=VISU_INFO.OUTPUTFOLDER)
              IF FILENAME NE '' THEN WRITE_PNG,FILENAME,VISU_IMAGE2,R,G,B
            END
    'JPG':  BEGIN
              FILENAME = DIALOG_PICKFILE(/WRITE,FILE=TEMP_FNAME+'.jpg',/OVERWRITE_PROMPT,$
                          PATH=VISU_INFO.OUTPUTFOLDER)
              IF FILENAME NE '' THEN WRITE_JPEG,FILENAME,VISU_IMAGE,TRUE=1
            END
    'CSV':  BEGIN
              
              FILENAME = DIALOG_PICKFILE(/WRITE,FILE=TEMP_FNAME+'.csv',/OVERWRITE_PROMPT,$
                          PATH=VISU_INFO.OUTPUTFOLDER)
              IF FILENAME EQ '' THEN GOTO, NO_OUTPUT

;------------------------------------ 
; OPEN THE CSV FILE
 
              OPENW,OUTF,FILENAME,/GET_LUN
              HEADER  = ['REFERENCE_CONFIGURATION','VISU_SENSOR_CONFIGURATION','DIMITRI_BAND','PARAMETER']
              FORMAT  = '(3(A,1H;),(A))'
              PRINTF,OUTF,FORMAT=FORMAT,HEADER

;------------------------------------ 
; FIND WHICH DATA IS CURRENTLY PLOTTED 
; AND LOOP OVER THEM

              BAND_ID = VISU_INFO.DIMITRI_WL+' NM'
              DATA_ON   = VISU_INFO.VISU_DATA_ON 
              NB_CFIG   = VISU_INFO.VISU_NB_SENS_CONFG
              SENS_CFG  = VISU_INFO.VISU_SENSOR_CONFIG
              PARAM     = VISU_INFO.VISU_PARAM_LIST
              DATA      = VISU_INFO.VISU_ALL_DATA
             

              RES = WHERE(DATA_ON EQ 1)
              IF RES[0] EQ -1 THEN GOTO, NO_DATA_OUTPUT

              FOR I=0,N_ELEMENTS(RES)-1 DO BEGIN

                RES2 = FLOOR((RES[I]+1)/VISU_INFO.VISU_NB_PARAMS) 
                IF RES2 GE NB_CFIG THEN RES2=RES2-1

                REF = FIX(RES[I]-(RES2*VISU_INFO.VISU_NB_PARAMS)) 
                
                SENS_CFGI = SENS_CFG[RES2]
                PARAMI    = PARAM[REF]
                TT        = WHERE(DATA[*,RES2,0] GT 0.0)
                NB        = N_ELEMENTS(TT)
                TMP       = STRTRIM(STRING(NB-1),2)
                FORMAT    = '(4(A,1H;), '+TMP+'(F15.6,1H;),1(F15.6))'

;------------------------------------ 
; PRINT OUT TIME AND DATA FOR SENSOR CONFIG

                PRINTF,OUTF,FORMAT=FORMAT,VISU_INFO.VISU_SENSOR_CONFIG[0],SENS_CFGI,$
                        BAND_ID,'TIME',DATA[TT,RES2,0]
                PRINTF,OUTF,FORMAT=FORMAT,VISU_INFO.VISU_SENSOR_CONFIG[0],SENS_CFGI,$
                        BAND_ID,PARAMI,DATA[TT,RES2,REF+1]

              ENDFOR
              
              NO_DATA_OUTPUT:
              FREE_LUN,OUTF
              NO_OUTPUT:
          END
  ENDCASE

;------------------------------------  
; REDRAW THE PLOT

  VISU_INFO.VISU_WINDOW->DRAW, VISU_INFO.VISU_VIEW 
  WIDGET_CONTROL, EVENT.TOP, SET_UVALUE = VISU_INFO,/NO_COPY

END

;**************************************************************************************
;**************************************************************************************

PRO VISU_OBJECT_EXIT,EVENT

;------------------------------------
; CLEANUP OBJECTS FROM MEMORY  
  
  WIDGET_CONTROL, EVENT.TOP, GET_UVALUE = VISU_INFO, /NO_COPY
  OBJ_DESTROY,    VISU_INFO.VISU_PALETTE
  OBJ_DESTROY,    VISU_INFO.VISU_WINDOW
  OBJ_DESTROY,    VISU_INFO.VISU_VIEW
  OBJ_DESTROY,    VISU_INFO.VISU_LEGEND
  OBJ_DESTROY,    VISU_INFO.VISU_LEGENDMODEL 
  OBJ_DESTROY,    VISU_INFO.BASE_MODEL
  OBJ_DESTROY,    VISU_INFO.BASE_YTITLE
  OBJ_DESTROY,    VISU_INFO.BASE_XTITLE
  OBJ_DESTROY,    VISU_INFO.BASE_XAXIS
  OBJ_DESTROY,    VISU_INFO.BASE_YAXIS
  OBJ_DESTROY,    VISU_INFO.VISU_OBJ_PLT_MOD
  OBJ_DESTROY,    VISU_INFO.VISU_YTITLE      
  OBJ_DESTROY,    VISU_INFO.VISU_PLOTSYMBOL  
  WIDGET_CONTROL, EVENT.TOP, /DESTROY

END

;**************************************************************************************
;**************************************************************************************
;**************************************************************************************
;**************************************************************************************

PRO DIMITRI_VISUALISATION,OUTPUTFOLDER,REGION,DIMITRI_BAND,REF_SENSOR,REF_PROC_VER,$
      VERBOSE=VERBOSE,GROUP_LEADER=GROUP_LEADER

;-----------------------------------------
; CHECK OUTPUT_FOLDER EXISTS 
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: STARTING VISUALISATION MODULE'
  RES = FILE_INFO(OUTPUTFOLDER)
  IF RES.EXISTS EQ 0 THEN BEGIN
    PRINT,"DIMITRI_VISUALISATION: OUTPUT FOLDER DOESN'T EXIST"
    RETURN
  ENDIF
  
  RES = STRSPLIT(OUTPUTFOLDER,'\',/EXTRACT)
  IF N_ELEMENTS(RES) EQ 1 THEN DL = '/' ELSE DL = '\' 

;-----------------------------------------
; DEFINE FOLDERS FOR DIMITRI ANALYSIS OUTPUTS
  
  ED_FOLDER = STRING(OUTPUTFOLDER+DL+'DOUBLET_EXTRACTION'+DL)
  RC_FOLDER = STRING(OUTPUTFOLDER+DL+'RECALIBRATION'+DL)
  IC_FOLDER = STRING(OUTPUTFOLDER+DL+'INTERCALIBRATION'+DL)
  SR_FOLDER = STRING(OUTPUTFOLDER+DL+'TOA_SIMULATION'+DL)
  SL_FOLDER = STRING(OUTPUTFOLDER+DL+'VGT_SIMULATION'+DL)

  SENSOR_INDEX = GET_SENSOR_BAND_INDEX(REF_SENSOR,DIMITRI_BAND,VERBOSE=VERBOSE)
  DIMITRI_WL = CONVERT_INDEX_TO_WAVELENGTH(SENSOR_INDEX,REF_SENSOR,VERBOSE=VERBOSE)

;-----------------------------------------
; FIND THE EXTRACTED DOUBLET DATA

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: RETRIEVING DOUBLET DATA'
  VISU_REFL = DIMITRI_VISUALISATION_REFLECTANCE(ED_FOLDER,REGION,DIMITRI_BAND,REF_SENSOR,REF_PROC_VER,verbose=verbose)
  IF VISU_REFL.ERROR EQ 1 or VISU_REFL.ERROR EQ 2 THEN BEGIN
      PRINT,"DIMITRI_VISUALISATION: FATAL ERROR ENCOUNTERED DURING REFLECTANCE RETRIEVAL"
      RETURN
  ENDIF
  
;-----------------------------------------
; FIND THE EXTRACTED ANGLE DATA

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: RETRIEVING ANGLE DATA'
  VISU_ANGL = DIMITRI_VISUALISATION_ANGLES(ED_FOLDER,REGION,REF_SENSOR,REF_PROC_VER,verbose=verbose)
  IF VISU_ANGL.ERROR EQ 1 THEN BEGIN
      PRINT,"DIMITRI_VISUALISATION: FATAL ERROR ENCOUNTERED DURING ANGLE RETRIEVAL"
      RETURN
  ENDIF

;-----------------------------------------
; GET POLYNOMINAL FIT DATA

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: RETRIEVING THE POLYNOMIAL INFORMATION'
  TEMP = VISU_REFL.DATA[*,0,0]
  VISU_POLY = DIMITRI_VISUALISATION_POLYNOMIAL(IC_FOLDER,REGION,DIMITRI_WL,REF_SENSOR,REF_PROC_VER,$
                                              TEMP,VISU_REFL.SENSOR_CONFIGS,verbose=verbose)
;-----------------------------------------
; GET RECALIBRATED SENSOR DATA

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: RETRIEVING THE RECALIBRATED DATA'
  VISU_RCAL = DIMITRI_VISUALISATION_RECALIBRATION(RC_FOLDER,REGION,DIMITRI_BAND,REF_SENSOR,REF_PROC_VER,$
                                                  VISU_REFL.SENSOR_CONFIGS)

;  VISU_RCAL = {DATA: MAKE_ARRAY(VISU_REFL.NUM_XELEMENTS,VISU_REFL.NUM_SENS_CONFIGS)}
;  FOR I=0,VISU_REFL.NUM_SENS_CONFIGS-1 DO BEGIN
;    VISU_RCAL.DATA[*,I] = VISU_REFL.DATA[*,I,1]*(1.0-VISU_POLY.DATA[*,I]/100.0)
;  ENDFOR

;-----------------------------------------
; GET BRDF SIMULATED RHO

  ;VISU_BRDF = DIMITRI_VISUALISATION_BRDF_RHO(SR_FOLDER,REGION,REF_SENSOR,REF_PROC_VER,DIMITRI_BAND)

;-----------------------------------------
; GET SUPER SENSOR DATA
  
  SDATA = DIMITRI_VISUALISATION_SUPER_RHO(RC_FOLDER,REGION,REF_SENSOR,REF_PROC_VER,DIMITRI_BAND,VERBOSE=VERBOSE)

;-----------------------------------------
; GET VEGETATION DATA

  VDATA = DIMITRI_VISUALISATION_vgt_RHO(SL_FOLDER,REGION,DIMITRI_BAND,VERBOSE=VERBOSE)

;-----------------------------------------
; COMBINE THE SUPER SENSOR AND VEGETATION DATA

  NS = N_ELEMENTS(SDATA.SS_DATA[*,0])
  NV = N_ELEMENTS(VDATA.VGT_DATA[*,0,0,0])
  N_VCFIGS = N_ELEMENTS(VDATA.VGT_CONFIGS)
  NMAX = MAX([NS,NV])

  P2_ARRAY = MAKE_ARRAY(NMAX,1+2*N_VCFIGS,2,/FLOAT)
  P2_ARRAY[0:NS-1,0,0] = SDATA.SS_DATA[*,0]
  P2_ARRAY[0:NS-1,0,1] = SDATA.SS_DATA[*,1]

  FOR II=0,1 DO BEGIN
    FOR JJ=0,N_VCFIGS-1 DO BEGIN
      FOR KK=0,1 DO BEGIN
        TMP = VDATA.VGT_DATA[*,JJ+0,II,KK]
        P2_ARRAY[0:NV-1,1+2*JJ+KK,II] = TMP
      ENDFOR
    ENDFOR
  ENDFOR

;-----------------------------------------
; SORT OUT VGT CONFIGS

  VGT_CFIGS = MAKE_ARRAY(2*N_VCFIGS,/STRING,VALUE='')
  VGT_CFIGS_SMALL = MAKE_ARRAY(2*N_VCFIGS,/STRING,VALUE='')
  P2_ARRAY_CONFIG_ABLE = INTARR(1+2*N_VCFIGS)
  IF SDATA.ERROR EQ 0 THEN P2_ARRAY_CONFIG_ABLE[0] = 1 ELSE P2_ARRAY_CONFIG_ABLE[0] = 0
  IF VDATA.ERROR EQ 1 THEN BEGIN
    P2_ARRAY_CONFIG_ABLE[1:2*N_VCFIGS-1] = 0
    GOTO,NO_VFIG
  ENDIF

  FOR II=0,N_VCFIGS-1 DO BEGIN
    VGT_CFIGS[II*2]   = VDATA.VGT_CONFIGS[II]
    VGT_CFIGS[II*2+1] = VDATA.VGT_CONFIGS[II]+'_SIM'
    VGT_CFIGS_SMALL[II*2]   = 'VGTO_'+STRTRIM(STRING(II),2)
    VGT_CFIGS_SMALL[II*2+1] = 'VGTS_'+STRTRIM(STRING(II),2)
    P2_ARRAY_CONFIG_ABLE[1+II*2:2+II*2] = 1
  ENDFOR

  NO_VFIG:
  N_VCFIGS = N_ELEMENTS(VGT_CFIGS)

;-----------------------------------------
; DEFINE DIMITRI PARAMETERS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: DEFINING PARAMETERS FOR PLOT'
  NB_SENS_CONFG   = VISU_REFL.NUM_SENS_CONFIGS+N_VCFIGS+1
  SENS_CONFG      = [VISU_REFL.SENSOR_CONFIGS,'SUPER_SENSOR',VGT_CFIGS]
  NB_ORIG_CONFG   = VISU_REFL.NUM_SENS_CONFIGS
  SENSOR_NAMES    = ['AATSR','ATSR2','MERIS','MODISA','VEGETATION','PARASOL','SUPER']
  SMALL_NAMES     = ['ATS'  ,'AT2'  ,'MER'  ,'AQA'  ,'VGT'        ,'PAR'    ,'SUP']
  PARAM_LIST      = ['TOA Reflectance','Viewing Zenith Angle','Viewing Azimuth Angle',$
                     'Solar Zenith Angle','Solar Azimuth Angle','Recalibrated Reflectance',$
                     'Polynomial Fit','Chi']
  PARAM_NAMES_SML = ['REF','VZA','VAA','SZA','SAA','CAL','POL','CHI']
  NB_PARAMETERS   = N_ELEMENTS(PARAM_LIST)
  YAXIS_TEXT      = ["Reflectance (%)","Viewing Zenith Angle (Degrees)","Viewing Azimuth Angle (Degrees)",$
                     "Solar Zenith Angle (Degrees)","Solar Azimuth Angle (Degrees)","Reflectance (%)",$
                     "BIAS (%)","CHI (dl)"]
  POLY_TEMP_MIN   = FLOOR(MIN(VISU_POLY.DATA))
  POLY_TEMP_MAX   = CEIL(MAX(VISU_POLY.DATA))
  CHI_MIN         = FLOOR(MIN(VISU_REFL.DATA[*,*,2]))
  CHI_MAX         = CEIL(MAX(VISU_REFL.DATA[*,*,2]))
  
  YRANGE_MIN      = [0. ,  0., -180.0,   0.0,-180.0,0.0,POLY_TEMP_MIN,CHI_MIN]
  YRANGE_MAX      = [1.0,90.0,  180.0,  90.0, 180.0,1.0,POLY_TEMP_MAX,CHI_MAX]
  VISU_MAJORTICKS = [6  ,  10,     10,    10,    10,  6,3,            3]

;-----------------------------------------
; CREATE AN ARRAY OF ALL DATA FOR PLOTS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: STORING ALL DATA'
  
  NM =MAX([VISU_REFL.NUM_XELEMENTS,NMAX])
  
  ALL_DATA = MAKE_ARRAY(Nm,NB_SENS_CONFG,NB_PARAMETERS,/DOUBLE)
  ALL_DATA_TIME = MAKE_ARRAY(Nm,NB_SENS_CONFG,NB_PARAMETERS,/DOUBLE)

;-----------------------------------------
; SORT OUT THE TIME VARIABLE

  FOR II=0,NB_PARAMETERS-1 DO for jj = 0,VISU_REFL.NUM_SENS_CONFIGS-1 do ALL_DATA_TIME[0:VISU_REFL.NUM_XELEMENTS-1,jj,II] = VISU_REFL.DATA[*,jj,0]
  ALL_DATA_TIME[0:NMAX-1,NB_ORIG_CONFG,0] = P2_ARRAY[*,0,0]

;-----------------------------------------
; SORT OUT THE date VARIABLE

  ALL_DATA[0:VISU_REFL.NUM_XELEMENTS-1,0:NB_ORIG_CONFG-1,0] = VISU_REFL.DATA[*,*,1]
  ALL_DATA[0:VISU_REFL.NUM_XELEMENTS-1,0:NB_ORIG_CONFG-1,1] = VISU_ANGL.DATA[*,*,1]
  ALL_DATA[0:VISU_REFL.NUM_XELEMENTS-1,0:NB_ORIG_CONFG-1,2] = VISU_ANGL.DATA[*,*,2]
  ALL_DATA[0:VISU_REFL.NUM_XELEMENTS-1,0:NB_ORIG_CONFG-1,3] = VISU_ANGL.DATA[*,*,3]
  ALL_DATA[0:VISU_REFL.NUM_XELEMENTS-1,0:NB_ORIG_CONFG-1,4] = VISU_ANGL.DATA[*,*,4]
 ; ALL_DATA[0:VISU_REFL.NUM_XELEMENTS-1,0:NB_ORIG_CONFG-1,5] = VISU_RCAL.DATA[*,*]
  ALL_DATA[0:VISU_REFL.NUM_XELEMENTS-1,0:NB_ORIG_CONFG-1,6] = VISU_POLY.DATA
  ALL_DATA[0:VISU_REFL.NUM_XELEMENTS-1,0:NB_ORIG_CONFG-1,7] = VISU_REFL.DATA[*,*,2]
  
  FOR II=0,VISU_REFL.NUM_SENS_CONFIGS-1 DO BEGIN
    IF VISU_RCAL.SENS_CONFIG_ABLE[II] EQ 1 THEN BEGIN
      TMP  = WHERE(VISU_RCAL.DATA[*,II,1] GT 0.0 and VISU_RCAL.DATA[*,II,1] lt 1.0,COUNT)
      IF TMP[0] GT -1 THEN BEGIN
      ALL_DATA[0:COUNT-1,II,5] = VISU_RCAL.DATA[0:COUNT-1,II,1]
      ALL_DATA_TIME[0:COUNT-1,II,5]= VISU_RCAL.DATA[0:COUNT-1,II,0]
      ENDIF
    ENDIF
  ENDFOR
      
  ALL_DATA[0:NMAX-1,NB_ORIG_CONFG,0] = P2_ARRAY[*,0,1]
  FOR II=0,N_VCFIGS-1 DO BEGIN
    ALL_DATA[0:NMAX-1,NB_ORIG_CONFG+1+II,0] = P2_ARRAY[*,1+II,1]
    ALL_DATA_TIME[0:NMAX-1,NB_ORIG_CONFG+1+II,0] = P2_ARRAY[*,1+II,0]  
  ENDFOR
 
;-----------------------------------------
; DEFINE ARRAY INDICATING WHICH STATS SHOULD BE COMPUTED

  ;STATS_COLUMNS = ['NUM_POINTS','AVERAGE','SIGMA','REF_%ERR_AVG','REF_%ERR_SDV','POLY_%ERR_AVG','POLY_%ERR_SDV']
  STATS_COLUMNS = ['NUM_POINTS','AVERAGE','SIGMA','POLY_%ERR_AVG','POLY_%ERR_SDV']
  NB_STATS_COLS = N_ELEMENTS(STATS_COLUMNS)
  STATS_ABLE    = MAKE_ARRAY(/INTEGER,NB_STATS_COLS,NB_PARAMETERS)
  
  STATS_ABLE[*,0] = [1,1,1,0,0] 
  STATS_ABLE[*,1] = [1,1,1,0,0]
  STATS_ABLE[*,2] = [1,1,1,0,0]
  STATS_ABLE[*,3] = [1,1,1,0,0]
  STATS_ABLE[*,4] = [1,1,1,0,0]
  STATS_ABLE[*,5] = [1,1,1,0,0]
  STATS_ABLE[*,6] = [1,1,1,1,1]
  STATS_ABLE[*,7] = [1,1,1,0,0]

;-----------------------------------------
; CREATE STATS ARRAY

  STATS_ARRAY = MAKE_ARRAY(NB_STATS_COLS,NB_SENS_CONFG,NB_PARAMETERS,/DOUBLE,VALUE=-9999.0)
  
  FOR I=0,NB_PARAMETERS-1 DO BEGIN ;LOOP OVER EACH PARAMETER
    FOR J=0,NB_SENS_CONFG-1 DO BEGIN ;LOOP OVER EACH CONFIG
      TEMP = WHERE(ALL_DATA[*,J,I] GT 0.0,COUNT)
      
      IF COUNT EQ 0 THEN GOTO, NO_STATS_DATA
      IF STATS_ABLE[0,I] EQ 1 THEN STATS_ARRAY[0,J,I] = COUNT
      IF STATS_ABLE[1,I] EQ 1 THEN STATS_ARRAY[1,J,I] = MEAN(ALL_DATA[TEMP,J,I])     
      IF STATS_ABLE[2,I] EQ 1 THEN IF COUNT GT 1 THEN STATS_ARRAY[2,J,I] = STDDEV(ALL_DATA[TEMP,J,I]) ELSE  STATS_ARRAY[2,J,I] = 0.    
      
      if j lt VISU_REFL.NUM_SENS_CONFIGS then begin
            IF VISU_POLY.SENS_CONFIG_ABLE[J] EQ 1 THEN BEGIN
        RES = WHERE(VISU_POLY.POLY_ERR_DATA[*,J,0] GT 0.0)
          IF RES[0] GT -1 THEN BEGIN
            IF STATS_ABLE[3,I] EQ 1 THEN STATS_ARRAY[3,J,I] = MEAN(VISU_POLY.POLY_ERR_DATA[RES,J,1])
            IF STATS_ABLE[4,I] EQ 1 THEN STATS_ARRAY[4,J,I] = COUNT LE 1 ? 0.0 : STDEV(VISU_POLY.POLY_ERR_DATA[RES,J,1]) 
          ENDIF
      ENDIF
      endif
       
      NO_STATS_DATA:     
    ENDFOR 
  ENDFOR

;-----------------------------------------
; SET ALL NO DATA VALUES TO NANS

  RES = WHERE(STATS_ARRAY LE -9999.0,COUNT)
  IF COUNT GT 0 THEN STATS_ARRAY[RES] = !VALUES.F_NAN

;-----------------------------------------
; CREATE ARRAY TO HOLD A PLOT AND MODEL OBJECT 
; FOR EACH PARAMETER AND SENSOR CONFIG

  VISU_OBJ_PLT_MOD  = OBJARR(NB_PARAMETERS,NB_SENS_CONFG,2)

;-----------------------------------------
; CREATE ARRAYS TO DETERMINE WHEN PLOTS ARE 
; TURNED ON, AND WHICH SENSOR CONFIGS ARE 
; AVAILABLE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: CONCATENATING ALL AVAILABLE DATA ARRAYS'
  VISU_DATA_ON         = INTARR(NB_PARAMETERS,NB_SENS_CONFG)
  VISU_DATA_ABL        = INTARR(NB_PARAMETERS,NB_SENS_CONFG)
  VISU_DATA_ABL[0,0:NB_ORIG_CONFG-1]   = VISU_REFL.SENS_CONFIG_ABLE
  VISU_DATA_ABL[1,0:NB_ORIG_CONFG-1]   = VISU_REFL.SENS_CONFIG_ABLE
  VISU_DATA_ABL[2,0:NB_ORIG_CONFG-1]   = VISU_REFL.SENS_CONFIG_ABLE
  VISU_DATA_ABL[3,0:NB_ORIG_CONFG-1]   = VISU_REFL.SENS_CONFIG_ABLE
  VISU_DATA_ABL[4,0:NB_ORIG_CONFG-1]   = VISU_REFL.SENS_CONFIG_ABLE
  VISU_DATA_ABL[5,0:NB_ORIG_CONFG-1]   = VISU_POLY.SENS_CONFIG_ABLE
  VISU_DATA_ABL[6,0:NB_ORIG_CONFG-1]   = VISU_RCAL.SENS_CONFIG_ABLE
  VISU_DATA_ABL[7,0:NB_ORIG_CONFG-1]   = VISU_REFL.SENS_CONFIG_ABLE_CHI
  VISU_DATA_ABL[0,NB_ORIG_CONFG:NB_SENS_CONFG-1] = P2_ARRAY_CONFIG_ABLE

;-----------------------------------------
; CREATE ARRAY CONFIGURATION NAMES FOR LEGEND

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: CREATING THE LEGEND INFORMATION' 
  LEGEND_CONFIGS  = STRARR(NB_SENS_CONFG)
  FOR I=0,NB_ORIG_CONFG-1 DO BEGIN
    TEMP  = STRSPLIT(visu_refl.SENSOR_CONFIGS[I],'_',/EXTRACT)
    RES   = WHERE(SENSOR_NAMES EQ TEMP[0])
    TEMP  = STRLEN(TEMP[0])
    TOT   = STRLEN(VISU_REFL.SENSOR_CONFIGS[I])-TEMP-1
    LEGEND_CONFIGS[I] = SMALL_NAMES[RES]+STRMID(VISU_REFL.SENSOR_CONFIGS[I],TEMP,TOT+1<4)
  ENDFOR
  
  LEGEND_CONFIGS[NB_ORIG_CONFG] = SMALL_NAMES[6]+'_SEN'
  LEGEND_CONFIGS[NB_ORIG_CONFG+1:NB_SENS_CONFG-1] = VGT_CFIGS_SMALL
  IF STRCMP(STRUPCASE(!VERSION.OS_FAMILY),'WINDOWS') EQ 1 THEN   VISU_LEGEND_FONT  = OBJ_NEW('IDLGRFONT',SIZE=11.0) ELSE $
    VISU_LEGEND_FONT  = OBJ_NEW('IDLGRFONT',SIZE=9.0) 

;------------------------------------ 
; CREATE THE PALETTE OBJECT
  
  COLORTABLE    = 39
  VISU_PALETTE  = OBJ_NEW('IDLGRPALETTE')
  VISU_PALETTE->LOADCT, COLORTABLE

;------------------------------------ 
; CREATE INITIAL RANGE FOR THE PLOTS X-AXIS
 
  XMIN = MIN(VISU_REFL.DATA[*,0,0],MAX=XMAX)
  XTOP = CEIL(XMAX)+1
  ;IF FLOAT(XTOP)-XMAX       GT 0.5 THEN XTOP = XTOP-0.5
  ;XTOP
  XBTM = FLOOR(XMIN)
  IF ABS(FLOAT(XBTM)-XMIN)  GT 0.5 THEN XBTM = XBTM+0.5
  
;------------------------------------ 
; CREATE THE BASE DATA AND TITLES  
  
  BASE_XDATA     = FLTARR(11) & BASE_YDATA = FLTARR(11)
  BASE_XRANGE    = [XBTM,XTOP]
  BASE_YRANGE    = [0.0,1.0]
  BASE_YMAJTICKS = 1
  BASE_XTITLE    = OBJ_NEW('IDLGRTEXT',"Date",RECOMPUTE_DIMENSION=2,FONT=VISU_LEGEND_FONT)
  BASE_YTITLE    = OBJ_NEW('IDLGRTEXT',"NOT SELECTED",RECOMPUTE_DIMENSION=2,FONT=VISU_LEGEND_FONT)

;------------------------------------ 
; CREATE THE Y AXIS TITLES AND APPEND 
; THE PARAMETER TYPE TO THE LEGEND NAME 

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: CREATING THE X AND Y AXES FOR THE PLOT'
  VISU_YTITLE  = OBJARR(NB_PARAMETERS)
  ACTION_NAMES = STRARR(NB_PARAMETERS,NB_SENS_CONFG)
  
  FOR I=0,NB_PARAMETERS-1 DO begin
    VISU_YTITLE[I] = OBJ_NEW('IDLGRTEXT',YAXIS_TEXT[I],RECOMPUTE_DIMENSION=2,FONT=VISU_LEGEND_FONT)
    FOR J=0,NB_SENS_CONFG-1 DO ACTION_NAMES[I,J] = PARAM_NAMES_SML[I]+'_'+LEGEND_CONFIGS[J]
  ENDFOR

;------------------------------------ 
; CREATE THE AXIS AND LEGEND OBJECTS

  BASE_XAXIS  = OBJ_NEW('IDLGRAXIS', 0, TICKLEN=0.025, TITLE=BASE_XTITLE, $
                      RANGE=BASE_XRANGE, /EXACT,XCOORD_CONV=NORM_COORD(BASE_XRANGE))
  BASE_YAXIS  = OBJ_NEW('IDLGRAXIS', 1, TICKLEN=0.025, TITLE=BASE_YTITLE, $
                      RANGE=BASE_YRANGE, /EXACT,YCOORD_CONV=NORM_COORD(BASE_YRANGE))
  
  BASE_XAXIS->GETPROPERTY,TICKTEXT=TEMP_TEXTX  
  BASE_YAXIS->GETPROPERTY,TICKTEXT=TEMP_TEXTY
  TEMP_TEXTX->SETPROPERTY,FONT=VISU_LEGEND_FONT
  TEMP_TEXTY->SETPROPERTY,FONT=VISU_LEGEND_FONT
  VISU_LEGEND = OBJ_NEW('IDLGRLEGEND',/SHOW_OUTLINE,/HIDE,BORDER_GAP=0.2,FONT=VISU_LEGEND_FONT)

;------------------------------------  
; CREATE THE PLOT MODEL
 
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: CREATING THE PLOT AND LEGEND MODELS'
  BASE_MODEL = OBJ_NEW('IDLGRMODEL')
  BASE_MODEL->ADD,BASE_XAXIS
  BASE_MODEL->ADD,BASE_YAXIS
  VISU_LEGENDMODEL = OBJ_NEW('IDLGRMODEL')
  VISU_LEGENDMODEL->ADD,VISU_LEGEND

;------------------------------------ 
; CREATE THE PLOT VIEW

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: CREATING THE VISU_VIEW OBJECT'
  VISU_VIEW = OBJ_NEW('IDLGRVIEW',/DOUBLE)
  VISU_VIEW->ADD,BASE_MODEL
  VISU_VIEW->ADD,VISU_LEGENDMODEL
  ;VISU_VIEW->SETPROPERTY, VIEWPLANE_RECT = [-0.1, -0.1, 1.2, 1.2]
  VISU_VIEW->SETPROPERTY, VIEWPLANE_RECT = [-0.12, -0.12, 1.3, 1.2]

;------------------------------------ 
; CREATE THE PLOTS AND MODELS FOR EACH 
; SENSOR CONFIG AND EACH PARAMETER

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: CREATING THE PLOT AND MODEL OBJECTS FOR', $ 
                                      'EACH SENSOR CONFIG AND PARAMETER'
  FOR I=0L,N_ELEMENTS(VISU_OBJ_PLT_MOD)-1 DO BEGIN
    IF I LT (NB_PARAMETERS*NB_SENS_CONFG) THEN BEGIN

      VISU_OBJ_PLT_MOD[I] = OBJ_NEW('IDLGRPLOT',BASE_XDATA,BASE_YDATA                 ,$
                              LINESTYLE=0, COLOR=[255,255,255],THICK=1                 ,$
                              XCOORD_CONV = NORM_COORD(BASE_XRANGE)                   ,$
                              YCOORD_CONV = NORM_COORD(BASE_YRANGE)                    $
                             )
    ENDIF ELSE BEGIN
      VISU_OBJ_PLT_MOD[I]  = OBJ_NEW('IDLGRMODEL')
      VISU_OBJ_PLT_MOD[I]  ->ADD,  VISU_OBJ_PLT_MOD[I-(NB_PARAMETERS*NB_SENS_CONFG)]
      VISU_VIEW     ->ADD,  VISU_OBJ_PLT_MOD[I]
    ENDELSE
  ENDFOR

;------------------------------------
; SET ALL RE-CALIBRATED DATA TO BE A 
; DOTTED LINE

;  FOR I = 0,NB_SENS_CONFG-1 DO VISU_OBJ_PLT_MOD[5,I,0]->SETPROPERTY,LINESTYLE=1,THICK=2

;------------------------------------
; CREATE PLOT SYMBOLS FOR THE ANGULAR 
; DATA AND GET THE COLOURS FOR EACH 
; SENSOR CONFIGURATION

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: CREATING PLOT SYMBOLS AND RETRIEVING CONFIG COLOURS'
  PLOTSYMBOL = OBJARR(NB_PARAMETERS,NB_SENS_CONFG)
  ACTION_COLOURS = BYTARR(3,NB_SENS_CONFG*NB_PARAMETERS)
  TEMP_COLOURS = GET_DIMITRI_VISUALISATION_COLOURS(NB_SENS_CONFG)
  
  FOR I=0,NB_SENS_CONFG-1 DO BEGIN 
    FOR J=0,NB_PARAMETERS-1 DO BEGIN 
    IF (J GE 1) AND (J LE 4) OR (J EQ 7) THEN BEGIN
      PLOTSYMBOL[J,I]=OBJ_NEW('IDLGRSYMBOL',DATA=2,THICK=1)
      VISU_OBJ_PLT_MOD[J,I,0]->SETPROPERTY,SYMBOL=PLOTSYMBOL[J,I],LINESTYLE=6
    ENDIF
    ACTION_COLOURS[*,J*NB_SENS_CONFG+I] = TEMP_COLOURS[*,I]
    ENDFOR
  ENDFOR

;------------------------------------ 
; GET THE DISPLAY RESOLUTION FOR WIDGET POSITIONING

  DIMS  = GET_SCREEN_SIZE()
  XSIZE = 700
  YSIZE = 450
  XLOC  = (DIMS[0]/2)-(XSIZE/2)
  YLOC  = (DIMS[1]/2)-(YSIZE/2)
  
;------------------------------------ 
; DEFINE THE BASE WIDGET FOR THE PLOT

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: DEFINING THE WIDGET AND BUTTONS'
  WD_TITLE = STRING('DIMITRI 2.0 VISU: REF SENSOR - '+REF_SENSOR+' // '+REF_PROC_VER)
  VISU_WD_TLB  = WIDGET_BASE(TITLE=WD_TITLE,MBAR=MENUBASE,TLB_SIZE_EVENTS=1,$
                            COLUMN=1, BASE_ALIGN_CENTER=1,XOFFSET=XLOC, YOFFSET=YLOC)
  VISU_WD_DRAW = WIDGET_DRAW(VISU_WD_TLB, XSIZE=XSIZE, YSIZE=YSIZE, GRAPHICS_LEVEL=2, RETAIN=2)

;------------------------------------ 
; CREATE THE FILE MENU AND BUTTONS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: CREATING THE FILE MENU'
  VISU_WD_DLIM = WIDGET_BUTTON(MENUBASE,      VALUE='||', SENSITIVE=0)
  VISU_WD_FILE = WIDGET_BUTTON(MENUBASE,      VALUE='File'      ,/MENU)
  VISU_WD_EXPT = WIDGET_BUTTON(VISU_WD_FILE,  VALUE='Save as...',/MENU)
  VISU_WD_OUPT = WIDGET_BUTTON(VISU_WD_EXPT,  VALUE='JPG'       ,UVALUE='JPG'   ,EVENT_PRO='VISU_OBJECT_EXPORT')
  VISU_WD_OUPT = WIDGET_BUTTON(VISU_WD_EXPT,  VALUE='PNG'       ,UVALUE='PNG'   ,EVENT_PRO='VISU_OBJECT_EXPORT')
  VISU_WD_OUPT = WIDGET_BUTTON(VISU_WD_EXPT,  VALUE='CSV'       ,UVALUE='CSV'   ,EVENT_PRO='VISU_OBJECT_EXPORT')
  VISU_WD_EXIT = WIDGET_BUTTON(VISU_WD_FILE, /SEPARATOR         ,VALUE ='Exit'  ,EVENT_PRO='VISU_OBJECT_EXIT')

;------------------------------------
; CREATE THE OPTIONS MENU

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: CREATING THE OPTIONS MENU'
  VISU_WD_DLIM    = WIDGET_BUTTON(MENUBASE,       VALUE='||',SENSITIVE=0)
  VISU_WD_OPTION  = WIDGET_BUTTON(MENUBASE,       VALUE='Options' ,/MENU)
  VISU_WD_BTN     = WIDGET_BUTTON(VISU_WD_option, VALUE='Statistics',UVALUE='STATS',EVENT_PRO='VISU_OBJECT_OPTION')
  VISU_WD_BTN     = WIDGET_BUTTON(VISU_WD_option, VALUE='Legend'  ,UVALUE='LEGEND',EVENT_PRO='VISU_OBJECT_OPTION')
  VISU_WD_BTN     = WIDGET_BUTTON(VISU_WD_option, VALUE='Reset'   ,UVALUE='RESET',EVENT_PRO='VISU_OBJECT_OPTION')
  VISU_WD_DLIM    = WIDGET_BUTTON(MENUBASE,       VALUE='||',SENSITIVE=0)

;------------------------------------ 
; CREATE THE OVERLAY MENU'S

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: CREATING THE OVERLAY MENU'
  VISU_WD_REFL = WIDGET_BUTTON(MENUBASE,     VALUE='TOA Rho' ,/MENU)
  VISU_WD_RCAL = WIDGET_BUTTON(MENUBASE,     VALUE='RECAL Rho' ,/MENU)
  VISU_WD_PLY  = WIDGET_BUTTON(MENUBASE,     VALUE='POLY Bias' ,/MENU)
  VISU_WD_VZA  = WIDGET_BUTTON(MENUBASE,     VALUE='VZA' ,/MENU)
  VISU_WD_VAA  = WIDGET_BUTTON(MENUBASE,     VALUE='VAA' ,/MENU)
  VISU_WD_SZA  = WIDGET_BUTTON(MENUBASE,     VALUE='SZA' ,/MENU)
  VISU_WD_SAA  = WIDGET_BUTTON(MENUBASE,     VALUE='SAA' ,/MENU)
  VISU_WD_CHI  = WIDGET_BUTTON(MENUBASE,     VALUE='CHI' ,/MENU)

  TEMP = [VISU_WD_REFL,VISU_WD_VZA,VISU_WD_VAA,VISU_WD_SZA,VISU_WD_SAA,VISU_WD_RCAL,VISU_WD_PLY,VISU_WD_CHI]

;------------------------------------
; LOOP OVER EACH PARAMETER AND SENSOR 
; CONFIG AND ADD A MENU IF DATA AVAILABLE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,"DIMITRI_VISUALISATION: CREATING MENU'S ONLY FOR DATA AVAILABLE"
  FOR I=0,NB_PARAMETERS-1 DO BEGIN
    FOR J=0,NB_SENS_CONFG-1 DO BEGIN
      IF VISU_DATA_ABL[I,J] EQ 1 THEN BEGIN
        VISU_WD_BTN = WIDGET_BUTTON(TEMP[I],VALUE=SENS_CONFG[j],UVALUE=STRING(PARAM_NAMES_SML[I]+'_'+SENS_CONFG[j]),EVENT_PRO='VISU_OBJECT_EVENT')
      ENDIF
    ENDFOR
  ENDFOR

;------------------------------------  
; REALIZE THE WIDGET

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: REALISING THE WIDGET'
  WIDGET_CONTROL, VISU_WD_TLB, /REALIZE
  WIDGET_CONTROL, VISU_WD_DRAW, GET_VALUE=VISU_WINDOW

;------------------------------------  
; CREATE THE BLANK PLOT AND MOVE THE LEGEND
 
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISUALISATION: ADDING THE BLANK PLOT AND MOVING THE LEGEND'
  VISU_WINDOW->DRAW, VISU_VIEW
  DIMS = VISU_LEGEND->COMPUTEDIMENSIONS(VISU_WINDOW) 
  VISU_LEGENDMODEL->TRANSLATE, .98, .6, 0 
  VISU_WINDOW->SETPROPERTY, PALETTE=VISU_PALETTE
  VISU_WINDOW->DRAW, VISU_VIEW

;------------------------------------  
; DEFINE THE INFO STRUCTURE TO CONTAIN 
; ALL DATA AND OBJECTS

  IF NOT KEYWORD_SET(GROUP_LEADER) THEN GROUP_LEADER = VISU_WD_TLB
  VISU_INFO = { $
              GROUP_LEADER      : GROUP_LEADER                    ,$
              OUTPUTFOLDER      : OUTPUTFOLDER                    ,$
              DIMITRI_WL        : DIMITRI_WL                      ,$
              VISU_PALETTE      : VISU_PALETTE                    ,$
              VISU_WINDOW       : VISU_WINDOW                     ,$
              VISU_VIEW         : VISU_VIEW                       ,$
              VISU_LEGEND       : VISU_LEGEND                     ,$
              VISU_LEGEND_FONT  : VISU_LEGEND_FONT                ,$
              VISU_LEGENDMODEL  : VISU_LEGENDMODEL                ,$
              BASE_MODEL        : BASE_MODEL                      ,$
              BASE_XRANGE       : BASE_XRANGE                     ,$
              BASE_YRANGE       : BASE_YRANGE                     ,$
              BASE_YTITLE       : BASE_YTITLE                     ,$
              BASE_XTITLE       : BASE_XTITLE                     ,$
              BASE_XAXIS        : BASE_XAXIS                      ,$
              BASE_YAXIS        : BASE_YAXIS                      ,$
              VISU_OBJ_PLT_MOD  : VISU_OBJ_PLT_MOD                ,$
              VISU_PLOT_TYPE    : 'NUL'                           ,$
              VISU_DATA_ON      : VISU_DATA_ON                    ,$
              VISU_DATA_ABL     : VISU_DATA_ABL                   ,$
              VISU_SENSOR_CONFIG: SENS_CONFG                      ,$
              VISU_NB_SENS_CONFG: NB_SENS_CONFG                   ,$
              VISU_PAR_NAMES_SML: PARAM_NAMES_SML                 ,$
              VISU_NB_PARAMS    : NB_PARAMETERS                   ,$      
              VISU_ALL_DATA     : ALL_DATA                        ,$
              VISU_ALL_DATA_time: ALL_DATA_time                   ,$
              VISU_YRANGE_MIN   : YRANGE_MIN                      ,$
              VISU_YRANGE_MAX   : YRANGE_MAX                      ,$
              VISU_MAJORTICKS   : VISU_MAJORTICKS                 ,$
              VISU_YTITLE       : VISU_YTITLE                     ,$
              VISU_ACTION_NAMES : ACTION_NAMES                    ,$
              VISU_ACTION_COLOUR: ACTION_COLOURS                  ,$
              VISU_PLOTSYMBOL   : PLOTSYMBOL                      ,$
              VISU_PARAM_LIST   : PARAM_LIST                      ,$
              STATS_COLUMNS     : STATS_COLUMNS                   ,$
              STATS_ARRAY       : STATS_ARRAY                      $
              }
       
  WIDGET_CONTROL,VISU_WD_TLB,SET_UVALUE=VISU_INFO,/NO_COPY,GROUP_LEADER=GROUP_LEADER
  XMANAGER,'VISU_OBJECT', VISU_WD_TLB,/NO_BLOCK

end
