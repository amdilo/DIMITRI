;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      NETCDFREAD_CALIB_OUTPUT       
;* 
;* PURPOSE:
;*      READ THE CALIBRATION OUTPUT NCDF FILE 
;* 
;* CALLING SEQUENCE:
;*      RES = NETCDFREAD_CALIB_OUTPUT(NCDF_CALIB_STRUCT, /VERBOSE)      
;* 
;* INPUTS:
;*      NCDF_FILENAME  = NAME OF THE CALIBRATION OUTPUT NCDF FILE
;*
;* KEYWORDS:
;*      NCDF_CALIB_STRUCT   - STRUCTURE ASSOCIATED TO THE NCDF CALIBRATION OUTPUT FILE
;*      VERBOSE             - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS  - READING STATUS (0:OK, -1:ERROR)
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      16 FEB 2015 - NCG / MAGELLIUM - CREATION (DIMITRI V4.0)
;*
;* VALIDATION HISTORY:
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION NETCDFREAD_CALIB_OUTPUT, NCDF_FILENAME, NCDF_CALIB_STRUCT=NCDF_CALIB_STRUCT, VERBOSE=VERBOSE

  FCT_NAME = 'NETCDFREAD_CALIB_OUTPUT'
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ': START'
  
  STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
  STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')

  IF STRCMP(STRING(NCDF_FILENAME),'') THEN BEGIN
    PRINT, FCT_NAME + ': ERROR, NO INPUT FILE PROVIDED, RETURNING...'
    RETURN, STATUS_ERROR
  ENDIF

  ; OPEN THE NETCDF FILE
  NCID = NCDF_OPEN(NCDF_FILENAME,/NOWRITE )
  IF NCID EQ -1 THEN BEGIN
    PRINT, FCT_NAME + ': ERROR, NCDF FILE ' + NCDF_FILENAME + ' CAN NOT BE OPEN'
    RETURN, STATUS_ERROR
  ENDIF 
    
  ; GET SENSOR GLOBAL ATTRIBUTES
  NCDF_ATTGET, ncid , 'SENSOR', SENSOR , /GLOBAL
;  IF SENSOR EQ !NULL THEN BEGIN
;    PRINT, FCT_NAME + ': ERROR, SENSOR GLOBAL ATTRIBUTE CAN NOT BE FOUND INSIDE ' + NCDF_FILENAME + ' NETCDF CALIBRATION FILE
;    RETURN, STATUS_ERROR
;  ENDIF
  SENSOR = STRING(SENSOR)
  
  ; GET BAND INFORMATION
  BAND_INFO = GET_SENSOR_BAND_INFO(SENSOR)
  NB_BANDS = BAND_INFO.NB_BAND  
  BAND_REF_LABEL = BAND_INFO.BAND_REF_LABEL
  
  ; CHECK THE NUMBER OF GLOBAL ATTRIBUTES, VARIABLES AND DIMENSIONS
  NCDF_CALIB_STRUCT = GET_NCDF_CALIB_STRUCT(1,1,1,1)
  NB_GLOBAL_ATT = N_TAGS(NCDF_CALIB_STRUCT.GLOBAL_ATT)
  NB_DIMS = N_TAGS(NCDF_CALIB_STRUCT.DIMENSIONS)
  NB_VARS = N_TAGS(NCDF_CALIB_STRUCT.VARIABLES) 
  CONTROL = NCDF_INQUIRE(NCID)
  IF (CONTROL.NDIMS NE NB_DIMS $
      OR CONTROL.NGATTS NE NB_GLOBAL_ATT) THEN BEGIN
    PRINT, FCT_NAME + ': ERROR, NUMBER OF GLOBAL ATTRIBUTES OR DIMENSIONS OF THE NCDF FILE ' $
                      + NCDF_FILENAME + ' DO NOT MATCH THE CALIBRATION OUTPUT FORMAT DEFINITION'
    RETURN, STATUS_ERROR
  ENDIF 
  
  ; CHECK DIMENSIONS FIELDS
  DIM_ROI     = NCDF_DIMID( ncid, 'ROI_PIXEL_NUMBER')
  DIM_CALIB   = NCDF_DIMID( ncid, 'CALIB_PIXEL_NUMBER')
  DIM_VIEWDIR = NCDF_DIMID( ncid, 'VIEWDIR_NUMBER')
  IF (DIM_ROI EQ -1 OR DIM_CALIB EQ -1 OR DIM_VIEWDIR EQ -1) THEN BEGIN
    PRINT, FCT_NAME + ': ERROR, APPROPRIATE DIMENSION FIELDS CAN NOT BE FOUND INSIDE ' + NCDF_FILENAME + ' NETCDF CALIBRATION FILE
    RETURN, STATUS_ERROR
  ENDIF
  
  ; READ DIMENSIONS FIELDS
  NCDF_DIMINQ, ncid, DIM_ROI, NAME, ROI_PIXEL_NUMBER
  NCDF_DIMINQ, ncid, DIM_CALIB, NAME, CALIB_PIXEL_NUMBER
  NCDF_DIMINQ, ncid, DIM_VIEWDIR, NAME, VIEWDIR_NUMBER
  
  ; SEARCH FOR NUMBER OF BANDS FROM 'REFL_BAND_xx' VARIABLES
  REFL_BAND_IDS = INTARR(NB_BANDS)
  BAND_NUMBER = 0
  FOR BAND=0, NB_BANDS-1 DO BEGIN
  
    NCDF_VAR_ID = NCDF_VARID(NCID, 'REFL_' + BAND_REF_LABEL[BAND])
    IF NCDF_VAR_ID NE -1 THEN BEGIN
      REFL_BAND_IDS[BAND_NUMBER] = BAND
      BAND_NUMBER = BAND_NUMBER + 1
    ENDIF     
    
  ENDFOR  
    
  IF NB_BANDS LT BAND_NUMBER THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ': ERROR, NUMBER OF BANDS IN THE NCDF FILE NOT COMPATIBLE WITH SENSOR NUMBER OF BANDS '
    RETURN, STATUS_ERROR
  ENDIF

  ; CREATE CALIBRATION OUTPUT STRUCURE
  NCDF_CALIB_STRUCT = GET_NCDF_CALIB_STRUCT(CALIB_PIXEL_NUMBER, ROI_PIXEL_NUMBER, VIEWDIR_NUMBER, BAND_NUMBER)
  
  NCDF_CALIB_STRUCT.VARIABLES.REFL_BAND_IDS = REFL_BAND_IDS[0:BAND_NUMBER-1]
  
  ; READ GLOBAL ATTRIBUTES
  TAGS_NAME = TAG_NAMES(NCDF_CALIB_STRUCT.GLOBAL_ATT)
  FOR NUM=0, NB_GLOBAL_ATT-1 DO BEGIN
    NCDF_ATTGET, NCID, TAGS_NAME[NUM] , ATTRIBUT , /GLOBAL
    NCDF_CALIB_STRUCT.GLOBAL_ATT.(NUM) = STRING(ATTRIBUT)
  ENDFOR
  
  ; READ VARIABLES FIELDS
  TAGS_NAME = TAG_NAMES(NCDF_CALIB_STRUCT.VARIABLES)
  NB_TAGS = N_TAGS(NCDF_CALIB_STRUCT.VARIABLES)
  FOR NUM=0, NB_TAGS-1 DO BEGIN
  
    SWITCH TAGS_NAME[NUM] OF
     
     'REFL_BAND_IDS': GOTO, FOLLOW
     
     'REFL_BAND' : ; REFLECTANCE BAND VARIABLE
     'BAND_GAZ_TRANS': ; GAZEOUS TRANSMISSION FOR EACH BAND VARIABLE    
     'BAND_RHO_SIM' : ; REFLECTANCE SIMULATION FOR EACH BAND VARIABLE
     'BAND_RHO_SIM_UNCERT' : ; REFLECTANCE SIMULATION FOR EACH BAND VARIABLE
     'BAND_REF_TO_SIM_RATIO' : ; REFLECTANCE SIMULATION FOR EACH BAND VARIABLE 
     'BAND_VALID_INDEX' : BEGIN ; REFLECTANCE SIMULATION FOR EACH BAND VARIABLE
        GOTO, BAND_VARIABLE
      END

     'WIND_SPEED_ESTIM' : IF STRMATCH(NCDF_CALIB_STRUCT.GLOBAL_ATT.CALIBRATION_METHOD, '*SUNGLINT*',/FOLD_CASE) NE 1 THEN GOTO, FOLLOW
     
     'AEROSOL_OT_ESTIM' : IF STRMATCH(NCDF_CALIB_STRUCT.GLOBAL_ATT.CALIBRATION_METHOD, '*RAYLEIGH*',/FOLD_CASE) NE 1 THEN GOTO, FOLLOW
    
      ELSE: BEGIN
        ; OTHER VARIABLE 
        NCDF_VAR_ID = NCDF_VARID(NCID, TAGS_NAME[NUM])
        IF NCDF_VAR_ID EQ -1 THEN BEGIN
          PRINT, FCT_NAME + ': ERROR, VARIABLE ' + TAGS_NAME[NUM] + ' NOT FOUND INSIDE ' + NCDF_FILENAME + ' NETCDF CALIBRATION FILE
          RETURN, STATUS_ERROR
        ENDIF     
        NCDF_VARGET, NCID, NCDF_VAR_ID, VARIABLE
        NCDF_CALIB_STRUCT.VARIABLES.(NUM) = VARIABLE
        GOTO, FOLLOW
      END
    
    ENDSWITCH
    
    BAND_VARIABLE:    
      ; CASE OF FOLLOWING VARIABLES: 
      ; 'REFL_BAND'            : REFLECTANCE BAND VARIABLE
      ; 'BAND_GAZ_TRANS'       : GAZEOUS TRANSMISSION FOR EACH BAND VARIABLE    
      ; 'BAND_RHO_SIM'         : REFLECTANCE SIMULATION FOR EACH BAND VARIABLE
      ; 'BAND_RHO_SIM_UNCERT'  : REFLECTANCE SIMULATION FOR EACH BAND VARIABLE
      ; 'BAND_REF_TO_SIM_RATIO': REFLECTANCE SIMULATION FOR EACH BAND VARIABLE
      ; 'BAND_VALID_INDEX'     : REFLECTANCE SIMULATION FOR EACH BAND VARIABLE
    
      FOR BAND=0, BAND_NUMBER-1 DO BEGIN

        BAND_NUM = REFL_BAND_IDS[BAND]
        IF TAGS_NAME[NUM] EQ 'REFL_BAND' THEN NCDF_TAG_NAME = 'REFL_' + BAND_REF_LABEL[BAND_NUM] $
        ELSE BEGIN
          NCDF_PART = STRMID(TAGS_NAME[NUM],4,STRLEN(TAGS_NAME[NUM])-4) ; SUPPRESS 'BAND' PART OF THE TAG NAME
          NCDF_TAG_NAME = BAND_REF_LABEL[BAND_NUM] + NCDF_PART
        ENDELSE
        NCDF_VAR_ID = NCDF_VARID(NCID, NCDF_TAG_NAME)
        IF NCDF_VAR_ID EQ -1 THEN BEGIN
          PRINT, FCT_NAME + ': ERROR, VARIABLE ' + NCDF_TAG_NAME + ' NOT FOUND INSIDE ' + NCDF_FILENAME + ' NETCDF CALIBRATION FILE
          RETURN, STATUS_ERROR
        ENDIF     
        NCDF_VARGET, NCID, NCDF_VAR_ID, VARIABLE
        NCDF_CALIB_STRUCT.VARIABLES.(NUM)[*,*,BAND] = VARIABLE
        
      ENDFOR

    FOLLOW:
    
  ENDFOR
  
  ; READ VARIABLES ATTRIBUTES FIELDS
  
  ; TBC
  
  
  
  
  
 
  NCDF_CLOSE, NCID

  IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ': END'
  
  RETURN, STATUS_OK
  
END
