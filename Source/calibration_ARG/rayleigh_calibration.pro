;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      RAYLEIGH_CALIBRATION
;* 
;* PURPOSE:
;*      APPLY RAYLEIGH VICARIOUS CALIBRATION FOLLOWING HAGOLLE ET AL 1999
;*      CALIBRATION FACTOR "AK" ARE COMPUTED UP TO 670 NM FOR THE CHOSEN SENSOR
;* 
;* CALLING SEQUENCE:
;*      RES = RAYLEIGH_CALIBRATION(SITE_NAME,SENSOR,PROC_VERSION, $
;*				   YEAR, CLOUD_PERCENTAGE, ROI_PERCENTAGE,$
;*                                 WS_MAX, CHL, THRESH_RHORC_865, AER)
;* 
;* INPUTS:
;*      SITE_NAME       - THE VALIDATION SITE NAME E.G. 'Uyuni'
;*      SENSOR       - THE NAME OF THE REFERENCE SENSOR FOR INTERCALIBRATION
;*      PROC_VERSION     - THE PROCESSING VERSION OF THE REFERENCE SENSOR
;*      YEAR             - THE YEAR E.G. 2003 OR 'ALL'
;*	CLOUD_PERCENTAGE - THE PERCENTAGE CLOUD COVER THRESHOLD ALLOWED WITHIN PRODUCTS E.G. 60.0
;*	ROI_PERCENTAGE   - THE PERCENTAGE ROI COVERAGE ALLOWED WITHIN PRODUCTS E.G. 75.0 
;*	WS_MAX           - THE MAXIMUM WIND SPEED IN M/S ALLOWED FOR AN OBSERVATION E.G. 5.0 
;*	CHL              - THE CHLOROPHYLL CONCENTRATION IN MG/M3 E.G. 0.035 
;*	THRESH_RHORC_865 - THRESHOLD ON RAYLEIGH CORRECT NORMALISED RADIANCE AT 865 E.G. 0.002
;*	AER              - THE AEROSOL NAME IN RTM FILE E.G. IAER_1
;*
;* KEYWORDS:
;*      CLIM            - OPTION TO READ CHL CLIMATOLOGY
;*      PIX             - OPTION TO ACTIVATE THE PIXEL-PER-PIXEL MODE
;*      VERBOSE         - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS          - 1: NO ERRORS REPORTED, (-1) OR 0: ERRORS DURING INGESTION 
;*
;* COMMON BLOCKS:
;*      RTM_LUT
;*
;* MODIFICATION HISTORY:
;*        01 NOV 2013 - C MAZERAN - FIRST IMPLEMENTATION
;*        02 JAN 2014 - C MAZERAN - ADDED CORRECTION FOR PRESSURE AND PIXEL-BY-PIXEL CLOUD SCREENING
;*        10 MAR 2015 - NCG / MAGELLIUM - UPDATED WITH NCDF INPUT/OUTPUT INTERFACES 
;*                                  AND LOOPS ON PRODUCTS/VIEWING DIRECTIONS (DIMITRI V4)
;*
;* VALIDATION HISTORY:
;*        01 NOV 2013 - C MAZERAN - LINUX 64-BIT MACHINE IDL 820, NOMINAL COMPILATION AND OPERATION.
;*                                  TESTED FOR MERIS, MODISA, PARASOL 
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION RAYLEIGH_CALIBRATION, SITE_NAME, SENSOR, PROC_VERSION,$
			       YEAR, CLOUD_PERCENTAGE, ROI_PERCENTAGE, WS_MAX, CHL, THRESH_RHORC_865, AER, CLIM=CLIM, VERBOSE=VERBOSE

  COMMON RTM_LUT

  DEBUG_MODE = 0      ; SET TO 1 IF WANT TO DEBUG THIS PROCEDURE
  
  METHOD = 'RAYLEIGH_ARG'

  STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
  STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')
  STATUS_NODATA = GET_DIMITRI_LOCATION('STATUS_NODATA')

  INPUT_FOLDER  = GET_DIMITRI_LOCATION('INGESTION_OUTPUT')
  OUTPUT_FOLDER = GET_DIMITRI_LOCATION('OUTPUT')
  MISSING_VALUE_FLT = FLOAT(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))

	;-----------------------------------------
	; DEFINE CURRENT FUNCTION NAME
	; AND SOME NUMERICAL CONSTANTS

  FCT_NAME         = 'RAYLEIGH_CALIBRATION'
  TOL              = 0.000001 ; TOLERANCE FOR FLOAT COMPARISON
  REF_WIND         = 5.
  REF_O3           = 300.0
  REF_P            = 1013.25
 
	;-----------------------------------------
	; CHECK SITE TYPE

  SITE_TYPE = GET_SITE_TYPE(SITE_NAME,VERBOSE=VERBOSE)
  IF STRUPCASE(SITE_TYPE) NE 'OCEAN' THEN BEGIN
     PRINT,FCT_NAME+': ERROR, INPUT SITE IS NOT EXISTING OR NOT OCEANIC'
     RETURN, STATUS_ERROR
  ENDIF

  ;----------------------
  ; GET BAND INFO STRUCTURE (NB_BANDS, BAND_ID, BAND_LABEL_STD, BAND_WAVELENGTH)
  
  CUR_SENSOR_BAND_INFOS = GET_SENSOR_BAND_INFO(SENSOR)
  NB_BANDS_SENSOR  = CUR_SENSOR_BAND_INFOS.NB_BAND
  NB_DIRECTIONS = SENSOR_DIRECTION_INFO(SENSOR)
  NB_DIRECTIONS = NB_DIRECTIONS[0]

  SENSOR_CONFIG = GET_SENSOR_BAND_CONFIG(SENSOR) ; GET USED CHANNELS / STD LABELS / SMAC FILENAME / LUT FILENAME

	;----------------------------------------
	; SEARCH FOR 865 NM BAND INDEX (NIR) AND WAVEL.
 
  IF SENSOR EQ 'MODISA' THEN TEMP_SENSOR = 'MODISA_O' ELSE TEMP_SENSOR = SENSOR
  B865 = GET_SENSOR_BAND_INDEX(TEMP_SENSOR,18,VERBOSE=VERBOSE)
  IF SENSOR EQ 'VEGETATION' THEN B865 = GET_SENSOR_BAND_INDEX(TEMP_SENSOR,16,VERBOSE=VERBOSE)

  IF B865 LT 0 THEN BEGIN
    PRINT, FCT_NAME+': ERROR, NO 865 NM BAND FOUND FOR CHOSEN SENSOR'
    RETURN, STATUS_ERROR
  ENDIF

  WAV865 = FLOAT(GET_SENSOR_BAND_NAME(SENSOR,B865))

	;----------------------------------------
	; SEARCH FOR ALL WAV + VIS BAND <=670 NM 
 
  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': SEARCH FOR ALL WAV + VIS BANDS <=670 NM'
  NB_BANDS = (SENSOR_BAND_INFO(SENSOR,VERBOSE=VERBOSE))[0]
  WAV_ALL = STRARR(NB_BANDS)
  FOR BK=0, NB_BANDS-1 DO WAV_ALL[BK]=GET_SENSOR_BAND_NAME(SENSOR,BK)

  FOR K = 1, 9 DO BEGIN
     BK = GET_SENSOR_BAND_INDEX(TEMP_SENSOR,K,VERBOSE=VERBOSE)
     IF BK LT 0 THEN CONTINUE ELSE BEGIN
       WAVK     = GET_SENSOR_BAND_NAME(SENSOR,BK)
       IF N_ELEMENTS(BAND_VIS) EQ 0 THEN BEGIN
         BAND_VIS = [BK]
         WAV_VIS  = [FLOAT(WAVK)]
       ENDIF ELSE BEGIN
         BAND_VIS = [BAND_VIS, BK]
         WAV_VIS  = [WAV_VIS, FLOAT(WAVK)]
       ENDELSE
     ENDELSE
  ENDFOR
  NB_BANDS_VIS=N_ELEMENTS(BAND_VIS)

  IF NB_BANDS_VIS EQ 0 THEN BEGIN
    PRINT, FCT_NAME+': ERROR, NO VISIBLE BAND <= 670 NM'
    RETURN, STATUS_ERROR
  ENDIF
  
  IF DEBUG_MODE EQ 1 THEN BEGIN
    PRINT, ' DEBUG_MODE - SENSOR       = ', SENSOR
    PRINT, ' DEBUG_MODE - NB_BANDS_VIS = ', NB_BANDS_VIS
    PRINT, ' DEBUG_MODE - BAND_VIS     = ', BAND_VIS
    PRINT, ' DEBUG_MODE - WAV_VIS      = ', WAV_VIS
    PRINT, ' DEBUG_MODE - B865     = ', B865
    PRINT, ' DEBUG_MODE - WAV865   = ', WAV865
  ENDIF

	;-----------------------------------------
	; CHECKS INPUT CRITERIA ARE OK

  CP_LIMIT = FLOAT(CLOUD_PERCENTAGE)*0.01
  RP_LIMIT = FLOAT(ROI_PERCENTAGE)*0.01
  IF CP_LIMIT GT  1.0 OR CP_LIMIT LT 0.0 OR $
     RP_LIMIT GT  1.0 OR RP_LIMIT LT 0.0 OR $
     WS_MAX   LT  0.0 OR                    $
     CHL      GT 30.0 OR CHL      LT 0.0 THEN BEGIN
    PRINT, FCT_NAME+': ERROR, CLOUD/ROI/WIND/CHL CRITERIA OUT OF RANGE'
    RETURN, STATUS_ERROR
  ENDIF
  
  YEAR = STRTRIM(YEAR,2)

	;-----------------------------------------
	; DEFINE INPUT/OUTPUT FILES

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': DEFINING INPUT/OUTPUT FILES'
  SITE_FILE     = GET_DIMITRI_LOCATION('SITE_DATA')
  DB_FILE       = GET_DIMITRI_LOCATION('DATABASE')
  DL            = GET_DIMITRI_LOCATION('DL')
  MAIN_DIRC     = GET_DIMITRI_LOCATION('DIMITRI')
  RTM_DIR       = FILEPATH(SENSOR, ROOT_DIR=GET_DIMITRI_LOCATION('RTM'))
  MARINE_DIR    = GET_DIMITRI_LOCATION('MARINE')

  VIC_LOG         = STRING(OUTPUT_FOLDER+DL+'RAYLEIGH_CAL_LOG.txt')

	;-----------------------------------------
	; CHECK DIMITRI DATABASE EXISTS

  TEMP = FILE_INFO(DB_FILE)
  IF TEMP.EXISTS EQ 0 THEN BEGIN
    PRINT, FCT_NAME+': ERROR, DIMITRI DATABASE FILE DOES NOT EXIST'
    RETURN, STATUS_ERROR
  ENDIF

	;-----------------------------------------
	; RECORD THIS PROCESSING REQUEST IN A LOG

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+": WRITTING LOG FILE"
  TMP_DATE = SYSTIME()
  TMP_DATE = STRING(STRMID(TMP_DATE,8,2)+'-'+STRMID(TMP_DATE,4,3)+'-'+STRMID(TMP_DATE,20,4)+' '+STRMID(TMP_DATE,11,8))
  TEMP = FILE_INFO(VIC_LOG)
  IF TEMP.EXISTS EQ 0 THEN BEGIN
    OPENW, LUNLOG,VIC_LOG,/GET_LUN
    PRINTF,LUNLOG,'DATE;REGION;SENSOR;PROC_VER;YEAR;CLOUD_PERCENTAGE;ROI_PERCENTAGE;WS_MAX;CLIM;CHL;THRESH_RHORC_865;AER;PIX'
  ENDIF ELSE OPENW,LUNLOG,VIC_LOG,/GET_LUN,/APPEND

  PRINTF,LUNLOG,FORMAT='(5(A,1H;),3(F6.3,1H;),(B,1H;),2(F6.3,1H;),(A,1H;),B)',$
  TMP_DATE,SITE_NAME,SENSOR,PROC_VERSION,YEAR,CP_LIMIT,RP_LIMIT,WS_MAX,STRTRIM(KEYWORD_SET(CLIM),2),CHL,THRESH_RHORC_865,AER,STRTRIM(KEYWORD_SET(PIX),2)
  FREE_LUN,LUNLOG

	;-----------------------------------------
	; COMPUTE ROI AREA IN KM^2

  ICOORDS = GET_SITE_COORDINATES(SITE_NAME,SITE_FILE,VERBOSE=VERBOSE)

  IF ICOORDS[0] EQ -1 THEN BEGIN
    PRINT,FCT_NAME+': ERROR, REGION COORDINATES NOT FOUND'
    RETURN, STATUS_ERROR
  ENDIF

  ROI_X     = GREAT_CIRCLE_DISTANCE(ICOORDS[0],ICOORDS[2],ICOORDS[0],ICOORDS[3],/DEGREES,VERBOSE=VERBOSE)
  ROI_Y     = GREAT_CIRCLE_DISTANCE(ICOORDS[0],ICOORDS[2],ICOORDS[1],ICOORDS[2],/DEGREES,VERBOSE=VERBOSE)
  ROI_AREA  = FLOAT(ROI_X)*FLOAT(ROI_Y)
  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': COMPUTED ROI AREA = ',ROI_AREA

	;-----------------------------------------
	; GET PIXEL AREA RESOLUTIONS OF SENSOR

  SPX_AREA = (SENSOR_PIXEL_SIZE(SENSOR,/AREA,VERBOSE=VERBOSE))[0]

	;-----------------------------------------
	; DEFINE ROI PIX THRESHOLD

  PX_THRESH  = FLOOR(DOUBLE(RP_LIMIT*ROI_AREA)/DOUBLE(SPX_AREA))
  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': COMPUTED PX_THRESHOLDS = ',PX_THRESH

	;-----------------------------------------
	; ROICOVERAGE CHECK

  IF RP_LIMIT GE 1.0 THEN BEGIN
    ROICOVER = 1
    PX_THRESH = 1
  ENDIF ELSE ROICOVER = 0

	;----------------------------------------
	; READ THE DIMITRI DATABASE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': READING DIMITRI DATABASE'
  DB_TEMPLATE = GET_DIMITRI_TEMPLATE(1,/TEMPLATE)
  DB_DATA     = READ_ASCII(DB_FILE,TEMPLATE=DB_TEMPLATE)

	;----------------------------------------
	; SELECT DATA UPON ROI, CLOUD AND YEAR CRITERIA

  IF YEAR EQ 'ALL' THEN CYEAR  = '*' ELSE CYEAR = YEAR

  IDX_FILES = WHERE(STRCMP(DB_DATA.SITE_NAME,SITE_NAME)               EQ 1 AND $
              STRCMP(DB_DATA.SENSOR,SENSOR)               EQ 1 AND $
              STRCMP(DB_DATA.PROCESSING_VERSION,PROC_VERSION) EQ 1 AND $
              STRMATCH(STRTRIM(DB_DATA.YEAR,2),CYEAR)              AND $
              DB_DATA.ROI_STATUS  GE ROICOVER                      AND $
              DB_DATA.ROI_PIX_NUM GE PX_THRESH                      AND $
              (DB_DATA.MANUAL_CS EQ 0. OR (DB_DATA.MANUAL_CS LT 1. AND DB_DATA.AUTO_CS_1_MEAN GT -1.0 AND DB_DATA.AUTO_CS_1_MEAN LE CP_LIMIT + TOL)), NB_FILES)

  IF NB_FILES EQ 0 THEN BEGIN
    PRINT, FCT_NAME+': WARNING, NO SENSOR DATA FOUND WITHIN PIXEL THRESHOLD OR CLOUD CONDITION, RETURN'
    RETURN, STATUS_NODATA
  ENDIF

  ;----------------------
  ; GET INGESTION OUTPUT FILENAME FROM DATABASE
  
  SEARCH_FOLDER = INPUT_FOLDER + DL + 'Site_' + SITE_NAME + DL + SENSOR + DL + 'Proc_' + PROC_VERSION + DL
  I_FILES = SEARCH_FOLDER + DL + STRTRIM(STRING(DB_DATA.YEAR[IDX_FILES]),2) + DL + DB_DATA.L1_INGESTED_FILENAME[IDX_FILES]
  FILE_RESULT = FILE_SEARCH(I_FILES, COUNT=NB_FILES_SEARCH)
  
  IF NB_FILES_SEARCH NE NB_FILES THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ': THE NUMBER OF INGESTION PRODUCTS ON DISK (', NB_FILES_SEARCH, $
                                                    ') DOES NOT MATCH THE NUMBER OF INGESTED PRODUCT IN THE DATABASE (', NB_FILES, ')'
    RETURN, STATUS_ERROR
  ENDIF

	;----------------------------------------
	; READ RTM LUT

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': READING RAYLEIGH REFLECTANCE LUT'
  STATUS = READ_RAYLEIGH(FILEPATH('RHOR_'+SENSOR+'.txt', ROOT_DIR=RTM_DIR))

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': READING XC LUT'
  STATUS = READ_XC(FILEPATH('XC_'+SENSOR+'_'+STRTRIM(AER,2)+'.txt', ROOT_DIR=RTM_DIR))
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': READING TAUA LUT'
  STATUS = READ_TAUA(FILEPATH('TAUA_'+SENSOR+'_'+STRTRIM(AER,2)+'.txt', ROOT_DIR=RTM_DIR))

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': READING TOTAL TRANSMITTANCE LUT'
  STATUS = READ_TRA(FILEPATH('TRA_DOWN_'+SENSOR+'_'+STRTRIM(AER,2)+'.txt', ROOT_DIR=RTM_DIR),$
            FILEPATH('TRA_UP_'  +SENSOR+'_'+STRTRIM(AER,2)+'.txt', ROOT_DIR=RTM_DIR))

	;----------------------------------------
	; READ CHL CLIMATOLOGY FILE

  IF KEYWORD_SET(CLIM) THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': READING CHLOROPHYLL CLIMATOLOGY'
    CHL_CLIM_F = FILEPATH('CHL_CLIM_'+SITE_NAME+'.txt', ROOT_DIR=MARINE_DIR)
    CHL_CLIM   = (READ_ASCII(CHL_CLIM_F)).(0)
  ENDIF

  CHL_VALUE = CHL
  
  ;----------------------
  ; GET OZONE CORRECTION

  TO3_865_REF = (GET_OZONE_TRANSMISSION(WAV865,VERBOSE=VERBOSE))[0]
  TGS         = (GET_GASEOUS_TRANSMISSION(WAV865,VERBOSE=VERBOSE))[0]
  TAUO3_865   = -0.5*ALOG((TO3_865_REF>0.000001)/TGS)

  TAUR_865 = TAUR_HT74(WAV865)
  
  IF DEBUG_MODE THEN BEGIN
    PRINT, ' DEBUG_MODE - TAUO3_865  = ', TAUO3_865
    PRINT, ' DEBUG_MODE - TAUR_865   = ', TAUR_865
  ENDIF  

  ;----------------------
  ; SET OUTPUT CALIB FOLDER
  
  CALDAT, SYSTIME(/UTC,/JULIAN),TMM,TDD,TYY,THR,TMN,TSS

  TYY = STRTRIM(STRING(TYY),2)
  TMM = TMM LT 10 ? '0'+STRTRIM(STRING(TMM),2) : STRTRIM(STRING(TMM),2)
  TDD = TDD LT 10 ? '0'+STRTRIM(STRING(TDD),2) : STRTRIM(STRING(TDD),2)
  THR = THR LT 10 ? '0'+STRTRIM(STRING(THR),2) : STRTRIM(STRING(THR),2)
  TMN = TMN LT 10 ? '0'+STRTRIM(STRING(TMN),2) : STRTRIM(STRING(TMN),2)
  TSS = TSS LT 10 ? '0'+STRTRIM(STRING(TSS,FORMAT='(I)'),2) : STRTRIM(STRING(TSS,FORMAT='(I)'),2)

  PROCESS_DATE = TYY+TMM+TDD+'-'+THR+TMN

  OUT_FILEPATH = OUTPUT_FOLDER + DL + METHOD + '_' + PROCESS_DATE + DL + 'Site_'+ SITE_NAME + DL + SENSOR + DL + 'Proc_' + PROC_VERSION + DL
  OUT_FILENAME_BASE =  SITE_NAME + '_' + SENSOR + '_' + PROC_VERSION + '_' + METHOD 
          
  ;----------------------
  ; LOOP OVER NCDF FILE IN PROCESSING DATASET

  FOR IDX_FILE=0, NB_FILES-1 DO BEGIN

    NCDF_FILENAME = FILE_RESULT[IDX_FILE]
    NCDF_INFOS = FILE_INFO(NCDF_FILENAME)
    
    IF NCDF_INFOS.EXISTS EQ 0 OR STRLEN(NCDF_FILENAME) EQ 0 THEN BEGIN
      IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME + ': FILE ',NCDF_FILENAME,' IS MISSING, PLEASE CHECK YOUR INGESTION PROGRESS'
      GOTO, NEXT_IFILES
    ENDIF

    CUR_NCFILE = FILE_BASENAME(NCDF_FILENAME)

    ;----------------------
    ; GET ACQUISITION DATE FROM NCDF FILE
    CUR_NCDF_DATE = STRTRIM(GET_NCDF_GLOBAL_ATT(NCDF_FILENAME, 'ACQUISITION_DATE'))
    NCDF_YEAR_STR=STRMID(CUR_NCDF_DATE,0,4)
    NCDF_MONTH_STR=STRMID(CUR_NCDF_DATE,5,2)
    NCDF_DAY_STR=STRMID(CUR_NCDF_DATE,8,2)
    NCDF_HOURS_STR=STRMID(CUR_NCDF_DATE,11,2)
    NCDF_MINUTES_STR=STRMID(CUR_NCDF_DATE,14,2)
    
    NCDF_YEAR=UINT(NCDF_YEAR_STR)
    NCDF_MONTH=UINT(NCDF_MONTH_STR)
    NCDF_DAY=UINT(NCDF_DAY_STR)
    NCDF_HOURS=UINT(NCDF_HOURS_STR)
    NCDF_MINUTES=UINT(NCDF_MINUTES_STR)
    
    ACQUI_DATE = JULDAY(NCDF_MONTH,NCDF_DAY,NCDF_YEAR,NCDF_HOURS,NCDF_MINUTES,0)
    
    IF KEYWORD_SET(VERBOSE) THEN BEGIN
      PRINT, '[' + STRTRIM(STRING(IDX_FILE+1),1) + '/' + STRTRIM(STRING(NB_FILES),1) + '] > ' + FCT_NAME + ' ' + CUR_NCFILE + ' :: ' + CUR_NCDF_DATE
    ENDIF

    ;----------------------
    ; READ INPUT INGESTION FILE
    
    STATUS = NETCDFREAD_INGEST_OUTPUT( NCDF_FILENAME, NCDF_INGEST_STRUCT=NCDF_INGEST_STRUCT, VERBOSE=VERBOSE)
    IF STATUS NE STATUS_OK THEN BEGIN
      IF KEYWORD_SET(VERBOSE) THEN BEGIN
        PRINT, FCT_NAME + ': ERROR DURING ', FILE_BASENAME(NCDF_FILENAME),' FILE READING >> FILE SKIPPED'
      ENDIF
      GOTO, NEXT_IFILES
    ENDIF  
        
		;----------------------------------------
		; ASSIGN STANDARD VALUE TO MISSING AUX DATA

		OZONE_ALL = NCDF_INGEST_STRUCT.VARIABLES.ERA_OZONE
		ID = WHERE(OZONE_ALL EQ MISSING_VALUE_FLT)
		IF ID[0] NE -1 THEN OZONE_ALL[ID]= REF_O3 / 1000.0
		OZONE_ALL = OZONE_ALL * 1000.0  

		PRESSURE_ALL = NCDF_INGEST_STRUCT.VARIABLES.ERA_PRESSURE
		ID = WHERE(PRESSURE_ALL EQ MISSING_VALUE_FLT)
		IF ID[0] NE -1 THEN PRESSURE_ALL[ID]=REF_P

		WIND_SPEED_ALL = NCDF_INGEST_STRUCT.VARIABLES.ERA_WIND_SPEED
		ID = WHERE(WIND_SPEED_ALL EQ MISSING_VALUE_FLT)  
		IF ID[0] NE -1 THEN WIND_SPEED_ALL[ID]=REF_WIND

		;==FOR VALIDATION ONLY =====================
;    PRINT, ' DEBUG_MODE - !!!!! WARNING !!!! METEO VALUE FORCED TO CSTE VALUES FOR VALIDATION PURPOSE !!!!!
;	  OZONE_ALL[*] = REF_O3
;	  PRESSURE_ALL[*] = REF_P
;	  WIND_SPEED_ALL[*]= REF_WIND
		;==========================================

		IF DEBUG_MODE THEN BEGIN
			PRINT, ' DEBUG_MODE - REF_O3 = ', REF_O3, ' / REF_P = ', REF_P, ' / REF_WIND = ', REF_WIND
			PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(OZONE_ALL)       = ', MIN(OZONE_ALL), MAX(OZONE_ALL), MEAN(OZONE_ALL), STDDEV(OZONE_ALL)
			PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(PRESSURE_ALL)    = ', MIN(PRESSURE_ALL), MAX(PRESSURE_ALL), MEAN(PRESSURE_ALL), STDDEV(PRESSURE_ALL)
			PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(WIND_SPEED_ALL)  = ', MIN(WIND_SPEED_ALL), MAX(WIND_SPEED_ALL), MEAN(WIND_SPEED_ALL), STDDEV(WIND_SPEED_ALL)
		ENDIF

    ;----------------------
    ; SELECT DATA UPON WIND AND CLOUD MASK CONDITION
    ; COMPUTE MAXIMAL COUNT PIXEL ACROSS DIRECTION FOR AN ESTIMATION OF VALID CALIBRATION PIXELS
    
    COUNT_PIX_MAX = 0
    FOR NUM_DIR=0, NB_DIRECTIONS-1 DO BEGIN
      INDX_PIX = WHERE(WIND_SPEED_ALL[*,NUM_DIR] LE WS_MAX AND NCDF_INGEST_STRUCT.VARIABLES.AUTO_CS_1_MASK[*,NUM_DIR] EQ 0, COUNT_PIX)
      COUNT_PIX_MAX = MAX( [ COUNT_PIX_MAX, COUNT_PIX ] )
    ENDFOR

    IF COUNT_PIX_MAX EQ 0 THEN BEGIN
      IF KEYWORD_SET(VERBOSE) THEN BEGIN
        PRINT, ' COUNT_PIX_MAX = ' + STRTRIM(STRING(COUNT_PIX_MAX),1) + ' >> FILE SKIPPED '
      ENDIF 
      GOTO, NEXT_IFILES
    ENDIF     
    
    IF DEBUG_MODE THEN BEGIN
      PRINT, ' DEBUG_MODE - COUNT_PIX_MAX (FOR EACH DIR) = ', COUNT_PIX_MAX
      
      IDX_ALL_DIR = WHERE(WIND_SPEED_ALL[*,*] LE WS_MAX AND NCDF_INGEST_STRUCT.VARIABLES.AUTO_CS_1_MASK[*,*] EQ 0, COUNT_ALL_DIR)
      PRINT, ' DEBUG_MODE - COUNT_PIX_MAX (ALL DIR) = ', COUNT_ALL_DIR
    ENDIF

    ;----------------------
    ; GET NCDF STRUCTURE FOR CALIBRATION OUTPUT
    
    CALIB_PIXEL_NUMBER = COUNT_PIX_MAX
    
    NCDF_CALIB_STRUCT = GET_NCDF_CALIB_STRUCT(CALIB_PIXEL_NUMBER, NCDF_INGEST_STRUCT.DIMENSIONS.ROI_PIXEL_NUMBER, NB_DIRECTIONS, NB_BANDS_VIS, VERBOSE=VERBOSE)
    NCDF_CALIB_STRUCT.GLOBAL_ATT.CALIBRATION_METHOD = METHOD
    NCDF_CALIB_STRUCT.VARIABLES.REFL_BAND_IDS = BAND_VIS
    
    ;----------------------
    ; COPY COMMON INFOS FROM INGESTION NCDF TO CALIBRATION NCDF
    STATUS = COPY_INGESTION_TO_CALIBRATION_NCDF_STRUCTURE(NCDF_INGEST_STRUCT=NCDF_INGEST_STRUCT, NCDF_CALIB_STRUCT=NCDF_CALIB_STRUCT, VERBOSE=VERBOSE)
    IF STATUS NE STATUS_OK THEN RETURN, STATUS
    
    ;----------------------
    ; LOOP OVER VIEWING DIRECTION
    
    AT_LEAST_ONE_DIR = 0
    
    FOR NUM_DIR=0, NB_DIRECTIONS-1 DO BEGIN
                  
      IF NUM_DIR+1 LT 10 THEN DIR_ID = 'DIR0' + STRTRIM(STRING(NUM_DIR+1),2) $
                         ELSE DIR_ID = 'DIR' + STRTRIM(STRING(NUM_DIR+1),2)
                          
      IF KEYWORD_SET(VERBOSE) THEN BEGIN
        PRINT, FCT_NAME + ': ----- PROCESS DIRECTION [' + DIR_ID + '/' + STRTRIM(STRING(NB_DIRECTIONS),1) + ']'
      ENDIF

      IF NCDF_INGEST_STRUCT.VARIABLES.ROI_STATUS[NUM_DIR] EQ 0 THEN BEGIN
        IF KEYWORD_SET(VERBOSE) THEN BEGIN
          PRINT, FCT_NAME + ': ROI STATUS WITH 0 VALUE >> DIRECTION SKIPPED'
        ENDIF
        GOTO, NEXT_DIR
      ENDIF

			;----------------------
			; SELECT DATA UPON WIND AND CLOUD MASK CONDITION
    
      INDX_PIX = WHERE(WIND_SPEED_ALL[*,NUM_DIR] LE WS_MAX AND NCDF_INGEST_STRUCT.VARIABLES.AUTO_CS_1_MASK[*,NUM_DIR] EQ 0, NB_PIX)
      
      IF NB_PIX EQ 0 THEN BEGIN
        IF KEYWORD_SET(VERBOSE) THEN BEGIN
          PRINT, ' NB_VALID_PIX = ' + STRTRIM(STRING(NB_PIX),1) + ' : DIRECTION SKIPPED'
        ENDIF 
        GOTO, NEXT_DIR
      ENDIF 
    
      IF DEBUG_MODE THEN PRINT, ' DEBUG_MODE - NB_PIX = ', NB_PIX

			;----------------------------------------
			; DEFINE ANGLES AND LIMIT INPUT DATA TO VALID PIXELS

			VZA = REFORM(NCDF_INGEST_STRUCT.VARIABLES.VZA[INDX_PIX,NUM_DIR])
			SZA = REFORM(NCDF_INGEST_STRUCT.VARIABLES.SZA[INDX_PIX,NUM_DIR])
			RAA = ACOS(COS(REFORM(NCDF_INGEST_STRUCT.VARIABLES.VAA[INDX_PIX,NUM_DIR]-NCDF_INGEST_STRUCT.VARIABLES.SAA[INDX_PIX,NUM_DIR])*!DTOR))*!RADEG

			OZONE = OZONE_ALL[INDX_PIX,NUM_DIR]
			PRESSURE = PRESSURE_ALL[INDX_PIX,NUM_DIR]
			WIND_SPEED = WIND_SPEED_ALL[INDX_PIX,NUM_DIR]

			;----------------------------------------
			; CORRECT SIGNAL FOR OZONE AT 865 NM

      RTOA_NIR_OBS = REFORM(NCDF_INGEST_STRUCT.VARIABLES.REFL_BAND[INDX_PIX,NUM_DIR, B865])

			AIR_MASS = REFORM(1./COS(SZA*!DTOR)+1./COS(VZA*!DTOR))

			TO3_865     = EXP(-TAUO3_865*(OZONE/REF_O3)*AIR_MASS)

			MI_865_OZ   = RTOA_NIR_OBS/TO3_865
 
			;----------------------------------------
			; COMPUTE RAYLEIGH AT 865 NM

			RHOR_865 = COMPUTE_RAYLEIGH(WIND_SPEED, RAA, VZA, SZA, B865, /COS) 
  
			;----------------------------------------
			; CORRECT MI_865_OZ FOR PRESSURE BY ITERATING ON TAUA_865

			TAUA_865=0.05
			FOR ITAU=0, 3 DO BEGIN
				MI_865_OZ_PSTD = MI_865_OZ*(1 - TAUR_865/(TAUR_865+TAUA_865)*(PRESSURE/REF_P-1.))
				TAUA_865  = INVERSE_XC(WIND_SPEED, RAA, VZA, SZA, MI_865_OZ_PSTD/RHOR_865, B865, /COS)
			ENDFOR

			;----------------------------------------
			; SELECT DATA UPON RHORC_865 CRITERIA
			; AND TAU AT 865 NM

			RHORC_865 = MI_865_OZ - RHOR_865

			ID = WHERE(RHORC_865*cos(SZA*!DTOR) LE THRESH_RHORC_865 AND RHORC_865 GT 0. AND TAUA_865 GE 0., COUNT)
			IF COUNT LT 5 THEN BEGIN
				PRINT, FCT_NAME+': WARNING, NO SENSOR DATA FOUND WITH LOW SIGNAL AT 865 NM (LESS THAN 5 PIXELS) >> DIRECTION SKIPPED'
				GOTO, NEXT_DIR
			ENDIF

			IF DEBUG_MODE THEN BEGIN
				help, RTOA_NIR_OBS
				PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(RTOA_NIR_OBS)    = ', MIN(RTOA_NIR_OBS), MAX(RTOA_NIR_OBS), MEAN(RTOA_NIR_OBS), STDDEV(RTOA_NIR_OBS)
				PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(AIR_MASS)        = ', MIN(AIR_MASS), MAX(AIR_MASS), MEAN(AIR_MASS), STDDEV(AIR_MASS)
				PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(TO3_865)         = ', MIN(TO3_865), MAX(TO3_865), MEAN(TO3_865), STDDEV(TO3_865)
				PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(MI_865_OZ)       = ', MIN(MI_865_OZ), MAX(MI_865_OZ), MEAN(MI_865_OZ), STDDEV(MI_865_OZ)
				PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(RHOR_865)        = ', MIN(RHOR_865), MAX(RHOR_865), MEAN(RHOR_865), STDDEV(RHOR_865)
				PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(TAUA_865)        = ', MIN(TAUA_865), MAX(TAUA_865), MEAN(TAUA_865), STDDEV(TAUA_865)
				PRINT, ' DEBUG_MODE - COUNT RHORC THRESHOLD (for one dir!) = ', COUNT
				
				; COMPARE WITH ALL DIR TOGETHER (OLD ARGANS DESERT METHODOLOGY)				
        VZA_ALL_DIR = REFORM(NCDF_INGEST_STRUCT.VARIABLES.VZA[IDX_ALL_DIR])
        SZA_ALL_DIR = REFORM(NCDF_INGEST_STRUCT.VARIABLES.SZA[IDX_ALL_DIR])
        RAA_ALL_DIR = ACOS(COS(REFORM(NCDF_INGEST_STRUCT.VARIABLES.VAA[IDX_ALL_DIR]-NCDF_INGEST_STRUCT.VARIABLES.SAA[IDX_ALL_DIR])*!DTOR))*!RADEG
				
        RTOA_NIR_OBS_ALL_DIR = REFORM(NCDF_INGEST_STRUCT.VARIABLES.REFL_BAND[*,*, B865])  
        RTOA_NIR_OBS_ALL_DIR = RTOA_NIR_OBS_ALL_DIR[IDX_ALL_DIR]
        AIR_MASS_ALL_DIR = REFORM(1./COS(SZA_ALL_DIR*!DTOR)+1./COS(VZA_ALL_DIR*!DTOR))  
        TO3_865_ALL_DIR     = EXP(-TAUO3_865*(OZONE_ALL[IDX_ALL_DIR]/REF_O3)*AIR_MASS_ALL_DIR)  
        MI_865_OZ_ALL_DIR   = RTOA_NIR_OBS_ALL_DIR/TO3_865_ALL_DIR
   
        RHOR_865_ALL_DIR = COMPUTE_RAYLEIGH(WIND_SPEED_ALL[IDX_ALL_DIR], RAA_ALL_DIR, VZA_ALL_DIR, SZA_ALL_DIR, B865, /COS) 
    
        TAUA_865_ALL_DIR=0.05
        FOR ITAU=0, 3 DO BEGIN
          MI_865_OZ_PSTD_ALL_DIR = MI_865_OZ_ALL_DIR*(1 - TAUR_865/(TAUR_865+TAUA_865)*(PRESSURE_ALL[IDX_ALL_DIR]/REF_P-1.))
          TAUA_865_ALL_DIR  = INVERSE_XC(WIND_SPEED_ALL[IDX_ALL_DIR], RAA_ALL_DIR, VZA_ALL_DIR, SZA_ALL_DIR, MI_865_OZ_PSTD_ALL_DIR/RHOR_865_ALL_DIR, B865, /COS)
        ENDFOR
  
        RHORC_865_ALL_DIR = MI_865_OZ_ALL_DIR - RHOR_865_ALL_DIR
  				
        ID_ALL_DIR = WHERE(RHORC_865_ALL_DIR*cos(SZA_ALL_DIR*!DTOR) LE THRESH_RHORC_865 AND RHORC_865_ALL_DIR GT 0. AND TAUA_865 GE 0., COUNT_ALL_DIR)
				
        PRINT, ' DEBUG_MODE - STATS FOR VARIABLES ACROSS ALL DIR :'
        PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(RTOA_NIR_OBS_ALL_DIR)    = ', MIN(RTOA_NIR_OBS_ALL_DIR), MAX(RTOA_NIR_OBS_ALL_DIR), MEAN(RTOA_NIR_OBS_ALL_DIR), STDDEV(RTOA_NIR_OBS_ALL_DIR)
        PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(AIR_MASS_ALL_DIR)        = ', MIN(AIR_MASS_ALL_DIR), MAX(AIR_MASS_ALL_DIR), MEAN(AIR_MASS_ALL_DIR), STDDEV(AIR_MASS_ALL_DIR)
        PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(TO3_865_ALL_DIR)         = ', MIN(TO3_865_ALL_DIR), MAX(TO3_865_ALL_DIR), MEAN(TO3_865_ALL_DIR), STDDEV(TO3_865_ALL_DIR)
        PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(MI_865_OZ_ALL_DIR)       = ', MIN(MI_865_OZ_ALL_DIR), MAX(MI_865_OZ_ALL_DIR), MEAN(MI_865_OZ_ALL_DIR), STDDEV(MI_865_OZ_ALL_DIR)
        PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(RHOR_865_ALL_DIR)        = ', MIN(RHOR_865_ALL_DIR), MAX(RHOR_865_ALL_DIR), MEAN(RHOR_865_ALL_DIR), STDDEV(RHOR_865_ALL_DIR)
        PRINT, ' DEBUG_MODE - COUNT RHORC THRESHOLD (for ALL DIR!) = ', COUNT_ALL_DIR
				
			ENDIF
  
			;----------------------------------------
			; UPDATE ARRAYS ACCORDING TO RHORC TEST

			IDX_VALID_PIX = INDX_PIX[ID]

			OZONE      = OZONE[ID]
			PRESSURE   = PRESSURE[ID]
			WIND_SPEED = WIND_SPEED[ID]
			VZA        = VZA[ID]
			SZA        = SZA[ID]
			RAA        = RAA[ID]
			AIR_MASS   = AIR_MASS[ID]
			RHOR_865   = RHOR_865[ID]
			TAUA_865   = TAUA_865[ID]

      IF DEBUG_MODE THEN BEGIN
        PRINT, ' DEBUG_MODE - VALUES AFTER FILTER ON RHORC THRESHOLD: '
        PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(AIR_MASS)        = ', MIN(AIR_MASS), MAX(AIR_MASS), MEAN(AIR_MASS), STDDEV(AIR_MASS)
        PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(RHOR_865)        = ', MIN(RHOR_865), MAX(RHOR_865), MEAN(RHOR_865), STDDEV(RHOR_865)
        PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(TAUA_865)        = ', MIN(TAUA_865), MAX(TAUA_865), MEAN(TAUA_865), STDDEV(TAUA_865)
      ENDIF

			;----------------------------------------
			; ASSIGN CHL VALUES

			IF KEYWORD_SET(CLIM) THEN CHL = MAKE_ARRAY(N_ELEMENTS(ID),/DOUBLE,VALUE=CHL_CLIM[NCDF_MONTH-1]) $
													 ELSE CHL = MAKE_ARRAY(N_ELEMENTS(ID),/DOUBLE,VALUE=CHL_VALUE)

      ;-------------------
      ; COMPLETE NCDF CALIBRATION STRUCTURE
      
      NB_PIX = N_ELEMENTS(IDX_VALID_PIX)
      NCDF_CALIB_STRUCT.VARIABLES.CALIB_PIXEL_NUMBER(NUM_DIR) = NB_PIX
      NCDF_CALIB_STRUCT.VARIABLES.CALIB_VALID_INDEX(0:NB_PIX-1,NUM_DIR) = IDX_VALID_PIX
      
      NCDF_CALIB_STRUCT.VARIABLES.AEROSOL_OT_ESTIM(0:NB_PIX-1,NUM_DIR)   = TAUA_865

			;----------------------------------------
			; LOOP ON VIS BAND <=670 NM 
 
			IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': STARTING LOOP OVER BANDS <=670 NM'
			FOR K=0, NB_BANDS_VIS-1 DO BEGIN

				BK   = BAND_VIS[K]
				WAVK = WAV_VIS[K] 

				WAVELENGTH = STRTRIM(STRING(SENSOR_CONFIG.BAND_WAVELENGTH[BK]),2)

				IF KEYWORD_SET(VERBOSE) THEN PRINT, SENSOR + ' :: ID : ' + STRTRIM(STRING(SENSOR_CONFIG.BAND_ID[BK]),1) + $
																						', LABEL_STD : ' + SENSOR_CONFIG.BAND_LABEL_STD[BK] + $
																						', REF_LABEL : ' + SENSOR_CONFIG.BAND_REF_LABEL[BK] + $
																						', WAVELENGTH : ' + WAVELENGTH + $
																						', WAVK : ', WAVK

				RTOA_OBS = REFORM(NCDF_INGEST_STRUCT.VARIABLES.REFL_BAND[IDX_VALID_PIX,NUM_DIR, BK])

				;----------------------------------------
				; CORRECT SIGNAL FOR OZONE
 
				TO3_K_REF = (GET_OZONE_TRANSMISSION(WAVK,VERBOSE=VERBOSE))[0]
				TGS       = (GET_GASEOUS_TRANSMISSION(WAVK,VERBOSE=VERBOSE))[0]
				TAUO3_K   = -0.5*ALOG((TO3_K_REF>0.000001)/TGS)

				TO3_K     = EXP(-TAUO3_K*(OZONE/REF_O3)*AIR_MASS)

				MI_K_OZ   = RTOA_OBS/TO3_K

				;----------------------------------------
				; COMPUTE RAYLEIGH OPTICAL THICKNESS AND REFLECTANCE
  
				TAUR_K = TAUR_HT74(WAVK)
				RHOR_K = COMPUTE_RAYLEIGH(WIND_SPEED, RAA, VZA, SZA, BK, /COS) 
   
				;----------------------------------------
				; PROPAGATE TAU AT BAND BK

				TAUA_K = SPECTRAL_DEP(TAUA_865, B865, BK)

				;----------------------------------------
				; COMPUTE RHOPATH AT BAND BK AND CORRECT FOR PRESSURE

				XC_K      = COMPUTE_XC(WIND_SPEED, RAA, VZA, SZA, TAUA_K, BK, /COS)
				RHOPATH_K = RHOR_K*XC_K
				RHOPATH_K = RHOPATH_K*(1.+TAUR_K/(TAUR_K+TAUA_K)*(PRESSURE/REF_P-1.))

				;----------------------------------------
				; COMPUTE TOTAL TRANSMITTANCE AND CORRECT FOR PRESSURE

				TRANS_K = COMPUTE_TRA(WIND_SPEED, VZA, SZA, TAUA_K, BK, /COS)
				TRANS_K = TRANS_K*EXP(-0.5*TAUR_K*AIR_MASS*(PRESSURE/REF_P-1.))

				;----------------------------------------
				; COMPUTE MARINE SIGNAL WRT CHLOROPHYLL

				R0_K   = R0_MM01(WAVK, CHL, SZA)
				RHOW_K = 0.5287*R0_K ; rhow =PI*Rgoth/Q*R(0-), Q=PI

				;----------------------------------------
				; COMPUTE TOTAL TOA SIGNAL
				I_K     =  RHOPATH_K + TRANS_K*RHOW_K

				;----------------------------------------
				; COMPUTE VICARIOUS COEFFICIENTS
				; FOLLOWING HAGOLLE ET AL 1999 

				RTOA_TG_RATIO       = MI_K_OZ
				RTOA_TG_RATIO_ESTIM = I_K 
				REF_TO_SIM_RATIO    = RTOA_TG_RATIO / RTOA_TG_RATIO_ESTIM

     ; VIC_COEF[NUM_NON_REF+BK,*] = MI_K_OZ/I_K

				;----------------------------------------
				; COMPUTE UNCERTAINTY
				; 4% MAX ACCORDING TO HAGOLLE ET AL 1999

				BAND_RHO_SIM_UNCERT = 0.04 * REF_TO_SIM_RATIO
     
        INDX_NAN = WHERE(RTOA_OBS EQ MISSING_VALUE_FLT, COUNT_MISSING_VALUE, NCOMPLEMENT=COUNT_VALID, COMPLEMENT=IDX_VALID)
        IF COUNT_MISSING_VALUE GT 0 THEN BEGIN
          PRINT, FCT_NAME + ': WARNING, INVALID VALUE FOR BAND ', SENSOR_CONFIG.BAND_REF_LABEL[BK], ' : COUNT_MISSING_VALUE = ', COUNT_MISSING_VALUE, ' / COUNT_VALID = ',COUNT_VALID 
          PRINT, FCT_NAME + ': !!!!!!! WARNING, THIS ASPECT IS NOT TAKEN INTO ACCOUNT FOR ARG CALIB !!!!!!
        ENDIF 
     
        IF DEBUG_MODE THEN BEGIN
          PRINT, ' ------ BAND ID --- BK = ', BK, ' / WAVK = ', WAVK, ' / REFL_BAND_IDS = ', NCDF_CALIB_STRUCT.VARIABLES.REFL_BAND_IDS[K], ' / BAND_REF_LABEL = ', SENSOR_CONFIG.BAND_REF_LABEL[BK]
          
          help, RTOA_OBS
          PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(RTOA_OBS)        = ', MIN(RTOA_OBS), MAX(RTOA_OBS), MEAN(RTOA_OBS), STDDEV(RTOA_OBS)
          PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(TO3_K)           = ', MIN(TO3_K), MAX(TO3_K), MEAN(TO3_K), STDDEV(TO3_K)
          PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(MI_K_OZ)         = ', MIN(MI_K_OZ), MAX(MI_K_OZ), MEAN(MI_K_OZ), STDDEV(MI_K_OZ)
          PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(RHOR_K)          = ', MIN(RHOR_K), MAX(RHOR_K), MEAN(RHOR_K), STDDEV(RHOR_K)
          PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(TAUA_K)          = ', MIN(TAUA_K), MAX(TAUA_K), MEAN(TAUA_K), STDDEV(TAUA_K)
          PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(RHOPATH_K)       = ', MIN(RHOPATH_K), MAX(RHOPATH_K), MEAN(RHOPATH_K), STDDEV(RHOPATH_K)
          PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(TRANS_K)         = ', MIN(TRANS_K), MAX(TRANS_K), MEAN(TRANS_K), STDDEV(TRANS_K)
          PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(RHOW_K)          = ', MIN(RHOW_K), MAX(RHOW_K), MEAN(RHOW_K), STDDEV(RHOW_K)
          PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(I_K)             = ', MIN(I_K), MAX(I_K), MEAN(I_K), STDDEV(I_K)
          PRINT, ' DEBUG_MODE - MIN/MAX/MEAN/STDDEV(MI_K_OZ/I_K)     = ', MIN(REF_TO_SIM_RATIO), MAX(REF_TO_SIM_RATIO), MEAN(REF_TO_SIM_RATIO), STDDEV(REF_TO_SIM_RATIO)
          PRINT, ' ------ '
        ENDIF
        
        IF NB_DIRECTIONS GT 1 THEN BEGIN
          OUT_FIG_FILENAME = OUT_FILEPATH + NCDF_YEAR_STR + DL + OUT_FILENAME_BASE + '_' + NCDF_YEAR_STR + NCDF_MONTH_STR + NCDF_DAY_STR $
                                        + '_' + NCDF_HOURS_STR + NCDF_MINUTES_STR $
                                        + '_' + DIR_ID $
                                        + '_' + SENSOR_CONFIG.BAND_REF_LABEL[BK] $
                                        + '_' + STRTRIM(STRING(LONG(WAVK)),2) $
                                        + '.jpg'
        ENDIF ELSE BEGIN
          OUT_FIG_FILENAME = OUT_FILEPATH + NCDF_YEAR_STR + DL + OUT_FILENAME_BASE + '_' + NCDF_YEAR_STR + NCDF_MONTH_STR + NCDF_DAY_STR $
                                        + '_' + NCDF_HOURS_STR + NCDF_MINUTES_STR $
                                        + '_' + SENSOR_CONFIG.BAND_REF_LABEL[BK] $
                                        + '_' + STRTRIM(STRING(LONG(WAVK)),2) $
                                        + '.jpg'
        ENDELSE                                
        RES = GET_SENSOR_TO_SIMULATION_PRODUCT_PLOTS(OUT_FIG_FILENAME, RTOA_TG_RATIO, RTOA_TG_RATIO_ESTIM, REF_TO_SIM_RATIO)

        ;-------------------
        ; COMPLETE NCDF CALIBRATION STRUCTURE
        
        NB_PIX = NCDF_CALIB_STRUCT.VARIABLES.CALIB_PIXEL_NUMBER(NUM_DIR)
        NCDF_CALIB_STRUCT.VARIABLES.BAND_GAZ_TRANS(0:NB_PIX-1,NUM_DIR,K)        = TO3_K
        NCDF_CALIB_STRUCT.VARIABLES.BAND_RHO_SIM(0:NB_PIX-1,NUM_DIR,K)          = I_K
        NCDF_CALIB_STRUCT.VARIABLES.BAND_RHO_SIM_UNCERT(0:NB_PIX-1,NUM_DIR,K)   = BAND_RHO_SIM_UNCERT
        NCDF_CALIB_STRUCT.VARIABLES.BAND_REF_TO_SIM_RATIO(0:NB_PIX-1,NUM_DIR,K) = REF_TO_SIM_RATIO
        NCDF_CALIB_STRUCT.VARIABLES.BAND_VALID_INDEX(0:NB_PIX-1,NUM_DIR,K) = INDGEN(NB_PIX)
         
      ENDFOR  ; END LOOP ON BANDS
      
      AT_LEAST_ONE_DIR = 1
      
      NEXT_DIR:
      
    ENDFOR ; END LOOP ON VIEWING DIRECTIONS

    ; CHECK IF AT LEAST ONE DIRECTION HAS BEEN PROCESSED 
    IF AT_LEAST_ONE_DIR EQ 1 THEN BEGIN
      
      ;----------------------
      ; WRITE CALIBRATION OUTPUT
      
      STATUS = NETCDFWRITE_CALIB_OUTPUT(PROCESS_DATE, NCDF_CALIB_STRUCT, NCDF_FILENAME=NCDF_FILENAME, VERBOSE=VERBOSE)
      IF STATUS NE STATUS_OK THEN BEGIN
        IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ': ERROR DURING OUTPUT CALIBRATION WRITING >> RETURNING'    
        RETURN, STATUS_ERROR
      ENDIF
      
    ENDIF ELSE IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ': NO DIRECTION WITH VALID PIXEL >> FILE SKIPPED'

    NEXT_IFILES:

  ENDFOR ;  END LOOP ON FILES

  NO_IFILES:

  PRINT, FCT_NAME + ': ***** PROCESS COMPLETED SUCCESSFULLY *****'
  RETURN, STATUS_OK

END
