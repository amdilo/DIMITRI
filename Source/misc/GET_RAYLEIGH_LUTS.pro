;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      GET_RAYLEIGH_LUTS
;*
;* PURPOSE:
;*      RETURNS THE LUT VALUES ACCORDING SENSOR NAME AND RAYLEIGH METHOD
;*
;* CALLING SEQUENCE:
;*      GET_RAYLEIGH_LUTS, SENSOR, RAYLEIGH_LUT_FILE_STRUCT=RAYLEIGH_LUT_FILE_STRUCT, VERBOSE=VERBOSE
;* INPUTS:
;*      SENSOR = A STRING CONTAINING THE NAME OF THE REQUIRED SENSOR (AATSR/ATSR2/MODISA/MERIS/PARASOL)
;
;* KEYWORDS:
;*      RAYLEIGH_LUT_FILE_STRUCT = STRUTURE WHIC CONTAINS ALL LUTS INFORMATION
;*      VERBOSE  - VERBOSE KEYWORD
;*
;* OUTPUTS:
;*      STATUS  - = -1 / FAILED - = 1 / SUCCEED
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      29 NOV 2013 - PML / MAGELLIUM - CREATION
;*      29 NOV 2013 - PML / MAGELLIUM - ADD METHOD KEYWORD
;*      23 FEB 2015 - NCG / MAGELLIUM - UPDATE FOR DIMITRI V4
;*
;* VALIDATION HISTORY:
;*      17 APR 2014 - PML / MAGELLIUM   - WINDOWS 64-BIT MACHINE IDL 8.2.3 : COMPILATION AND CALLING SUCCESSFUL
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************


FUNCTION GET_RAYLEIGH_LUT_TEMPLATE, NIR_BAND=NIR_BAND, VERBOSE=VERBOSE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'GET_RAYLEIGH_LUT_TEMPLATE: RETRIEVING TEMPLATE'

;  IF KEYWORD_SET(NIR_BAND) THEN BEGIN
;   TEMP_NAME     = ['THETA_S','THETA_V','DPHI','WV', 'TAU' , 'TG', 'REFL_TOA']
;   TEMP_TYPE     = [4,4,4,4,4,4,4]
;  ENDIF ELSE BEGIN
;   TEMP_NAME     = ['THETA_S','THETA_V','DPHI','WV', 'TAU', 'CHLOROPHYLL' , 'TG', 'REFL_TOA']
;   TEMP_TYPE     = [4,4,4,4,4,4,4,4]
;  ENDELSE
  
  IF KEYWORD_SET(NIR_BAND) THEN BEGIN
   TEMP_NAME      = SINDGEN(30)
   TEMP_NAME(0:6) = ['THETA_S','THETA_V','DPHI','WV', 'TAU', 'TG', 'REFL_TOA']
   TEMP_TYPE      = INTARR(30)
   TEMP_TYPE(*)   = 4
  ENDIF ELSE BEGIN
   TEMP_NAME      = SINDGEN(31)
   TEMP_NAME(0:7) = ['THETA_S','THETA_V','DPHI','WV', 'TAU', 'CHLOROPHYLL', 'TG', 'REFL_TOA']
   TEMP_TYPE      = INTARR(31)
   TEMP_TYPE(*)   = 4
  ENDELSE
  
  LUT_TEMPLATE = {VERSION        : 1.0   , $
                   DATASTART      : 0 , $
                   DELIMITER      : ' ' , $
                   MISSINGVALUE   : !values.f_NaN, $
                   COMMENTSYMBOL  : ''          , $
                   FIELDCOUNT     : N_ELEMENTS(TEMP_NAME), $
                   FIELDTYPES     : TEMP_TYPE, $
                   FIELDNAMES     : TEMP_NAME, $
                   FIELDLOCATIONS : INDGEN(N_ELEMENTS(TEMP_NAME)), $
                   FIELDGROUPS    : [INDGEN(N_ELEMENTS(TEMP_NAME))]}
    
  RETURN, LUT_TEMPLATE
  
END


FUNCTION READ_RAYLEIGH_LUT_FILE, LUT_FILENAME, RAYLEIGH_LUT_STRUCT=RAYLEIGH_LUT_STRUCT, NIR_BAND=NIR_BAND, VERBOSE=VERBOSE

  STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
  STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')
  
  ; TEST IF LUT FILE EXISTS
  LUT_FINFOS = FILE_INFO(LUT_FILENAME)
  IF LUT_FINFOS.EXISTS EQ 0 THEN BEGIN
    PRINT, 'READ_RAYLEIGH_LUT_FILE: ERROR, LUT FILE ' + LUT_FILENAME + 'DOES NOT EXIST'
    RETURN, STATUS_ERROR
  ENDIF
  ; GET LUT ASCII TEMPLATE AND READ ASCII FILE
  IF KEYWORD_SET(NIR_BAND) THEN  LUT_TEMPLATE = GET_RAYLEIGH_LUT_TEMPLATE(/NIR_BAND, VERBOSE=VERBOSE) $
                           ELSE  LUT_TEMPLATE = GET_RAYLEIGH_LUT_TEMPLATE(VERBOSE=VERBOSE)
  LUT_VALUES = READ_ASCII(LUT_FILENAME,TEMPLATE=LUT_TEMPLATE)
    
  RAYLEIGH_LUT_STRUCT = { REFL_TOA: LUT_VALUES.REFL_TOA, $
                          THETA_S: LUT_VALUES.THETA_S, $
                          THETA_V: LUT_VALUES.THETA_V, $
                          DPHI:    LUT_VALUES.DPHI, $
                          WV:      LUT_VALUES.WV, $
                          TAU:     LUT_VALUES.TAU }
                          
  IF NOT KEYWORD_SET(NIR_BAND) THEN RAYLEIGH_LUT_STRUCT = CREATE_STRUCT( RAYLEIGH_LUT_STRUCT, { CHLOROPHYLL : LUT_VALUES.CHLOROPHYLL } )
                               
  RETURN, STATUS_OK
  
END

FUNCTION GET_RAYLEIGH_LUTS, SENSOR, RAYLEIGH_LUT_FILE_STRUCT=RAYLEIGH_LUT_FILE_STRUCT, VERBOSE=VERBOSE

  FCT_NAME = 'GET_RAYLEIGH_LUTS'
  
  STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
  STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')
  
  SENSOR_CONFIG = GET_SENSOR_BAND_CONFIG(SENSOR) ; GET  CHANNELS / STD LABELS / LUT FILENAME / LUT FILENAME
  IF SIZE(SENSOR_CONFIG,/TYPE) NE 8 THEN BEGIN ; IF NOT A STRUCTURE
    PRINT, FCT_NAME + ': ERROR GET SENSOR BAND CONFIGURATION FOR SENSOR ', SENSOR
    RETURN, STATUS_ERROR
  ENDIF

  LUT_PATH = SENSOR_CONFIG.PATH_LUT
  LUT_FILENAME = SENSOR_CONFIG.RAYLEIGH_LUT_FILE
  LUT_FILE_LABEL = SENSOR_CONFIG.BAND_LABEL_STD
  
  ; RETRIEVE NIR BAND
  IDX_NIR = WHERE(STRMATCH(LUT_FILE_LABEL, 'NIR') EQ 1, COUNT)
  IF COUNT EQ 1 THEN BEGIN
    NIR_LUT_FILENAME = LUT_FILENAME(IDX_NIR)
    IF STRUPCASE(NIR_LUT_FILENAME) EQ 'NONE' THEN BEGIN
      PRINT, FCT_NAME + ': ERROR, NO NIR LUT PROVIDED FOR SENSOR ', SENSOR
      RETURN, STATUS_ERROR
    ENDIF
  ENDIF ELSE BEGIN
      PRINT, FCT_NAME + ': ERROR, NO NIR LUT PROVIDED (OR MORE THAN ONE) FOR SENSOR ', SENSOR
      RETURN, STATUS_ERROR
  ENDELSE
  
  NB_LUT_FILE = N_ELEMENTS(LUT_FILENAME)
  IDX_VALID_LUT_FILE = WHERE( STRUPCASE(LUT_FILENAME) NE 'NONE', COUNT_VALID_LUT_FILE)
  
  LUT_FILE_EXIST = INTARR( N_ELEMENTS(LUT_FILENAME) ) 
  LUT_FILE_EXIST(IDX_VALID_LUT_FILE) = 1
     
  ; READING OF EACH LUT FILE
  FOR NUM=0, COUNT_VALID_LUT_FILE-1 DO BEGIN  
    
    IF IDX_VALID_LUT_FILE[NUM] EQ IDX_NIR THEN GOTO, NEXT_LUT
    
    STATUS = READ_RAYLEIGH_LUT_FILE(LUT_PATH+LUT_FILENAME[IDX_VALID_LUT_FILE[NUM]], RAYLEIGH_LUT_STRUCT=ONE_RAYLEIGH_LUT_STRUCT)  
    IF STATUS NE STATUS_OK THEN BEGIN
      PRINT, FCT_NAME + ': ERROR DURING RAYLEIGH LUT FILE READING >> RETURNING'
      RETURN, STATUS
    ENDIF
    
    IF NUM EQ 0 THEN BEGIN
    
      NB_LINES = N_ELEMENTS(ONE_RAYLEIGH_LUT_STRUCT.REFL_TOA)    
      
      RAYLEIGH_LUT_ALL_STRUCT = { REFL_TOA: MAKE_ARRAY(NB_LINES, COUNT_VALID_LUT_FILE, /FLOAT), $
                                  THETA_S : ONE_RAYLEIGH_LUT_STRUCT.THETA_S, $
                                  THETA_V : ONE_RAYLEIGH_LUT_STRUCT.THETA_V, $
                                  DPHI    : ONE_RAYLEIGH_LUT_STRUCT.DPHI, $
                                  WV      : ONE_RAYLEIGH_LUT_STRUCT.WV, $
                                  TAU     : ONE_RAYLEIGH_LUT_STRUCT.TAU, $
                                  CHLOROPHYLL : ONE_RAYLEIGH_LUT_STRUCT.CHLOROPHYLL }
                                  
    ENDIF ELSE BEGIN
    
        ; CHECK FOR IDENTICAL THETA_S / THETA_V / DPHI & WS VALUES IN EVERY LUT FILE
        CHECK_THETA_S = WHERE(RAYLEIGH_LUT_ALL_STRUCT.THETA_S[*,0] EQ ONE_RAYLEIGH_LUT_STRUCT.THETA_S, COUNT_EQ_TS)
        CHECK_THETA_V = WHERE(RAYLEIGH_LUT_ALL_STRUCT.THETA_V[*,0] EQ ONE_RAYLEIGH_LUT_STRUCT.THETA_V, COUNT_EQ_TV)
        CHECK_DPHI = WHERE(RAYLEIGH_LUT_ALL_STRUCT.DPHI[*,0] EQ ONE_RAYLEIGH_LUT_STRUCT.DPHI, COUNT_EQ_DPHI)
        CHECK_WV = WHERE(RAYLEIGH_LUT_ALL_STRUCT.WV[*,0] EQ ONE_RAYLEIGH_LUT_STRUCT.WV, COUNT_EQ_WV)
        CHECK_TAU = WHERE(RAYLEIGH_LUT_ALL_STRUCT.TAU[*,0] EQ ONE_RAYLEIGH_LUT_STRUCT.TAU, COUNT_EQ_TAU)
        CHECK_CHLOROPHYLL = WHERE(RAYLEIGH_LUT_ALL_STRUCT.CHLOROPHYLL[*,0] EQ ONE_RAYLEIGH_LUT_STRUCT.CHLOROPHYLL, COUNT_EQ_CHLOROPHYLL)
        
        IF (NB_LINES NE COUNT_EQ_TS) OR (NB_LINES NE COUNT_EQ_TV) OR (NB_LINES NE COUNT_EQ_DPHI) $
              OR (NB_LINES NE COUNT_EQ_WV) OR (NB_LINES NE COUNT_EQ_TAU) OR (NB_LINES NE COUNT_EQ_CHLOROPHYLL) THEN BEGIN
          PRINT, FCT_NAME + ': ERROR LUT VALUES HAVE DIFFERENT DIMENSIONS, PLEASE CHECK YOUR LUT FILES IN FOLDER ' + LUT_PATH
          RETURN, STATUS_ERROR
        ENDIF

    ENDELSE
    
    RAYLEIGH_LUT_ALL_STRUCT.REFL_TOA(*,NUM) = ONE_RAYLEIGH_LUT_STRUCT.REFL_TOA

    NEXT_LUT:
    
  ENDFOR
  
  ; NIR LUT READING
  STATUS = READ_RAYLEIGH_LUT_FILE(LUT_PATH+NIR_LUT_FILENAME, RAYLEIGH_LUT_STRUCT=RAYLEIGH_LUT_NIR_STRUCT, /NIR_BAND)  
  IF STATUS NE STATUS_OK THEN BEGIN
    PRINT, FCT_NAME + ': ERROR DURING RAYLEIGH NIR LUT FILE READING >> RETURNING'
    RETURN, STATUS
  ENDIF

  RAYLEIGH_LUT_FILE_STRUCT = { IDX_VALID_LUT_FILE: IDX_VALID_LUT_FILE, LUT_FILE_LABEL: LUT_FILE_LABEL, RAYLEIGH_LUT_STRUCT: RAYLEIGH_LUT_ALL_STRUCT, RAYLEIGH_LUT_NIR_STRUCT: RAYLEIGH_LUT_NIR_STRUCT }

  RETURN, STATUS_OK
  
 END
 