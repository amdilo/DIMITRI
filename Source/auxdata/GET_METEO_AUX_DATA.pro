;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      GET_METEO_AUX_DATA
;*
;* PURPOSE:
;*      UTIL TO GET AUX DATA VALUES FROM GLOBAL NCDF DATA FILES
;*
;* CALLING SEQUENCE:
;*      DATA_STRUCT = GET_METEO_AUX_DATA(INGEST_AUXDATA, ACQUI_DATE, LAT, LON, AUX_DATA_STRUCT=AUX_DATA_STRUCT)
;*
;* INPUTS:
;*      INGEST_AUXDATA - A STRING SELECTING TYPE OF AUX_DATA TO INGEST (OZONE/WATERVAPOUR/CHLOROPHYLL/WIND)
;*      ACQUI_DATE  - JULIAN ACQUISITION DATE
;*      LAT         - POINTS LATITUDE COORDINATES
;*      LON         - POINTS LONGITUDE COORDINATES
;*
;* KEYWORDS:
;*      AUX_DATA_STRUCT = OUTPUT AUX_DATA STRUCTURE (FIELDS : 'LABELS_STD','VALUE')
;*
;* OUTPUTS:
;*      STATUS = RETURN STATUS
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      22 JAN 2015 - NCG / MAGELLIUM      - CREATION (DIMITRI V4.0)
;*
;* VALIDATION HISTORY:
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION GET_METEO_AUX_DATA, INGEST_AUXDATA, ACQUI_DATE, LAT, LON, AUX_DATA_STRUCT=AUX_DATA_STRUCT, VERBOSE=VERBOSE
 
	STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
	STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')

  CALDAT, ACQUI_DATE, CUR_MONTH, CUR_DAY, INGEST_YEAR
  
  CASE STRUPCASE(INGEST_AUXDATA) OF
    ; CHLOROPHYLL ESA FILE IS A MEAN OVER 1998-2012 PERIOD / SUBFOLDER NAME FORCED
    'CHLOROPHYLL' :     BEGIN
                            INGEST_YEAR_STR='1998-2012'
                        END
  
    ELSE:  INGEST_YEAR_STR=STRTRIM(STRING(INGEST_YEAR),1)
      
  ENDCASE 
  
  ; DETERMINATE MIN/MAX SQUARE FOR REQUIRED GLOBAL ZONE
  NORTH_LAT = MAX(LAT)
  SOUTH_LAT = MIN(LAT)
  EAST_LON = MAX(LON)
  WEST_LON = MIN(LON)
  
  ; FIND AND CHECK SUBFOLDER FROM AUXDATA
  FILESEP = GET_DIMITRI_LOCATION('DL',VERBOSE=VERBOSE)
  AUXDATA_FILE_EXT = GET_DIMITRI_LOCATION('AUXDATA_FILE_EXT',VERBOSE=VERBOSE)
  SITE_FILE = GET_DIMITRI_LOCATION('SITE_DATA',VERBOSE=VERBOSE)
  
  ; BUILD SOURCE AND OUTPUT FOLDER ACCORDING FUNCTION INPUTS
  REL_FOLDER_AUXDATA_YEAR = INGEST_AUXDATA + FILESEP + INGEST_YEAR_STR + FILESEP
  
  OUTPUT_FOLDER = ''; NONE > INTO MEMORY
  INPUT_METEO = GET_DIMITRI_LOCATION('INPUT_METEO',VERBOSE=VERBOSE)
  
  ; FIND AND CHECK SUBFOLDER FROM AUXDATA+YEAR
  INPUT_METEO = INPUT_METEO + REL_FOLDER_AUXDATA_YEAR
  
  IN_FOLDER_INFO = FILE_INFO(INPUT_METEO)
  IF IN_FOLDER_INFO.EXISTS EQ 0 THEN BEGIN
    PRINT, 'GET_METEO_AUX_DATA: ERROR, INPUT YEAR FOLDER ''' + INPUT_METEO + ''' NOT FOUND'
    RETURN, STATUS_ERROR
  ENDIF
  
  ; TEST FOR AUX_DATA/YEAR FOLDER STRUCTURE
  NCDF_FILENAME = FILE_SEARCH(INPUT_METEO, AUXDATA_FILE_EXT, /TEST_READ, COUNT=NB_FILES)
  IF NB_FILES EQ 0 THEN BEGIN
    PRINT, 'GET_METEO_AUX_DATA: ERROR, NO CDF FILE FOUND IN INPUT YEAR FOLDER ''' + INPUT_METEO + ''
    RETURN, STATUS_ERROR
  ENDIF
  IF NB_FILES GT 1 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN BEGIN
      PRINT, 'GET_METEO_AUX_DATA: WARNING, MORE THAN ONE CDF FILE FOUND IN INPUT YEAR FOLDER ''' + INPUT_METEO + ''
      PRINT, 'GET_METEO_AUX_DATA: WARNING, ONLY FILE '  + NCDF_FILENAME + ' IS TAKEN IN ACCOUNT'
    ENDIF
  ENDIF
  NCDF_FILENAME = NCDF_FILENAME[0]
    
    
  INGEST_INFOS_STRUCT = { $
        ACQUI_DATE  : ACQUI_DATE, $
        NORTH_LAT   : NORTH_LAT, $
        SOUTH_LAT   : SOUTH_LAT, $
        EAST_LON    : EAST_LON, $
        WEST_LON    : WEST_LON, $
        NCDF_LON_NAME    : 'longitude', $
        NCDF_LAT_NAME    : 'latitude', $
        NCDF_TIME_NAME   : 'time'  }

  ; PERFORM INGEST ACCORDING AUXDATA TYPE IN MEMORY
  PRINT, 'INGEST ' + STRUPCASE(INGEST_AUXDATA) + ' / ' + NCDF_FILENAME
  CASE STRUPCASE(INGEST_AUXDATA) OF
  
    'OZONE' :           BEGIN    
      INGEST_INFOS_STRUCT = CREATE_STRUCT( INGEST_INFOS_STRUCT, { NCDF_VAR_NAME : [ 'tco3' ] } )      
      OZONE = NETCDFREAD_INTERPOL_AUXDATA(NCDF_FILENAME, STATUS, INGEST_INFOS_STRUCT, LON, LAT, /VERBOSE)     
      IF STATUS NE STATUS_OK THEN GOTO, END_PROCESS
      ; CONVERSION UO3
      ; BEFORE 2001-06-12, UNIT WAS DOBSON. 1 DOBSON = 2.1415E-5 KG M2
      FCONVERSION = 2.1415e-05 ;
      ; CONVERSION DOBSON TO CM. ATM : 1 M ATM CM= 1 DOBSON
      ; IN DOBSON
      OZONE = OZONE / FCONVERSION;
      ; IN CM ATM
      FCONVERSION2= 0.001;
      OZONE = OZONE * FCONVERSION2;
      
      AUX_DATA_STRUCT = CREATE_STRUCT('LABELS_STD','OZONE','VALUE',OZONE)
    END
    
    'WATERVAPOUR' :     BEGIN
      INGEST_INFOS_STRUCT = CREATE_STRUCT( INGEST_INFOS_STRUCT, { NCDF_VAR_NAME : [ 'tcwv' ] } )      
      WATERVAPOUR = NETCDFREAD_INTERPOL_AUXDATA(NCDF_FILENAME, STATUS, INGEST_INFOS_STRUCT, LON, LAT, /VERBOSE)
      IF STATUS NE STATUS_OK THEN GOTO, END_PROCESS
      FCONVERSION=10
      WATERVAPOUR = WATERVAPOUR / FCONVERSION
      AUX_DATA_STRUCT = CREATE_STRUCT('LABELS_STD','WATERVAPOUR','VALUE',WATERVAPOUR)
    END
    
    'CHLOROPHYLL' :     BEGIN
      INGEST_INFOS_STRUCT = CREATE_STRUCT( INGEST_INFOS_STRUCT, { NCDF_VAR_NAME : [ 'chl_monthly_mean' ] } )
      INGEST_INFOS_STRUCT.NCDF_TIME_NAME = 'month'
      CHLOROPHYLL = NETCDFREAD_INTERPOL_AUXDATA(NCDF_FILENAME, STATUS, INGEST_INFOS_STRUCT, LON, LAT, /MONTH_EXTRACT, /VERBOSE)
      IF STATUS NE STATUS_OK THEN GOTO, END_PROCESS
      AUX_DATA_STRUCT = CREATE_STRUCT('LABELS_STD','CHLOROPHYLL','VALUE',CHLOROPHYLL)
    END

    'PRESSURE' :        BEGIN
      INGEST_INFOS_STRUCT = CREATE_STRUCT( INGEST_INFOS_STRUCT, { NCDF_VAR_NAME : [ 'sp' ] } )      
      PRESSURE = NETCDFREAD_INTERPOL_AUXDATA(NCDF_FILENAME, STATUS, INGEST_INFOS_STRUCT, LON, LAT, /VERBOSE)
      IF STATUS NE STATUS_OK THEN GOTO, END_PROCESS
      FCONVERSION = 100
      PRESSURE = PRESSURE / FCONVERSION
      AUX_DATA_STRUCT = CREATE_STRUCT('LABELS_STD','PRESSURE','VALUE',PRESSURE)
    END
    
    'WIND'  :           BEGIN
      INGEST_INFOS_STRUCT = CREATE_STRUCT( INGEST_INFOS_STRUCT, { NCDF_VAR_NAME : [ 'u10', 'v10' ] } )      
      WIND = NETCDFREAD_INTERPOL_AUXDATA(NCDF_FILENAME, STATUS, INGEST_INFOS_STRUCT, LON, LAT, /VERBOSE)
      IF STATUS NE STATUS_OK THEN GOTO, END_PROCESS

      ; [DATA_WIND_SPEED,DATA_WIND_DIRECTION]=UV_2_WS_WD(U,V)
      DATAOUT = UV_2_WS_WD(WIND(0,*), WIND(1,*))
      WIND_SPEED = REFORM(DATAOUT.WIND_SPEED)
      WIND_DIRECTION = REFORM(DATAOUT.WIND_DIRECTION)

      AUX_DATA_STRUCT = CREATE_STRUCT('LABELS_STD','WIND_SPEED' ,'VALUE',WIND_SPEED)
      AUX_DATA_STRUCT = [ AUX_DATA_STRUCT , CREATE_STRUCT('LABELS_STD','WIND_DIRECTION' ,'VALUE', WIND_DIRECTION) ]
    END
    
  ENDCASE
  
  RETURN, STATUS_OK

  END_PROCESS:
  IF (STATUS NE STATUS_OK) AND (KEYWORD_SET(VERBOSE)) THEN PRINT, 'GET_METEO_AUX_DATA : ERROR DURING METEO AUX DATA EXTRACTION'
  
  RETURN, STATUS_ERROR
  
END
