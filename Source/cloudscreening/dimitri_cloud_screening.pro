;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      DIMITRI_CLOUD_SCREENING       
;* 
;* PURPOSE:
;*      THIS ROUTINE TAKES ANY INPUT SENSOR L1B TOA REFLECTANCE AND SENDS IT TO THE 
;*      REQUIRED CLOUD SCREENING ALGORITHM. THE PERCENTAGE CLOUD OF THE SUPPLEID PIXELS 
;*      IS RETURNED.
;* 
;* CALLING SEQUENCE:
;*      RES = DIMITRI_CLOUD_SCREENING(SENSOR,SITE_TYPE,TOA_RHO,CS_ANG,CS_ALGO,SUNGLINT_STATUS=SUNGLINT_STATUS,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX)    
;* 
;* INPUTS:
;*      SENSOR            - A STRING OF THE INPUT SENSOR      
;*      SITE_TYPE         - A STRING OF THE DIMITRI VALIDATION SITE TYPE (E.G. 'OCEANIC')'
;*      TOA_RHO           - A FLOAT ARRAY CONTAINING THE SENSORS TOA REFLECTANCE (NUM_PIXELS,NUM_BANDS)
;*      CS_ANG            - A 4 ELEMENT ARRAY CONTAINING THE SZA AND VZA VALUES AND EITHER
        ;*                   RAA OR SAA AND VAA
;*      CS_ALGO           - A STRING OF THE CLOUD SCREENING ALGORITHM NAME 
;*      CS_ANG            - SUN/VIEWING ANGLES
;* KEYWORDS:
;*      VERBOSE    - PROCESSING STATUS OUTPUTS
;*      SUNGLINT_STATUS   - A SUNGLINT STATUS TO SWITCH TO SPECIFIC PROCESS FOR GLITTER ANALYSIS
;*
;* OUTPUTS:
;*      CLOUD_PERCENTAGE - THE PERCENTAGE CLOUD COVER RETURNED FROM THE REQUESTED SPECTRUM
;*      CS_CLASSIF_MATRIX - A DATA MATRIX INCLUDING EVERY DIFFERENT STEP OF THE CLOUD SCREENING PROCESS

;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      07 APR 2011 - C KENT   - DIMITRI-2 V1.0
;*      26 MAY 2014 - BBT/PML / MAGELLIUM  - ADDED SUNGLINT SPECIFIC CLASSIFICATION PROCESS + CLASSIF MATRIX AS OUTPUT/KEYWORD
;*
;* VALIDATION HISTORY:
;*      12 APR 2011 - C KENT   - NOMINAL COMPILATION AND OPERATION ON WINDOWS 32BIT 
;*                               IDL 7.1 AND LINUX 64BIT IDL 8.0
;*      26 MAY 2014 - PML / MAGELLIUM      - NOMINAL COMPILATION AND OPERATION ON WINDOWS 64BIT  / IDL 8.2
;*      20 JAN 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION DIMITRI_CLOUD_SCREENING, SENSOR, SITE_TYPE, TOA_RHO, CS_ANG, CS_ALGO, SITE_NAME=SITE_NAME, $
                                  SUNGLINT_STATUS=SUNGLINT_STATUS, CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX, VERBOSE=VERBOSE

  STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
  STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')

;------------------------
; GET SENSOR BANDS AND CS INDEX BANDS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_CLOUD_SCREENING: STARTING CLOUD SCREENING FOR ALGORITHM -',STRUPCASE(CS_ALGO)
    
  SENS_BANDS  = SENSOR_BAND_INFO(SENSOR,VERBOSE=VERBOSE)
  CS_BANDS    = CS_BAND_INFO(CS_ALGO,VERBOSE=VERBOSE)

;------------------------
; COMPUTE NUMBER OF PIXELS AND GET MATCHING SENSOR RHO
  
  NB_PIXELS   = N_ELEMENTS(TOA_RHO[*,0])
  NB_CAN = N_ELEMENTS(TOA_RHO[0,*])
  MISSING_VALUE_INT  = FIX(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))
  MISSING_VALUE_LONG = LONG(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))
  
  ; Added BBT 28/08/2013
  ; On a ajoute les 2 bandes d indices lig/col pour les tests de coherence spatiale
  ;NB_CS_BANDS = N_ELEMENTS(CS_BANDS)
  
  NB_CS_BANDS = N_ELEMENTS(CS_BANDS ) + 2
  
  CS_RHO      = MAKE_ARRAY(NB_PIXELS,NB_CS_BANDS,/FLOAT)
  EXCEPTION_RAISED = 0
  MODISA_FLAG = 0

;------------------------
; ADD MODIS EXCEPTION

  IF  (SENSOR EQ 'MODISA') THEN BEGIN

    CS_BANDS = [12,20,21,18,22,23,14,15]
    CS_FACT  = [1.08,0.92,0.95,0.90,1., 1.,1.,1.]

    NB_CS_BANDS = N_ELEMENTS(CS_BANDS)+2
    CS_RHO      = MAKE_ARRAY(NB_PIXELS,NB_CS_BANDS,/FLOAT)
    
    IF (CS_ALGO EQ 'MODIS_DESERT' OR CS_ALGO EQ 'MODIS_OCEAN') THEN BEGIN
      FOR CLOUDI=0,NB_CS_BANDS-3 DO CS_RHO[*,CLOUDI] = TOA_RHO[*,CS_BANDS[CLOUDI]]
    ENDIF  
    
    IF (CS_ALGO EQ 'LCCA' ) THEN BEGIN
      FOR CLOUDI=0,NB_CS_BANDS-3 DO BEGIN
        
        ; ASSIGN MEAN VALUE OF VALID VALUES TO BADVALUES AS DONE IN MODISA INGESTION OF DIMITRI V3.1.1 Argans version
        TOA_REF_TEMP = TOA_RHO[*,CS_BANDS[CLOUDI]]
        VALID = WHERE(TOA_REF_TEMP GT 0.0 AND TOA_REF_TEMP LT 5.0,COUNTV, COMPLEMENT=NON_VALID, NCOMPLEMENT=COUNTN)
        IF COUNTN GT 0 AND COUNTV NE 0 THEN TOA_REF_TEMP[NON_VALID] = MEAN(TOA_REF_TEMP[VALID])
              
        CS_RHO[*,CLOUDI] = TOA_REF_TEMP * CS_FACT[CLOUDI]
      ENDFOR
    ENDIF  

    EXCEPTION_RAISED = 1
    MODISA_FLAG = 1   
  ENDIF
  
  IF NOT EXCEPTION_RAISED THEN BEGIN 
    FOR CLOUDI=0,NB_CS_BANDS-3 DO BEGIN
      BID = GET_SENSOR_BAND_INDEX(SENSOR,CS_BANDS[CLOUDI])
      IF BID GE 0 THEN BEGIN 
        CS_RHO[*,CLOUDI] = TOA_RHO[*,BID] 
      ENDIF ELSE BEGIN
        PRINT, 'DIMITRI_CLOUD_SCREENING: ERROR, REQUIRED WAVELENGTHS NOT FOUND, RETURNING'
        RETURN, STATUS_ERROR
      ENDELSE
    ENDFOR
    
  ENDIF

  DECAL=0
  FOR CLOUDI=NB_CS_BANDS-2,NB_CS_BANDS-1 DO BEGIN
    CS_RHO[*,CLOUDI] = TOA_RHO[*,NB_CAN -2 + DECAL]
    DECAL=DECAL+1
  ENDFOR

    
;------------------------
; CALL THE REQUIRED CLOUD SCREENING ALGORITHM

  CASE STRUPCASE(CS_ALGO) OF 
    'VGT'         : STATUS = CLOUD_MODULE_VGT(SITE_TYPE,CS_RHO,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)
    'GLOBCARBON'  : STATUS = CLOUD_MODULE_GLOBCARBON(SITE_TYPE,CS_RHO,CS_ANG,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)
    'GLOBCARBON_P': STATUS = CLOUD_MODULE_GLOBCARBON_P(SITE_TYPE,CS_RHO,CS_ANG,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)
    'LCCA'  			: STATUS = CLOUD_MODULE_LCCA(CS_RHO,MODISA=MODISA_FLAG,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)

    ;MODIS
    'MODIS_DESERT': STATUS = CLOUD_MODULE_MODISA_DESERT(SITE_NAME,CS_RHO,CS_ANG,MODISA=MODISA_FLAG,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)
    'MODIS_OCEAN' : STATUS = CLOUD_MODULE_MODISA_OCEAN(CS_RHO,CS_ANG,MODISA=MODISA_FLAG,SUNGLINT_STATUS=SUNGLINT_STATUS,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)

    ;MERIS
    'MERIS_DESERT'  : STATUS = CLOUD_MODULE_MERIS_DESERT(SITE_NAME,CS_RHO,CS_ANG,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)
    'MERIS_OCEAN'   : STATUS = CLOUD_MODULE_MERIS_OCEAN(CS_RHO,CS_ANG,SUNGLINT_STATUS=SUNGLINT_STATUS,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)
    
    ;VGT
    'VGT_DESERT'    : STATUS = CLOUD_MODULE_VGT_DESERT(SITE_NAME,CS_RHO,CS_ANG,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)
    
    ;PARASOL
    'PARASOL_DESERT': STATUS = CLOUD_MODULE_PARASOL_DESERT(SITE_NAME,CS_RHO,CS_ANG,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)
    'PARASOL_OCEAN' : STATUS = CLOUD_MODULE_PARASOL_OCEAN(CS_RHO,CS_ANG,SUNGLINT_FLAG=SUNGLINT_STATUS,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)
    
    ;AATSR/ATSR2
    'ATSR_OCEAN'    : STATUS = CLOUD_MODULE_ATSR_OCEAN(CS_RHO,CS_ANG,SUNGLINT_STATUS=SUNGLINT_STATUS,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)
    'ATSR_DESERT'   : STATUS = CLOUD_MODULE_ATSR_DESERT(SITE_NAME,CS_RHO,CS_ANG,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX,VERBOSE=VERBOSE)

    
  ENDCASE
  
  IF STATUS NE STATUS_OK THEN BEGIN
    PRINT, FCT_NAME + ': ERROR DURING CLOUD SCREENING PROCESSING'
    RETURN, STATUS_ERROR
  ENDIF

  ;--------------------------
  ; CALCULATE CLOUD PERCENTAGE

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'DIMITRI_CLOUD_SCREENING: COMPUTING STATISTICS'  

  IDX_PIX_VALID = WHERE(CS_CLASSIF_MATRIX[*,0] NE MISSING_VALUE_LONG, NUM_PIX_VALID)
  CS_MASK = WHERE(CS_CLASSIF_MATRIX[*,1] EQ 1,NUM_CS)
  
  IF NUM_PIX_VALID EQ 0 THEN CLOUD_PERCENTAGE = STATUS_ERROR $
                        ELSE CLOUD_PERCENTAGE  = FLOAT(NUM_CS)/FLOAT(NUM_PIX_VALID)
    
  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'DIMITRI_CLOUD_SCREENING: CLOUD_PERCENTAGE = ',100.0*CLOUD_PERCENTAGE 

;--------------------------
; RETURN THE CLOUD PERCENTAGE

  RETURN, CLOUD_PERCENTAGE

END