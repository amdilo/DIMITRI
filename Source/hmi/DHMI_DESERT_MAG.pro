;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      DHMI_DESERT_MAG    
;* 
;* PURPOSE:
;*      THIS PROGRAM MANAGE THE HMI (HUMAN/MAN INTERFACE) FOR THE DESERT SENSOR TO SIMULATION COMPARISON METHOD
;*
;* CALLING SEQUENCE:
;*      DHMI_DESERT_MAG      
;*
;* INPUTS:
;*      NONE
;*
;* KEYWORDS:
;*      GROUP_LEADER - THE ID OF ANOTHER WIDGET TO BE USED AS THE GROUP LEADER
;*      VERBOSE      - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      NONE
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      29 NOV 2013 - PML / MAGELLIUM - CREATION
;*
;* VALIDATION HISTORY:
;*      17 APR 2014 - PML / MAGELLIUM - WINDOWS 64-BIT MACHINE IDL 8.2.3 : COMPILATION AND CALLING SUCCESSFUL
;*      20 JAN 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

PRO DHMI_DESERT_MAG_EXIT,EVENT

;--------------------------
; GET EVENT AND WIDGET INFO

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=DHMI_DESERT_MAG_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE=ACTION

;--------------------------
; CLEAN UP OBJECTS

  IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->EXIT: DESTROYING OBJECTS'
  OBJ_DESTROY,DHMI_DESERT_MAG_INFO.PROCV
  OBJ_DESTROY,DHMI_DESERT_MAG_INFO.SNAME
  OBJ_DESTROY,DHMI_DESERT_MAG_INFO.VSITE
  OBJ_DESTROY,DHMI_DESERT_MAG_INFO.YEARV
  
;--------------------------
; DESTROY THE WIDGET

  IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->EXIT: DESTROYING THE WIDGET'
  WIDGET_CONTROL,EVENT.TOP,/DESTROY

END

;**************************************************************************************
;**************************************************************************************

PRO DHMI_DESERT_MAG_PROCESS,EVENT

COMMON DHMI_DATABASE

;--------------------------
; GET EVENT AND WIDGET INFO

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=DHMI_DESERT_MAG_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE=ACTION

;--------------------------
; GET THE REQUIRED DATA VALUES

  IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->PROCESS: RETRIEVING THE REQUIRED VARIABLES FOR INGESTION'
  DHMI_DESERT_MAG_INFO.VSITE->GETPROPERTY,VALUE=INGEST_REGION
  DHMI_DESERT_MAG_INFO.SNAME->GETPROPERTY,VALUE=INGEST_SENSOR 
  DHMI_DESERT_MAG_INFO.PROCV->GETPROPERTY,VALUE=INGEST_PROC_VER
  DHMI_DESERT_MAG_INFO.YEARV->GETPROPERTY,VALUE=INGEST_YEAR
  ;DHMI_DESERT_MAG_INFO.CLTAB->GETPROPERTY,VALUE=COLOUR_TABLE
  ;DHMI_DESERT_MAG_INFO.PLTX->GETPROPERTY,VALUE=PLOT_XSIZE
  ;DHMI_DESERT_MAG_INFO.PLTY->GETPROPERTY,VALUE=PLOT_YSIZE
  IF INGEST_YEAR NE 'ALL' THEN IYEAR = INGEST_YEAR ELSE ACTION='ALL'

;--------------------------
;CREATE NEW POP DISPLAY WIDGET

  IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->PROCESS: CREATING A POP DISPLAY'
  XSIZE = 200
  YSIZE = 60
  XLOC  = (DHMI_DESERT_MAG_INFO.DIMS[0]/2)-(XSIZE/2)
  YLOC  = (DHMI_DESERT_MAG_INFO.DIMS[1]/2)-(YSIZE/2)

  INFO_WD = WIDGET_BASE(COLUMN=1, XSIZE=XSIZE, YSIZE=YSIZE, TITLE='Please Wait...',XOFFSET=XLOC,YOFFSET=YLOC)
  LBLTXT = WIDGET_LABEL(INFO_WD,VALUE=' ')
  LBLTXT = WIDGET_LABEL(INFO_WD,VALUE='Please wait while')
  LBLTXT = WIDGET_LABEL(INFO_WD,VALUE='file reading in progress...')
  WIDGET_CONTROL, INFO_WD, /REALIZE
  WIDGET_CONTROL, /HOURGLASS

;--------------------------
; CALL INGEST INTERFACE

  IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->PROCESS: CALLING THE INGESTION INTERFACE ROUTINE'
  CASE ACTION OF
    'PROCESS':  RES = DIMITRI_INTERFACE_DESERT_MAG(INGEST_REGION,INGEST_SENSOR,INGEST_PROC_VER,YEAR=IYEAR,VERBOSE=DHMI_DESERT_MAG_INFO.IVERBOSE)

    'ALL':      RES = DIMITRI_INTERFACE_DESERT_MAG(INGEST_REGION,INGEST_SENSOR,INGEST_PROC_VER,/ALL,YEAR=IYEAR,VERBOSE=DHMI_DESERT_MAG_INFO.IVERBOSE)
  ENDCASE

;--------------------------
; CLOSE DISPLAY WIDGET AND REPORT STATUS

  IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->PROCESS: DESTROYING THE POP DISPLAY'
  WIDGET_CONTROL,INFO_WD,/DESTROY
  WAIT,0.5

  IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->PROCESS: USE OUTPUT TO IDENTIFY CLOSING MESSAGE'
  CASE RES OF
    -1: MSG = ['One or more errors encountered','Please check log, database file and output plots']
     0: MSG = ['No Desert products found']
     1: MSG = ['Successful']
  ENDCASE
  TMP = DIALOG_MESSAGE(['Desert MAG Simulation Process : ','',MSG],/INFORMATION,/CENTER)

;--------------------------
; RETURN TO DESERT WIDGET 

  IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->PROCESS: RETURNING TO THE DESERT WIDGET'  
  WIDGET_CONTROL, EVENT.TOP, SET_UVALUE=DHMI_DESERT_MAG_INFO, /NO_COPY

END

;**************************************************************************************
;**************************************************************************************

PRO DHMI_DESERT_MAG_CHANGE,EVENT

;--------------------------
; GET EVENT AND WIDGET INFO

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=DHMI_DESERT_MAG_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE=ACTION

;--------------------------
; GET ACTION TYPE, P,N,S,C,Y

  IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->CHANGE: RETRIEVING ACTION TYPE'
  ACTION_TYPE = STRMID(ACTION,0,1)
  CASE ACTION_TYPE OF

;--------------------------
; UPDATE PROCESSING VERSION FIELD

  'P':  BEGIN
          IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->CHANGE: PROC_VER ACTION TYPE, UPDATING FIELDS'
          CASE ACTION OF
            'PROC<':DHMI_DESERT_MAG_INFO.PIDX = DHMI_DESERT_MAG_INFO.PIDX-1
            'PROC>':DHMI_DESERT_MAG_INFO.PIDX = DHMI_DESERT_MAG_INFO.PIDX+1
          ENDCASE
     
          IF DHMI_DESERT_MAG_INFO.PIDX LT 0 THEN DHMI_DESERT_MAG_INFO.PIDX = DHMI_DESERT_MAG_INFO.NPROC-1
          IF DHMI_DESERT_MAG_INFO.PIDX EQ DHMI_DESERT_MAG_INFO.NPROC THEN DHMI_DESERT_MAG_INFO.PIDX = 0
          DHMI_DESERT_MAG_INFO.PROCV->SETPROPERTY, VALUE=STRMID(DHMI_DESERT_MAG_INFO.PROC_SEARCH[DHMI_DESERT_MAG_INFO.PIDX],5,STRLEN(DHMI_DESERT_MAG_INFO.PROC_SEARCH[DHMI_DESERT_MAG_INFO.PIDX])-5)
        END
        
;--------------------------
; UPDATE SENSOR NAME FIELD

  'N':  BEGIN
          IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->CHANGE: SENSOR ACTION TYPE, UPDATING FIELDS'
          CASE ACTION OF
            'NAME<':DHMI_DESERT_MAG_INFO.SIDX = DHMI_DESERT_MAG_INFO.SIDX-1
            'NAME>':DHMI_DESERT_MAG_INFO.SIDX = DHMI_DESERT_MAG_INFO.SIDX+1
          ENDCASE

          IF DHMI_DESERT_MAG_INFO.SIDX LT 0 THEN DHMI_DESERT_MAG_INFO.SIDX = DHMI_DESERT_MAG_INFO.NSENS-1
          IF DHMI_DESERT_MAG_INFO.SIDX EQ DHMI_DESERT_MAG_INFO.NSENS THEN DHMI_DESERT_MAG_INFO.SIDX = 0
          DHMI_DESERT_MAG_INFO.SNAME->SETPROPERTY, VALUE=DHMI_DESERT_MAG_INFO.SENS_SEARCH[DHMI_DESERT_MAG_INFO.SIDX]
          
          CD, DHMI_DESERT_MAG_INFO.INPUT_FOLDER+DHMI_DESERT_MAG_INFO.SITE_SEARCH[DHMI_DESERT_MAG_INFO.VIDX]+DHMI_DESERT_MAG_INFO.DL+DHMI_DESERT_MAG_INFO.SENS_SEARCH[DHMI_DESERT_MAG_INFO.SIDX]
          SEARCH = FILE_SEARCH('Proc_*',/TEST_DIRECTORY)
          DHMI_DESERT_MAG_INFO.NPROC = N_ELEMENTS(SEARCH)
          DHMI_DESERT_MAG_INFO.PROC_SEARCH[0:DHMI_DESERT_MAG_INFO.NPROC-1] = SEARCH
          DHMI_DESERT_MAG_INFO.PIDX = 0
          DHMI_DESERT_MAG_INFO.PROCV->SETPROPERTY, VALUE=STRMID(DHMI_DESERT_MAG_INFO.PROC_SEARCH[DHMI_DESERT_MAG_INFO.PIDX],5,STRLEN(DHMI_DESERT_MAG_INFO.PROC_SEARCH[DHMI_DESERT_MAG_INFO.PIDX])-5)
        END

;--------------------------
; UPDATE SITE FIELD

  'S':  BEGIN
          IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->CHANGE: SITE ACTION TYPE, UPDATING FIELDS'
          CASE ACTION OF
            'SITE<':DHMI_DESERT_MAG_INFO.VIDX = DHMI_DESERT_MAG_INFO.VIDX-1
            'SITE>':DHMI_DESERT_MAG_INFO.VIDX = DHMI_DESERT_MAG_INFO.VIDX+1
          ENDCASE
          IF DHMI_DESERT_MAG_INFO.VIDX LT 0 THEN DHMI_DESERT_MAG_INFO.VIDX = N_ELEMENTS(DHMI_DESERT_MAG_INFO.SITE_SEARCH)-1
          IF DHMI_DESERT_MAG_INFO.VIDX EQ N_ELEMENTS(DHMI_DESERT_MAG_INFO.SITE_SEARCH) THEN DHMI_DESERT_MAG_INFO.VIDX = 0
          DHMI_DESERT_MAG_INFO.VSITE->SETPROPERTY, VALUE=STRMID(DHMI_DESERT_MAG_INFO.SITE_SEARCH[DHMI_DESERT_MAG_INFO.VIDX],5,STRLEN(DHMI_DESERT_MAG_INFO.SITE_SEARCH[DHMI_DESERT_MAG_INFO.VIDX])-5)

          DHMI_DESERT_MAG_INFO.SIDX = 0
          CD, DHMI_DESERT_MAG_INFO.INPUT_FOLDER+DHMI_DESERT_MAG_INFO.SITE_SEARCH[DHMI_DESERT_MAG_INFO.VIDX]+DHMI_DESERT_MAG_INFO.DL
          SEARCH = FILE_SEARCH('*',/TEST_DIRECTORY)
          DHMI_DESERT_MAG_INFO.NSENS = N_ELEMENTS(SEARCH)
          DHMI_DESERT_MAG_INFO.SENS_SEARCH[0:DHMI_DESERT_MAG_INFO.NSENS-1] = SEARCH
          DHMI_DESERT_MAG_INFO.SNAME->SETPROPERTY, VALUE=DHMI_DESERT_MAG_INFO.SENS_SEARCH[DHMI_DESERT_MAG_INFO.SIDX]

          CD, DHMI_DESERT_MAG_INFO.INPUT_FOLDER+DHMI_DESERT_MAG_INFO.SITE_SEARCH[DHMI_DESERT_MAG_INFO.VIDX]+DHMI_DESERT_MAG_INFO.DL+DHMI_DESERT_MAG_INFO.SENS_SEARCH[DHMI_DESERT_MAG_INFO.SIDX]
          SEARCH = FILE_SEARCH('Proc_*',/TEST_DIRECTORY)
          DHMI_DESERT_MAG_INFO.NPROC = N_ELEMENTS(SEARCH)
          DHMI_DESERT_MAG_INFO.PROC_SEARCH[0:DHMI_DESERT_MAG_INFO.NPROC-1] = SEARCH
          DHMI_DESERT_MAG_INFO.PIDX = 0
          DHMI_DESERT_MAG_INFO.PROCV->SETPROPERTY, VALUE=STRMID(DHMI_DESERT_MAG_INFO.PROC_SEARCH[DHMI_DESERT_MAG_INFO.PIDX],5,STRLEN(DHMI_DESERT_MAG_INFO.PROC_SEARCH[DHMI_DESERT_MAG_INFO.PIDX])-5)
        END

;--------------------------
; UPDATE YEAR FIELD

  'Y':  BEGIN
          IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->CHANGE: YEAR ACTION TYPE, UPDATING FIELDS'
          IYEAR = DHMI_DESERT_MAG_INFO.YIDX
          CASE ACTION OF
            'YEAR<':IYEAR = IYEAR-1
            'YEAR>':IYEAR = IYEAR+1
          ENDCASE
          IF IYEAR LT 0 THEN IYEAR = DHMI_DESERT_MAG_INFO.NYEAR-1
          IF IYEAR GT DHMI_DESERT_MAG_INFO.NYEAR-1 THEN IYEAR = 0
          DHMI_DESERT_MAG_INFO.YEARV->SETPROPERTY, VALUE=DHMI_DESERT_MAG_INFO.YEAR_SEARCH[IYEAR]
          DHMI_DESERT_MAG_INFO.YIDX = IYEAR
        END


  ENDCASE

;--------------------------
; MAKE SURE WE'RE IN THE CORRECT 
; DIRECTORY AND RETURN TO WIDGET

  IF DHMI_DESERT_MAG_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_DESERT_MAG->CHANGE: RESETTING CURRENT DIRECTORY AND RETURNING TO THE WIDGET'
  CD,DHMI_DESERT_MAG_INFO.CDIR
  WIDGET_CONTROL, EVENT.TOP, SET_UVALUE=DHMI_DESERT_MAG_INFO, /NO_COPY

END

;**************************************************************************************
;**************************************************************************************

PRO DHMI_DESERT_MAG,GROUP_LEADER=GROUP_LEADER,VERBOSE=VERBOSE

  IF KEYWORD_SET(VERBOSE) THEN BEGIN
    IVERBOSE=1
    PRINT,'DHMI_DESERT_MAG: STARTING DESERT WIDGET ROUTINE'
  ENDIF ELSE IVERBOSE=0
  

  IF KEYWORD_SET(VERBOSE) THEN BEGIN
    IVERBOSE=1
    PRINT,'DHMI_DESERT_MAG: STARTING INGEST WIDGET ROUTINE'
  ENDIF ELSE IVERBOSE=0
  
  IF STRUPCASE(!VERSION.OS_FAMILY) EQ 'WINDOWS' THEN WIN_FLAG = 1 ELSE WIN_FLAG = 0

;--------------------------
; FIND MAIN DIMITRI FOLDER AND DELIMITER

  CD, CURRENT=CDIR
  DL = GET_DIMITRI_LOCATION('DL')
  INPUT_FOLDER  = GET_DIMITRI_LOCATION('INGESTION_OUTPUT')
  
;--------------------------
; GET LIST OF ALL SITE NAMES
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_DESERT_MAG: SEARCHING FOR SITE FOLDERS'

  RES = FILE_INFO(INPUT_FOLDER)
  IF RES.EXISTS NE 1 OR RES.DIRECTORY NE 1 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT, INPUT_FOLDER + " FOLDER DOESN'T EXIST, CREATION"
    FILE_MKDIR, INPUT_FOLDER
  ENDIF
  CD,INPUT_FOLDER  
  SITE_SEARCH = FILE_SEARCH('Site_*',/TEST_DIRECTORY)

  SENS_SEARCH = STRARR(30)
  PROC_SEARCH = STRARR(30)
  YEAR_SEARCH = STRING(INDGEN(15)+2000,FORMAT='(I4)')
  YEAR_SEARCH = ['ALL',YEAR_SEARCH]

  ; GET SITE LIST

 ; FILTER OUT SITE LIST WITH ONLY SITE TYPE = DESERT > DESERT METHOD IS ONLY VALID FOR DESERT TYPE
  INC_SG = 0
  CD, CDIR
  SITE_DESERT_SEARCH=''
  FOR IDXSITE=0,N_ELEMENTS(SITE_SEARCH)-1 DO BEGIN
    CUR_SITE= SITE_SEARCH(IDXSITE)  ; GET CURRENT SITE / REMOVE 'Site_' PREFIX
    CUR_SITE_TYPE = GET_SITE_TYPE(STRMID(CUR_SITE,5))
    IF STRCMP(CUR_SITE_TYPE,'DESERT',/FOLD_CASE) THEN BEGIN
      IF INC_SG EQ 0 THEN SITE_DESERT_SEARCH = CUR_SITE ELSE SITE_DESERT_SEARCH = [ SITE_DESERT_SEARCH , CUR_SITE ]  
      INC_SG=INC_SG+1
    ENDIF
  ENDFOR
  SITE_SEARCH = SITE_DESERT_SEARCH ; OVERWRITE SITE LIST WITH ONLY DESERT SITES 
  
  IF SITE_SEARCH[0] EQ '' THEN BEGIN
    MSG='DHMI_DESERT_MAG: ERROR, NO DESERT SITES FOUND IN INPUT FOLDER, PLEASE INGEST L1 PRODUCTS FOR DESERT FIRST!'
    TMP = DIALOG_MESSAGE(MSG,/ERROR,/CENTER)
    RETURN
  ENDIF  

;--------------------------
; SET THE FIRST SITE FOUND AS DEFAULT

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_DESERT_MAG: GETTING INFO FOR FIRST SITE FOLDER FOUND' 
  FIRST_SITE_FOLDER = SITE_SEARCH[0]
  TEMP = STRPOS(FIRST_SITE_FOLDER,'Site_',/REVERSE_SEARCH)
  FIRST_SITE = STRMID(FIRST_SITE_FOLDER,TEMP+5,STRLEN(FIRST_SITE_FOLDER)-TEMP)

;--------------------------
; GET AVAILABLE SENSORS IN FIRST SITE 

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_DESERT_MAG: SEARCHING FOR SENSORS WITHIN FIRST SITE' 
  CD,INPUT_FOLDER+FIRST_SITE_FOLDER
  SEARCH = FILE_SEARCH('*',/TEST_DIRECTORY)
  NSENS = N_ELEMENTS(SEARCH)
  SENS_SEARCH[0:NSENS-1] =SEARCH
  FIRST_SENSOR = SEARCH[0]

;--------------------------
; GET AVAILABLE PROC VERS FOR 
; FIRST SENSORS IN FIRST SITE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_DESERT_MAG: SEARCHING FOR PROCESSING VERSIONS WITHIN FIRST SENSOR'   
  CD, INPUT_FOLDER+FIRST_SITE_FOLDER+DL+FIRST_SENSOR
  SEARCH = FILE_SEARCH('Proc_*',/TEST_DIRECTORY)
  NPROC = N_ELEMENTS(SEARCH)
  PROC_SEARCH[0:NPROC-1] =SEARCH
  FIRST_PROC = STRMID(PROC_SEARCH[0],5,STRLEN(PROC_SEARCH[0])-5)

  ;--------------------------
  ; RETURN TO ORIGNAL DIRECTORY
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_DESERT_MAG: RESETTING THE CURRENT DIRECTORY'
  CD, CDIR

;--------------------------
; GET AVAILABLE YEARS

  NYEAR = N_ELEMENTS(YEAR_SEARCH)
  FIRST_YEAR = YEAR_SEARCH[0]

;------------------------------------ 
; GET THE DISPLAY RESOLUTION FOR WIDGET POSITIONING

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_DESERT_MAG: RETRIEVEING SCREEN DIMENSIONS FOR WIDGET' 
  DIMS  = GET_SCREEN_SIZE()
  XSIZE = 340
  YSIZE = 300
  XLOC  = (DIMS[0]/2)-(XSIZE/2)
  YLOC  = (DIMS[1]/2)-(YSIZE/2)
  CFIG_DATA = GET_DIMITRI_CONFIGURATION()

;--------------------------
; BUILD UP THE WIDGET

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_DESERT_MAG: DEFINING THE WIDGET BUTTONS AND FSC FIELDS'

  DHMI_DESERT_MAG_TLB     = WIDGET_BASE(COLUMN=1,TITLE=GET_DIMITRI_LOCATION('TOOL')+': DESERT SIMULATION',XSIZE=XSIZE,XOFFSET=XLOC,YOFFSET=YLOC)
  DHMI_DESERT_MAG_TLB_FRM = WIDGET_BASE(DHMI_DESERT_MAG_TLB, COLUMN=1,FRAME=1)
  DHMI_DESERT_MAG_TLB_PAR = WIDGET_BASE(DHMI_DESERT_MAG_TLB_FRM, ROW=5,/ALIGN_LEFT)

  DHMI_DESERT_MAG_TLB_PAR_LBL = WIDGET_LABEL(DHMI_DESERT_MAG_TLB_PAR,VALUE='SIMULATION PARAMETERS : ')
  DHMI_DESERT_MAG_TLB_PAR_TMP   = WIDGET_LABEL(DHMI_DESERT_MAG_TLB_PAR,VALUE='')
  DHMI_DESERT_MAG_TLB_PAR_TMP   = WIDGET_LABEL(DHMI_DESERT_MAG_TLB_PAR,VALUE='')

  IF WIN_FLAG THEN DHMI_DESERT_MAG_TLB_PAR_VSID  = FSC_FIELD(DHMI_DESERT_MAG_TLB_PAR, TITLE='DESERT SITE NAME   : ', VALUE=FIRST_SITE, OBJECT=VSITE,/NOEDIT) $
    ELSE DHMI_DESERT_MAG_TLB_PAR_VSID  = FSC_FIELD(DHMI_DESERT_MAG_TLB_PAR, TITLE='DESERT SITE NAME : ', VALUE=FIRST_SITE, OBJECT=VSITE,/NOEDIT)
  DHMI_DESERT_MAG_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_DESERT_MAG_TLB_PAR,VALUE='<',UVALUE= 'SITE<',EVENT_PRO='DHMI_DESERT_MAG_CHANGE')
  DHMI_DESERT_MAG_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_DESERT_MAG_TLB_PAR,VALUE='>',UVALUE= 'SITE>',EVENT_PRO='DHMI_DESERT_MAG_CHANGE')  
  
  IF WIN_FLAG THEN DHMI_DESERT_MAG_TLB_PAR_SNID  = FSC_FIELD(DHMI_DESERT_MAG_TLB_PAR, TITLE='SENSOR NAME         : ', VALUE=FIRST_SENSOR, OBJECT=SNAME,/NOEDIT) $
    ELSE DHMI_DESERT_MAG_TLB_PAR_SNID  = FSC_FIELD(DHMI_DESERT_MAG_TLB_PAR, TITLE='SENSOR NAME      : ', VALUE=FIRST_SENSOR, OBJECT=SNAME,/NOEDIT)
  DHMI_DESERT_MAG_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_DESERT_MAG_TLB_PAR,VALUE='<',UVALUE= 'NAME<',EVENT_PRO='DHMI_DESERT_MAG_CHANGE')
  DHMI_DESERT_MAG_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_DESERT_MAG_TLB_PAR,VALUE='>',UVALUE= 'NAME>',EVENT_PRO='DHMI_DESERT_MAG_CHANGE')    

  IF WIN_FLAG THEN DHMI_DESERT_MAG_TLB_PAR_PVID  = FSC_FIELD(DHMI_DESERT_MAG_TLB_PAR, TITLE='PROC VERSION        : ', VALUE=FIRST_PROC, OBJECT=PROCV,/NOEDIT) $
    ELSE DHMI_DESERT_MAG_TLB_PAR_PVID  = FSC_FIELD(DHMI_DESERT_MAG_TLB_PAR, TITLE='PROC VERSION : ', VALUE=FIRST_PROC, OBJECT=PROCV,/NOEDIT)
  DHMI_DESERT_MAG_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_DESERT_MAG_TLB_PAR,VALUE='<',UVALUE= 'PROC<',EVENT_PRO='DHMI_DESERT_MAG_CHANGE')
  DHMI_DESERT_MAG_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_DESERT_MAG_TLB_PAR,VALUE='>',UVALUE= 'PROC>',EVENT_PRO='DHMI_DESERT_MAG_CHANGE')      

  IF WIN_FLAG THEN DHMI_DESERT_MAG_TLB_PAR_YEAR  = FSC_FIELD(DHMI_DESERT_MAG_TLB_PAR, TITLE='YEAR                         : ', VALUE=FIRST_YEAR, OBJECT=YEARV,/NOEDIT) $
    ELSE DHMI_DESERT_MAG_TLB_PAR_YEAR  = FSC_FIELD(DHMI_DESERT_MAG_TLB_PAR, TITLE='YEAR :         ', VALUE=FIRST_YEAR, OBJECT=YEARV,/NOEDIT)
  DHMI_DESERT_MAG_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_DESERT_MAG_TLB_PAR,VALUE='<',UVALUE= 'YEAR<',EVENT_PRO='DHMI_DESERT_MAG_CHANGE')
  DHMI_DESERT_MAG_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_DESERT_MAG_TLB_PAR,VALUE='>',UVALUE= 'YEAR>',EVENT_PRO='DHMI_DESERT_MAG_CHANGE')
  
  DHMI_DESERT_MAG_TLB_BTM = WIDGET_BASE(DHMI_DESERT_MAG_TLB, ROW=1,/ALIGN_RIGHT)  
  
  DHMI_DESERT_MAG_TLB_BTM_BTN   = WIDGET_BUTTON(DHMI_DESERT_MAG_TLB_BTM,VALUE='PROCESS',UVALUE='PROCESS',EVENT_PRO='DHMI_DESERT_MAG_PROCESS')
  DHMI_DESERT_MAG_TLB_BTM_BTN   = WIDGET_BUTTON(DHMI_DESERT_MAG_TLB_BTM,VALUE='CLOSE',EVENT_PRO='DHMI_DESERT_MAG_EXIT')

;--------------------------
; STORE IMPORTANT INFORMATION IN A STRUCTURE
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_DESERT_MAG: STORING ALL INFORMATION FOR WIDGET'  
  DHMI_DESERT_MAG_INFO = {                                  $
                      DIMS          : DIMS              ,$
                      CDIR          : CDIR              ,$
                      INPUT_FOLDER  : INPUT_FOLDER      ,$
                      DL            : DL                ,$
                      VSITE         : VSITE             ,$
                      SNAME         : SNAME             ,$
                      PROCV         : PROCV             ,$
                      YEARV         : YEARV             ,$
                      YIDX          : 0                 ,$
                      VIDX          : 0                 ,$
                      SIDX          : 0                 ,$
                      PIDX          : 0                 ,$
                      MAX_COLOUR    : 40                ,$
                      NSENS         : NSENS             ,$
                      NPROC         : NPROC             ,$
                      NYEAR         : NYEAR             ,$
                      YEAR_SEARCH   : YEAR_SEARCH       ,$
                      SITE_SEARCH   : SITE_SEARCH       ,$
                      SENS_SEARCH   : SENS_SEARCH       ,$
                      PROC_SEARCH   : PROC_SEARCH       ,$
                      IVERBOSE      : IVERBOSE          $
                      }
;--------------------------
; REALISE THE WIDGET AND REGISTER 
; WITH THE X-MANAGER

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_DESERT_MAG: REALISING THE WIDGET AND REGISTERING WITH THE XMANAGER'  
  IF N_ELEMENTS(GROUP_LEADER) GT 0 THEN $  
    WIDGET_CONTROL, DHMI_DESERT_MAG_TLB, /REALIZE,GROUP_LEADER=GROUP_LEADER,SET_UVALUE=DHMI_DESERT_MAG_INFO, /NO_COPY  $
      ELSE WIDGET_CONTROL, DHMI_DESERT_MAG_TLB, /REALIZE,SET_UVALUE=DHMI_DESERT_MAG_INFO,/NO_COPY
  
  XMANAGER,'DHMI_DESERT_MAG', DHMI_DESERT_MAG_TLB
  
  
 
END 