;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      VGT_SIMULATION    
;* 
;* PURPOSE:
;*      THIS FUNCTION COMPUTES SIMULATED TOA RHO AT THE VEGETATION WAVEBANDS GIVEN BRDF 
;*      MODELS DERIVED FOR BOTH MERIS AND AATSR AS THE REFERENCE SENSORS
;*
;* CALLING SEQUENCE:
;*      RES = VGT_SIMULATION(OUTPUT_FOLDER,SL_REGION,VGT_PROC_VER,MER_PROC_VER,ATS_PROC_VER,$
;*                           CLOUD_PERCENTAGE,ROI_PERCENTAGE,BRDF_BIN_PERIOD,$
;*                           VZAMIN,VZAMAX,VAAMIN,VAAMAX,SZAMIN,SZAMAX,SAAMIN,SAAMAX)
;* 
;* INPUTS:
;*      OUTPUT_FOLDER     - THE FULL PATH OF THE OUTPUT FOLDER REQUIRED
;*      SL_REGION         - A STRING OF THE DIMITRI VALIDATION SITE
;*      VGT_PROC_VER      - A STRING OF THE VEGETATION PROCESSING VERSION TO BE UTILISED
;*      MER_PROC_VER      - A STRING OF THE MERIS PROCESSING VERSION TO BE UTILISED
;*      ATS_PROC_VER      - A STRING OF THE AATSR PROCESSING VERSION TO BE UTILISED
;*      CLOUD_PERCENTAGE  - A FLOAT OF THE ACCEPTABLE AUTOMATED CLOUD COVERAGE PERCENTAGE (0-100)
;*      ROI_PERCENTAGE    - A FLOAT OF THE ACCEPTABLE ROI COVERAGE PERCENTAGE (0-100)
;*      BRDF_BIN_PERIOD   - AN INTEGER OF THE BINNING PERIOD TO BE CONSIDERED IN DAYS
;*      VZAMIN            - THE MINIMUM VIEWING ZENITH ANGLE ALLOWED FOR A VGT OBSERVATION
;*      VZAMAX            - THE MAXIMUM VIEWING ZENITH ANGLE ALLOWED FOR A VGT OBSERVATION
;*      VAAMIN            - THE MINIMUM VIEWING AZIMUTH ANGLE ALLOWED FOR A VGT OBSERVATION
;*      VAAMAX            - THE MAXIMUM VIEWING AZIMUTH ANGLE ALLOWED FOR A VGT OBSERVATION
;*      SZAMIN            - THE MINIMUM SOLAR ZENITH ANGLE ALLOWED FOR A VGT OBSERVATION
;*      SZAMAX            - THE MAXIMUM SOLAR ZENITH ANGLE ALLOWED FOR A VGT OBSERVATION
;*      SAAMIN            - THE MINIMUM SOLAR AZIMUTH ANGLE ALLOWED FOR A VGT OBSERVATION
;*      SAAMAX            - THE MAXIMUM SOLAR AZIMTUH ANGLE ALLOWED FOR A VGT OBSERVATION
;*
;* KEYWORDS:
;*      VERBOSE  - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS   - 1: NOMINAL OUTPUT, 0 OR -1 ERROR ENCOUNTERED
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      20 APR 2011 - C KENT   - DIMITRI-2 V1.0
;*      30 JUN 2011 - C KENT   - UPDATED CLOUD SCREENING TO CHECK FOR SUSPECT PRODUCTS
;*      04 JUL 2011 - C KENT   - UPDATED INTERNAL SAVS TO INCLUDE AUX INFO FROM L1B
;*      07 JUL 2011 - C KENT   - ADDED PLOT LEGEND, UPDATED CODE TO REFLECT NEW AUX INFO IN SAVS
;*      21 SEP 2011 - C KENT   - MINOR BUG FIXES AND ADDITION OF AATSR AND ANGLE FLAGS
;*      04 OCT 2011 - C KENT   - UPDATED TRANSMISSION COMPUTATION AND USAGE
;*      25 OCT 2011 - C KENT   - ADDED VGT ABSOLUTE ANGLE CRITERIA, BUG FIXED AATSR 1.6 MICRON, 
;*                               AND REOMVED AATSR REQUIREMENTS FOR PROCESSING
;*	07 DEC 2011 - C KENT   - ADDED CHECK ON VGT DATA AND REMOVED OUTPUT OF MERIS MISSING DATA
;*      11 JAN 2012 - C KENT   - ADDED CEOS IVOS SADE FILE HANDLING
;*      17 JAN 2012 - C KENT   - UPDATED SADE FILE PROCESSING
;*      09 MAR 2012 - C KENT   - ADDED ROI COVER CHECK AND DATABASE TIME MATCH +- 20 MINS
;*
;* VALIDATION HISTORY:
;*      
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION VGT_SIMULATION,SL_REGION,MER_FOLDER,MER_PROC_VER,ATS_FOLDER,ATS_PROC_VER,VGT_PROC_VER,$
                          CLOUD_PERCENTAGE,ROI_PERCENTAGE,BRDF_BIN_PERIOD,$
                          VZAMIN,VZAMAX,VAAMIN,VAAMAX,SZAMIN,SZAMAX,SAAMIN,SAAMAX,$                          
                          VERBOSE=VERBOSE,VGT_SADE=VGT_SADE

;-----------------------------------------
; CHECK OUTPUT_FOLDER EXISTS - ONLY FOR MERIS
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: STARTING SIMULATION'
  RES = FILE_TEST(MER_FOLDER);+FILE_TEST(ATS_FOLDER)
  IF RES NE 1 THEN BEGIN
    PRINT,"VGT_SIMULATION: DATA FOLDERS DOESN'T EXIST"
    RETURN,-1
  ENDIF

;-----------------------------------------
; DEFINE SENSOR NAMES AND GET NUMBER OF SENSOR BANDS
  
  VGT_SENSOR = 'VEGETATION'
  MER_SENSOR = 'MERIS'
  ATS_SENSOR = 'AATSR'
  
  TEMP = SENSOR_BAND_INFO(MER_SENSOR)
  NB_BANDS_MERIS  = TEMP[0]
  TEMP = SENSOR_BAND_INFO(ATS_SENSOR)
  NB_BANDS_AATSR  = TEMP[0]
  TEMP = SENSOR_BAND_INFO(VGT_SENSOR)
  NB_BANDS_VGT    = TEMP[0]
  
  MER_WL = [412.,443.,490.,510.,560.,620.,665.,681.,708.,753.,761.,785.,865.,885.,900.]
  ATS_WL = [1600.]
  VGT_WL = [450.,645.,835.,1665.]

;-----------------------------------------  
; GET AUX FILENAMES AND FOLDERS

  IF ATS_PROC_VER EQ 'N/A' THEN BEGIN
  ATS_FOLDER='NA'
  ATS_PROC_VER='NA'
  ENDIF

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: DEFINING FOLDER AND FILE NAMES'
  DL            = GET_DIMITRI_LOCATION('DL')
  MAIN_DIRC     = GET_DIMITRI_LOCATION('DIMITRI')
  SITE_FILE     = GET_DIMITRI_LOCATION('SITE_DATA')
  DB_FILE       = GET_DIMITRI_LOCATION('DATABASE')
  SR_FOLDER     = GET_DIMITRI_LOCATION('RSR')
  CFIG_DATA     = GET_DIMITRI_CONFIGURATION()

  A1_FOLDER     = STRING(ATS_FOLDER+DL+'RECALIBRATION'+DL)
  A2_FOLDER     = STRING(ATS_FOLDER+DL+'ROUJEAN_BRDF'+DL)
  M1_FOLDER     = STRING(MER_FOLDER+DL+'RECALIBRATION'+DL)
  M2_FOLDER     = STRING(MER_FOLDER+DL+'ROUJEAN_BRDF'+DL)
  SL_FOLDER     = STRING(MER_FOLDER+DL+'VGT_SIMULATION'+DL)
  pt_FOLDER     = STRING(SL_FOLDER+'PLOTS'+DL)
  IN_FOLDER     = STRING(MAIN_DIRC+'Input'+DL+'Site_'  +SL_REGION+DL+VGT_SENSOR+DL+'Proc_'+VGT_PROC_VER+DL)

  VGT_IFILE     = STRING(IN_FOLDER+       VGT_SENSOR+'_TOA_REF.dat')
  MER_IFILE     = STRING(M1_FOLDER+       'RECAL_REF_' +sl_REGION+'_'+MER_SENSOR+'_'+MER_PROC_VER+'.dat')
  ATS_IFILE     = STRING(A1_FOLDER+       'RECAL_REF_' +sl_REGION+'_'+ATS_SENSOR+'_'+ATS_PROC_VER+'.dat')
  MER_BRDF1     = STRING(M2_FOLDER+       'ROUJEAN_K1_'+SL_REGION+'_REF_'+MER_SENSOR+'_'+MER_PROC_VER+'.dat')
  MER_BRDF2     = STRING(M2_FOLDER+       'ROUJEAN_K2_'+SL_REGION+'_REF_'+MER_SENSOR+'_'+MER_PROC_VER+'.dat')
  MER_BRDF3     = STRING(M2_FOLDER+       'ROUJEAN_K3_'+SL_REGION+'_REF_'+MER_SENSOR+'_'+MER_PROC_VER+'.dat')
  MER_UCERT     = STRING(M2_FOLDER+       'ROUJEAN_UC_'+SL_REGION+'_REF_'+MER_SENSOR+'_'+MER_PROC_VER+'.dat')
  ATS_BRDF1     = STRING(A2_FOLDER+       'ROUJEAN_K1_'+SL_REGION+'_REF_'+ATS_SENSOR+'_'+ATS_PROC_VER+'.dat')
  ATS_BRDF2     = STRING(A2_FOLDER+       'ROUJEAN_K2_'+SL_REGION+'_REF_'+ATS_SENSOR+'_'+ATS_PROC_VER+'.dat')
  ATS_BRDF3     = STRING(A2_FOLDER+       'ROUJEAN_K3_'+SL_REGION+'_REF_'+ATS_SENSOR+'_'+ATS_PROC_VER+'.dat')
  ATS_UCERT     = STRING(A2_FOLDER+       'ROUJEAN_UC_'+SL_REGION+'_REF_'+ATS_SENSOR+'_'+ATS_PROC_VER+'.dat')
  OUTPUT_VGT_SIM= STRING(SL_FOLDER+       SL_REGION+'_'+VGT_SENSOR+'_'+VGT_PROC_VER+'_SIM.DAT')
  OUTPUT_VGT    = STRING(SL_FOLDER+       SL_REGION+'_'+VGT_SENSOR+'_'+VGT_PROC_VER+'.DAT')
  OUTPUT_CSV    = STRING(MER_FOLDER+DL+'SIM_'+SL_REGION+'_'+VGT_SENSOR+'_'+VGT_PROC_VER+'.CSV')
  output_VGT_UCT= STRING(SL_FOLDER+       SL_REGION+'_'+VGT_SENSOR+'_'+VGT_PROC_VER+'_UCT.DAT')
  PLOT_BASE     = STRING(PT_FOLDER+       SL_REGION+'_REF_'+MER_SENSOR+'_'+MER_PROC_VER+'_'+ATS_SENSOR+'_'+ATS_PROC_VER+'_RHO_SPECTRA_')

;--------------------------------
; CREATE SIMULATION FOLDER IF IT DOESN'T EXIST

  RES = FILE_INFO(SL_FOLDER)
  IF RES.EXISTS NE 1 OR RES.DIRECTORY NE 1 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT,"VGT_SIMULATION: OUTPUT FOLDER DOESN'T EXIST, CREATING"
    FILE_MKDIR,SL_FOLDER 
  ENDIF
  
;--------------------------------
; CREATE PLOT FOLDER IF IT DOESN'T EXIST

  RES = FILE_INFO(PT_FOLDER)
  IF RES.EXISTS NE 1 OR RES.DIRECTORY NE 1 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT,"VGT_SIMULATION: PLOT FOLDER DOESN'T EXIST, CREATING"
    FILE_MKDIR,PT_FOLDER 
  ENDIF

  IF KEYWORD_SET(VGT_SADE) THEN VGT_IFILE = VGT_SADE

;--------------------------------
; CHECK REQUIRED PRODUCTS ARE AVAILABLE

  TEMP = [FILE_TEST(VGT_IFILE), $
          FILE_TEST(MER_IFILE), $
          ;FILE_TEST(ATS_IFILE), $
          FILE_TEST(MER_BRDF1), $
          FILE_TEST(MER_BRDF2), $
          FILE_TEST(MER_BRDF3), $
          FILE_TEST(MER_UCERT)];, $
          ;FILE_TEST(ATS_BRDF1), $
          ;FILE_TEST(ATS_BRDF2), $
          ;FILE_TEST(ATS_BRDF3), $
          ;FILE_TEST(ATS_UCERT) ]
  IF TOTAL(TEMP) NE N_ELEMENTS(TEMP) THEN BEGIN
    PRINT, 'VGT_SIMULATION: ERROR, NOT ALL REQUIRED FILES EXIST'
    RETURN,-1
  ENDIF

;----------------------------------------    
; RESTORE DATA

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: RESTORING DATA'
  
  IF NOT KEYWORD_SET(VGT_SADE) then begin
  RESTORE,VGT_IFILE 
    VGT_DATA = SENSOR_L1B_REF
  endif
  
  RESTORE,MER_IFILE
    MER_DATA = GD_REF_DATA
  RESTORE,MER_BRDF1
    MER_K1 = K1_ROUJEAN
  RESTORE,MER_BRDF2
    MER_K2 = K2_ROUJEAN
  RESTORE,MER_BRDF3
    MER_K3 = K3_ROUJEAN
  RESTORE,MER_UCERT
    MER_UC = BRDF_UCERT

  IF NOT FILE_TEST(ATS_IFILE) OR NOT FILE_TEST(ATS_BRDF1) THEN ATS_PROC_VER='NA'
  IF ATS_PROC_VER NE 'NA' THEN BEGIN
    RESTORE,ATS_IFILE
      ATS_DATA = GD_REF_DATA
    RESTORE,ATS_BRDF1
      ATS_K1 = K1_ROUJEAN
    RESTORE,ATS_BRDF2
      ATS_K2 = K2_ROUJEAN
    RESTORE,ATS_BRDF3
      ATS_K3 = K3_ROUJEAN
    RESTORE,ATS_UCERT
      ATS_UC = BRDF_UCERT
  ENDIF ELSE BEGIN
    ATS_DATA = [0.,0.] & ATS_K1 = [0.,0.] & ATS_K2 = [0.,0.] & ATS_K3 = [0.,0.] & ATS_UC = [0.,0.]
  ENDELSE
    
  K1_ROUJEAN = 0
  K2_ROUJEAN = 0
  K3_ROUJEAN = 0
  BRDF_UCERT = 0
    
;-----------------------------------------
; DEFINE NON REFLECTANCE BAND OFFSETS

  NUM_NON_REF  = 5+12 ;(TIME, ANGLES (4) AND AUX INFO (12)
  NUM_NON_ROU  = 2
  NUM_NON_UCT  = 9
  ATS_1600_ID  = 3
  NON_REF_NAMES = ['VZA','VAA','SZA','SAA','OZONE_MU','OZONE_SD','PRESSURE_MU','PRESSURE_SD','HUMIDITY_MU','HUMIDITY_SD',$
  'WIND_ZONAL_MU','WIND_ZONAL_SD','WIND_MERID_MU','WIND_MERID_SD','WVAP_MU','WVAP_SD']
  
;-----------------------------------------
; DEFINE UNCERTAINTY VALUES

  VGT_UCT_S = 0.03
  VGT_UCT_R = 0.03
  EDB_UCT_R = SQRT(0.03^2+0.03^2)
  SIM_UCT_S = 0.05
  SIM_UCT_R = 0.10

;-----------------------------------------
; CHECKS OFFSET AND PERCENTAGES ARE OK

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: CHECKING CLOUD AND ROI PERCENTAGES'
  CP_LIMIT     = FLOAT(CLOUD_PERCENTAGE)*.01
  RP_LIMIT     = FLOAT(ROI_PERCENTAGE)*.01

  IF  CP_LIMIT  GT 1.0 OR CP_LIMIT  LT 0.0 OR $
      RP_LIMIT  GT 1.0 OR RP_LIMIT  LT 0.0 THEN BEGIN
    PRINT, 'VGT_SIMULATION: ERROR, CLOUD/ROI PERCENTAGES OUT OF RANGE'
    RETURN,-1
  ENDIF
  
;-----------------------------------------
; COMPUTE ROI AREA IN KM^2

  IF KEYWORD_SET(VGT_SADE) THEN GOTO, SM_VGT_IN
  ICOORDS = GET_SITE_COORDINATES(SL_REGION,SITE_FILE,VERBOSE=VERBOSE)
  IF ICOORDS[0] EQ -1 THEN BEGIN
    PRINT,'VGT_SIMULATION: ERROR, REGION COORDINATES NOT FOUND'
    RETURN,-1
  ENDIF
  
  ROI_X     = GREAT_CIRCLE_DISTANCE(ICOORDS[0],ICOORDS[2],ICOORDS[0],ICOORDS[3],/DEGREES,VERBOSE=VERBOSE)
  ROI_Y     = GREAT_CIRCLE_DISTANCE(ICOORDS[0],ICOORDS[2],ICOORDS[1],ICOORDS[2],/DEGREES,VERBOSE=VERBOSE)
  ROI_AREA  = FLOAT(ROI_X)*FLOAT(ROI_Y)
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: COMPUTED ROI AREA = ',ROI_AREA

;-----------------------------------------
; GET PIXEL AREA RESOLUTIONS FOR VGT

  SPX_AREA = SENSOR_PIXEL_SIZE(VGT_SENSOR,/AREA,VERBOSE=VERBOSE)
  PX_THRESH  = DOUBLE(RP_LIMIT*ROI_AREA)/DOUBLE(SPX_AREA)
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: COMPUTED PX_THRESHOLDS = ',PX_THRESH  

;-----------------------------------------
; ROICOVERAGE CHECK

  IF RP_LIMIT GE 1.0 THEN BEGIN
    ROICOVER = 1
    PX_THRESH[*] = 1  
  ENDIF ELSE ROICOVER = 0

;----------------------------------------
; READ THE DIMITRI DATABASE

  TEMP = FILE_INFO(DB_FILE)
  IF TEMP.EXISTS EQ 0 THEN BEGIN
    PRINT, 'VGT_SIMULATION: ERROR, DIMITRI DATABASE FILE DOES NOT EXIST'
    RETURN,-1
  ENDIF
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: READING DIMITRI DATABASE'
  DB_TEMPLATE = GET_DIMITRI_TEMPLATE(1,/TEMPLATE)
  DB_DATA     = READ_ASCII(DB_FILE,TEMPLATE=DB_TEMPLATE)  

;----------------------------------------  
; FIND USABLE VGT DATA 
  
  RES = WHERE(STRCMP(DB_DATA.REGION,SL_REGION)                  EQ 1 AND $
                STRCMP(DB_DATA.SENSOR,VGT_SENSOR)               EQ 1 AND $
                STRCMP(DB_DATA.PROCESSING_VERSION,VGT_PROC_VER) EQ 1 AND $
                DB_DATA.ROI_COVER  GE ROICOVER                       AND $
                DB_DATA.NUM_ROI_PX GE PX_THRESH[0])

  IF RES[0] EQ -1 THEN BEGIN
    PRINT, 'VGT_SIMULATION: ERROR, NO SENSOR DATA FOUND WITHIN PIXEL THRESHOLD'  
    RETURN,-1
  ENDIF

;----------------------------------------
; GET A LIST OF DATES IN WHICH DATA IS ALSO 
; WITHIN THE CLOUD PERCENTAGE 

  GD_DATE = 0.0
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: STARTING LOOP OVER GOOD DATES FOR CLOUD PERCENTAGE'  
  FOR CPI=0l,N_ELEMENTS(RES)-1 DO BEGIN

     IF DB_DATA.MANUAL_CS[RES[CPI]] GE 1.0 THEN CONTINUE
     IF DB_DATA.MANUAL_CS[RES[CPI]] EQ 0.0 THEN BEGIN
        GD_DATE = [GD_DATE,DB_DATA.DECIMAL_YEAR[RES[CPI]]]
        CONTINUE
     ENDIF 
      
    ;---------------------
    ; IF AUTO_CS IS LESS THAN PERCENTAGE BUT GREATER THAN -1.0 STORE DECIMAL DATE 
      
    IF DB_DATA.AUTO_CS[RES[CPI]] LE CP_LIMIT AND DB_DATA.AUTO_CS[RES[CPI]] GT -1.0 THEN $
      GD_DATE = [GD_DATE,DB_DATA.DECIMAL_YEAR[RES[CPI]]]

  ENDFOR;END OF LOOP ON GOOD DATES

  IF N_ELEMENTS(GD_DATE) EQ 1 THEN BEGIN
     PRINT, 'VGT_SIMULATION: ERROR, NO SENSOR DATA FOUND WITHIN CLOUD THRESHOLD'
     RETURN,-1
  ENDIF

;---------------------------------------
; EXTRACT GOOD DECIMAL DATES AND CORRESPONDING 
; INDEX IN ALL DATA VARIABLE    
  
  GD_DATE = GD_DATE[1:N_ELEMENTS(GD_DATE)-1]
  GD_IDX = MAKE_ARRAY(N_ELEMENTS(VGT_DATA[0,*]),/INTEGER,VALUE=0)
       
  TOL=0.00004
  FOR GD=0l,N_ELEMENTS(GD_DATE)-1 DO BEGIN
    RES = WHERE(  ABS(VGT_DATA[0,*]-GD_DATE[GD]) LE TOL AND $
                  VGT_DATA[NUM_NON_REF,*] GT 0.0        AND $
                  VGT_DATA[NUM_NON_REF,*] LT 5.0        AND $
                  VGT_DATA[1,*] GT VZAMIN               AND $
                  VGT_DATA[1,*] LT VZAMAX               AND $
                  VGT_DATA[2,*] GT VAAMIN               AND $
                  VGT_DATA[2,*] LT VAAMAX               AND $                
                  VGT_DATA[3,*] GT SZAMIN               AND $
                  VGT_DATA[3,*] LT SZAMAX               AND $
                  VGT_DATA[4,*] GT SAAMIN               AND $
                  VGT_DATA[4,*] LT SAAMAX               )                
                  
    IF RES[0] GT -1 THEN GD_IDX[RES]=1
  ENDFOR ;END OF LOOP ON GOOD DATES TO FIND INDEX IN ALL_DATA ARRAY

;---------------------------------------
; DEFINE FINAL VARIABLES WHICH CONTAIN THE 
; ACCEPTABLE DATA

  RES = WHERE(GD_IDX EQ 1)
  IF RES[0] GT -1 THEN GD_VGT_DATA = VGT_DATA[*,RES]$
  ELSE BEGIN
    PRINT, 'VGT_SIMULATION: ERROR DURING DOUBLET EXTRACTION, NO GOOD DATES FOUND FOR SENSOR ',VGT_SENSOR
    RETURN,-1
  ENDELSE
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: COMPLETED LOOP ON GOOD DATES FOR CLOUD TESTING'

;----------------------------------------
; CEOS IVOS SADE INPUT FILES
  
  SM_VGT_IN:
  IF KEYWORD_SET(VGT_SADE) THEN BEGIN
    SENSOR_TOA_REF = CONVERT_SADE_TO_DIMITRI(VGT_SADE,VGT_SENSOR)
    RES = WHERE(SENSOR_TOA_REF[1,*] GT VZAMIN              AND $
                SENSOR_TOA_REF[1,*] LT VZAMAX              AND $
                SENSOR_TOA_REF[2,*] GT VAAMIN              AND $
                SENSOR_TOA_REF[2,*] LT VAAMAX              AND $                
                SENSOR_TOA_REF[3,*] GT SZAMIN              AND $
                SENSOR_TOA_REF[3,*] LT SZAMAX              AND $
                SENSOR_TOA_REF[4,*] GT SAAMIN              AND $
                SENSOR_TOA_REF[4,*] LT SAAMAX              ,COUNT)
    IF COUNT GT 0 THEN SENSOR_TOA_REF=SENSOR_TOA_REF[*,RES]

    IDX = WHERE(SENSOR_TOA_REF[0,*] GT 0.)
    IF N_ELEMENTS(IDX) LT 2 THEN BEGIN
      PRINT,'ERROR NO MATCHING SADE DATA FOR ANGLE CRITERA'
      RETURN,-3
    ENDIF
    GD_VGT_DATA = SENSOR_TOA_REF[*,idx] 
    SENSOR_TOA_REF = 0 
  ENDIF

  NB_DATES  = N_ELEMENTS(GD_VGT_DATA[0,*])
  MER_ROUJ  = MAKE_ARRAY(/FLOAT,NB_BANDS_MERIS,3,VALUE=-999.0)
  ATS_ROUJ  = MAKE_ARRAY(/FLOAT,3,VALUE=-999.0)
  MER_RHO   = MAKE_ARRAY(/FLOAT,NB_BANDS_MERIS,VALUE=0.0)
  SIMU_VGT  = MAKE_ARRAY(/FLOAT,NB_DATES,NUM_NON_REF+NB_BANDS_VGT+2,VALUE=0.0)
  SIMU_VGT_UCT= MAKE_ARRAY(/FLOAT,NB_DATES,1+2*NB_BANDS_VGT,VALUE=0.0)

;---------------------------------------
; DEFINE WAVELENGTH ARRAYS AND INTERPOLATE 
; O3,WV AND 02 SPECTRUMS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: DEFINING OUTPUT WAVELENGTH ARRAYS'    
  WL_RANGE      = [400.,2000.0]
  WL_STEP       = 0.5
  NWL           = (WL_RANGE[1] - WL_RANGE[0])/WL_STEP
  WAVELENGTHS   = (WL_STEP*FINDGEN(NWL))+WL_RANGE[0]
  RSR_TEMPLATE  = GET_DIMITRI_RSR_TEMPLATE()
  RSR_DATA      = FLTARR(NWL,NB_BANDS_MERIS+1)
  VGT_RSR_DATA  = FLTARR(NWL,NB_BANDS_VGT)
  
  TO3 = GET_OZONE_TRANSMISSION(WAVELENGTHS,VERBOSE=VERBOSE)
  TWV = GET_WVAP_TRANSMISSION(WAVELENGTHS,VERBOSE=VERBOSE)
  TGS = GET_GASEOUS_TRANSMISSION(WAVELENGTHS,VERBOSE=VERBOSE)

  REF_O3    = 300.0
  REF_WV    = 2.0
  TGAS      = -0.5*ALOG(TGS)
  TWVAP     = -0.5*ALOG((TWV>0.000001)/TGS)
  TOZONE    = -0.5*ALOG((TO3>0.000001)/TGS)

;------------------------------------------------
; SETUP WINDOW PROPERTIES

  MACHINE_WINDOW = !D.NAME
  YMIN = 0.
  YMAX = 1.
  SET_PLOT, 'Z'
  DEVICE, SET_RESOLUTION=[CFIG_DATA.(1)[0],CFIG_DATA.(1)[1]],SET_PIXEL_DEPTH=24
  DEVICE, DECOMPOSED = 0
  ERASE  
  LOADCT, 39

;-------------------------------
; GET SENSOR RSR DATA

  FOR ISENS = 0,2 DO BEGIN
    CASE ISENS OF
      0:RSR_SENSOR = MER_SENSOR
      1:RSR_SENSOR = ATS_SENSOR
      2:RSR_SENSOR = VGT_SENSOR
    ENDCASE
  
    TMP_BANDS = SENSOR_BAND_INFO(RSR_SENSOR)
    TMP_BANDS = TMP_BANDS[0]
  
    FOR IRSR = 0,TMP_BANDS-1 DO BEGIN
        RES = FILE_SEARCH(SR_FOLDER+RSR_SENSOR+DL+'RSR_'+RSR_SENSOR+'_BAND_'+STRTRIM(STRING(IRSR),2)+'.txt')
        IF STRCMP(RES[0],'') NE 1 THEN BEGIN
          TEMP = READ_ASCII(RES[0],TEMPLATE = RSR_TEMPLATE)
        
          CASE ISENS OF
          0:RSR_DATA[*,IRSR]= EXTRACT_DIMITRI_RSR(TEMP,WAVELENGTHS)
          1:BEGIN
              IF IRSR EQ ATS_1600_ID THEN RSR_DATA[*,NB_BANDS_MERIS] = EXTRACT_DIMITRI_RSR(TEMP,WAVELENGTHS)
            END
          2:VGT_RSR_DATA[*,IRSR] = EXTRACT_DIMITRI_RSR(TEMP,WAVELENGTHS)
          ENDCASE
        ENDIF ELSE BEGIN
          PRINT, 'VGT_SIMULATION: ERROR, RSR FILE NOT FOUND'
          RETURN,-1
        ENDELSE
    ENDFOR
  ENDFOR

;---------------------------------------
; LOOP OVER EACH VGT DATE 

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: STARTING LOOP ON VEGETATION ACQUISITIONS'
  FOR IDX=0,NB_DATES-1 DO BEGIN
    AATSR_VALID = 0
    ANGLE_VALID = 0

;---------------------------------------
;   FIND ASSOCIATED BRDF BINS

    VGT_DATE = GD_VGT_DATA[0,IDX]
    SIMU_VGT[IDX,0:NUM_NON_REF-1] =GD_VGT_DATA[0:NUM_NON_REF-1,IDX]
    SIMU_VGT_UCT[IDX,0] = GD_VGT_DATA[0,IDX]

    P1 = MIN(ABS(VGT_DATE-MER_K1[0,*]))
    IF P1 GT BRDF_BIN_PERIOD/365.0 THEN BEGIN
      IF KEYWORD_SET(VERBOSE) THEN $
        PRINT,'VGT_SIMULATION: ERROR, NO MERIS BINS NEAR VGT DATE, CLOSEST BIN IS ',STRTRIM(STRING(P1*365.0,FORMAT='(F7.2)'),2),' DAYS AWAY'
      GOTO,NEXT_VGT_DATE
    ENDIF

    MER_TEMP_BINS = WHERE(ABS(VGT_DATE-MER_K1[0,*]) EQ P1,COUNT)
    IF COUNT EQ 0 THEN GOTO,NEXT_VGT_DATE
    BIN_START = MER_K1[0,MER_TEMP_BINS[0]]-0.5*BRDF_BIN_PERIOD/365.0
    BIN_END   = MER_K1[0,MER_TEMP_BINS[0]]+0.5*BRDF_BIN_PERIOD/365.0

;----------------------------------------    
; COMPUTE THE DATE
      
    YEAR = FLOOR(VGT_DATE)
    DOY = (VGT_DATE-FLOAT(YEAR))*365.0
    JDAY = JULDAY(1,1,YEAR)
    JDAY = JDAY+DOY
    CALDAT,JDAY,TMONTH,TDAY,TYEAR
    IF TDAY LT 10 THEN   TDAY    = '0'+STRTRIM(STRING(TDAY),2)   ELSE TDAY   = STRTRIM(STRING(TDAY),2) 
    IF TMONTH LT 10 THEN TMONTH  = '0'+STRTRIM(STRING(TMONTH),2) ELSE TMONTH = STRTRIM(STRING(TMONTH),2)
    TYEAR = STRTRIM(STRING(TYEAR),2)
    TDATE = STRING(TYEAR+TMONTH+TDAY)

;---------------------------------------
; STORE ROUJEAN COEFICIENTS FROM BIN

    MER_ROUJ[*,0] = MER_K1[NUM_NON_ROU:NUM_NON_ROU+NB_BANDS_MERIS-1,MER_TEMP_BINS[0]]
    MER_ROUJ[*,1] = MER_K2[NUM_NON_ROU:NUM_NON_ROU+NB_BANDS_MERIS-1,MER_TEMP_BINS[0]]  
    MER_ROUJ[*,2] = MER_K3[NUM_NON_ROU:NUM_NON_ROU+NB_BANDS_MERIS-1,MER_TEMP_BINS[0]]

;---------------------------------------
; CREATE ARRAYS FOR SIMULATION UNCERTAINTIES

    RATIO_UCT_S = MAKE_ARRAY(NB_BANDS_MERIS+1,/FLOAT)
    RATIO_UCT_S[0] = MER_UC[0,MER_TEMP_BINS[0]]
    RATIO_UCT_S[1:NB_BANDS_MERIS] = MER_UC[NUM_NON_UCT:NUM_NON_UCT+NB_BANDS_MERIS-1,MER_TEMP_BINS[0]]
    RATIO_UCT_R = MAKE_ARRAY(NB_BANDS_MERIS+1,/FLOAT)
    RATIO_UCT_R[0] = MER_UC[0,MER_TEMP_BINS[0]]
    RATIO_UCT_R[1:NB_BANDS_MERIS] = MER_UC[NUM_NON_UCT+NB_BANDS_MERIS:NUM_NON_UCT+2*NB_BANDS_MERIS-1,MER_TEMP_BINS[0]]

;--------------------------------------- 
; FIND INDEXES OF GOOD BANDS WITH BRDF MODELS

    IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: SEARCHING FOR GOOD/BAD ROUJEAN COEFICIENTS'
    GOOD_BRDF_BANDS = WHERE(MER_ROUJ[*,0] gt -999.0,NB_BANDS_GOOD)
    BAD_BRDF_BANDS  = WHERE(MER_ROUJ[*,0] le -999.0,NB_BANDS_BAD)
    IF NB_BANDS_GOOD  EQ 0 THEN GOTO,NEXT_VGT_DATE
    IF NB_BANDS_BAD   EQ 0 THEN GOTO,SKIP_BRDF_RATIOS
    GOOD_LAMBDA = INTARR(NB_BANDS_GOOD)

;---------------------------------------   
; GET WAVELENGTHS OF GOOD BANDS
  
    FOR TBAND=0,NB_BANDS_GOOD-1 DO GOOD_LAMBDA[TBAND] = FIX(CONVERT_INDEX_TO_WAVELENGTH(GOOD_BRDF_BANDS[TBAND],MER_SENSOR))

;---------------------------------------   
; LOOP OVER EACH NON-BRDF MODEL BAND, FIND RATIO 
; TO NEXT CLOSEST GOOD BAND AND USE THE BRDF PARAMETERS
 
    FOR TBAND=0,NB_BANDS_BAD-1 DO BEGIN
      BAD_LAMBDA = FIX(CONVERT_INDEX_TO_WAVELENGTH(BAD_BRDF_BANDS[TBAND],MER_SENSOR))
      P1 = min(ABS(BAD_LAMBDA[0]-GOOD_LAMBDA))
      GOOD_ID = WHERE(ABS(BAD_LAMBDA[0]-GOOD_LAMBDA) EQ P1)
      GOOD_ID = GOOD_BRDF_BANDS[GOOD_ID[0]]
  
;---------------------------------------  
; FIND MERIS ACQUISITIONS WITHIN BIN RANGE
    
      RES = WHERE(MER_DATA[0,*] GE BIN_START AND MER_DATA[0,*] LE BIN_END,COUNT)
      IF COUNT EQ 0 THEN BEGIN
        IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VGT_SIMULATION: ERROR, NO AVAILABLE MERIS DATA FOR BAND BRDF RATIO'
        GOTO, NEXT_VGT_DATE
      ENDIF

;---------------------------------------            
; COMPUTE MEAN RATIO BETWEEN BANDS

      BAND_RATIO = MEAN(MER_DATA[NUM_NON_REF+BAD_BRDF_BANDS[TBAND],RES]/MER_DATA[NUM_NON_REF+GOOD_ID,RES])
      IF COUNT EQ 1 THEN BAND_STDEV = 0 ELSE BAND_STDEV = STDEV(MER_DATA[NUM_NON_REF+BAD_BRDF_BANDS[TBAND],RES]/MER_DATA[NUM_NON_REF+GOOD_ID,RES])

      RATIO_UCT_S[BAD_BRDF_BANDS[TBAND]+1] = SQRT((RATIO_UCT_S[GOOD_ID+1])^2+(3.*BAND_STDEV/SQRT(COUNT))^2)
      RATIO_UCT_R[BAD_BRDF_BANDS[TBAND]+1] = SQRT((RATIO_UCT_R[GOOD_ID+1])^2+(3.*BAND_STDEV)^2)

;---------------------------------------      
; MULTIPLY RATIO WITH K1 ROUJEAN, ADD K2 
; AND K3 ROUJEAN TO BAND ROUJEAN

      MER_ROUJ[BAD_BRDF_BANDS[TBAND],0] = BAND_RATIO*MER_K1[NUM_NON_ROU+GOOD_ID,MER_TEMP_BINS[0]]
      MER_ROUJ[BAD_BRDF_BANDS[TBAND],1] = MER_K2[NUM_NON_ROU+GOOD_ID,MER_TEMP_BINS[0]]  
      MER_ROUJ[BAD_BRDF_BANDS[TBAND],2] = MER_K3[NUM_NON_ROU+GOOD_ID,MER_TEMP_BINS[0]]  
 
    ENDFOR

    SKIP_BRDF_RATIOS:

;---------------------------------------
; GET ASSOCIATED AATSR 1.6 MICRON KERNAL

    P1 = MIN(ABS(VGT_DATE-ATS_K1[0,*]))
    IF P1 GT BRDF_BIN_PERIOD/365.0 THEN BEGIN
      IF KEYWORD_SET(VERBOSE) THEN $
        PRINT,'VGT_SIMULATION: ERROR, NO AATSR BINS NEAR VGT DATE, CLOSEST BIN IS ',STRTRIM(STRING(P1*365.0,FORMAT='(F7.2)'),2),' DAYS AWAY'
      ;GOTO,NEXT_VGT_DATE
      GOTO,NO_AATSR_1
    ENDIF ELSE AATSR_VALID=1

    ATS_TEMP_BINS = WHERE(ABS(VGT_DATE-ATS_K1[0,*]) EQ P1,COUNT)
    IF COUNT EQ 0 THEN GOTO,NEXT_VGT_DATE
    BIN_START = ATS_K1[0,ATS_TEMP_BINS[0]]-0.5*BRDF_BIN_PERIOD/365.0
    BIN_END   = ATS_K1[0,ATS_TEMP_BINS[0]]+0.5*BRDF_BIN_PERIOD/365.0

    ATS_ROUJ[0] = ATS_K1[NUM_NON_ROU+ATS_1600_ID,ATS_TEMP_BINS[0]]
    ATS_ROUJ[1] = ATS_K2[NUM_NON_ROU+ATS_1600_ID,ATS_TEMP_BINS[0]]
    ATS_ROUJ[2] = ATS_K3[NUM_NON_ROU+ATS_1600_ID,ATS_TEMP_BINS[0]]

    IF ATS_ROUJ[0] EQ -999.0 OR ATS_ROUJ[1] EQ -999.0 OR ATS_ROUJ[2] EQ -999.0 THEN BEGIN       
      IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: ERROR, NO AATSR KERNALS AVAILABLE NEAR VGT DATE, CONTINUING...'
      ;GOTO,NEXT_VGT_DATE
      AATSR_VALID=0
    ENDIF  

    NO_AATSR_1:
    
;---------------------------------------
; GET OZONE AND WVAP VALUES FROM VGT, OR USE DEFAULT    
    
    OZONE = GD_VGT_DATA[5,IDX]
    WVAP = GD_VGT_DATA[15,IDX]

    IF OZONE LT 0. THEN OZONE=300.
    ;IF WVAP LT 0. THEN IF REGION EQ 'DomeC' then WVAP=0.0125 else wvap=2. ; original code line
    IF WVAP LT 0. THEN IF SL_REGION EQ 'DomeC' then WVAP=0.0125 else wvap=2. ; Andrei's fix
    IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: ROI OZONE = ',OZONE,' ROI WVAP = ',WVAP

;---------------------------------------
; LOOP OVER EACH BAND AND COMPUTE TOA_RHO 
; WITH VGT GEOMETRY

    TOA_SZA = GD_VGT_DATA[3,IDX]
    TOA_VZA = GD_VGT_DATA[1,IDX]
    TOA_RAA = ABS(GD_VGT_DATA[4,IDX]-GD_VGT_DATA[2,IDX])
    RES = WHERE(TOA_RAA GT 180.0,COUNT)
    IF COUNT GT 0 THEN TOA_RAA[RES]=360.0-TOA_RAA[RES]

;---------------------------------------
; CHECK VGT GEOMETRY IS WITHIN RANGE OF 
; BRDF MODEL VALUES - ONLY TESTING ON MERIS CURRENTLY DO TO LIMITED AATSR BINS    

      IF  TOA_VZA LT MER_UC[2,MER_TEMP_BINS[0]] OR TOA_VZA GT MER_UC[3,MER_TEMP_BINS[0]] OR     $
          TOA_SZA LT MER_UC[4,MER_TEMP_BINS[0]] OR TOA_SZA GT MER_UC[5,MER_TEMP_BINS[0]] OR     $
          TOA_RAA LT MER_UC[6,MER_TEMP_BINS[0]] OR TOA_RAA GT MER_UC[7,MER_TEMP_BINS[0]] THEN BEGIN
        IF KEYWORD_SET(VERBOSE) THEN BEGIN
          PRINT, 'ERROR, VGT GEOMETRY OUTSIDE OF BRDF MODEL OBSERVATIONS, CONTINUING'
          PRINT, 'BRDF VZA MIN:',MER_UC[2,MER_TEMP_BINS[0]],' MAX:',MER_UC[3,MER_TEMP_BINS[0]],'| VGT VZA:',TOA_VZA
          PRINT, 'BRDF SZA MIN:',MER_UC[4,MER_TEMP_BINS[0]],' MAX:',MER_UC[5,MER_TEMP_BINS[0]],'| VGT SZA:',TOA_SZA 
          PRINT, 'BRDF RAA MIN:',MER_UC[6,MER_TEMP_BINS[0]],' MAX:',MER_UC[7,MER_TEMP_BINS[0]],'| VGT RAA:',TOA_RAA  
        ENDIF
        ;GOTO,NEXT_VGT_DATE
      ENDIF ELSE ANGLE_VALID=1
 
;---------------------------------------
; FOR MERIS BANDS

    IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: COMPUTING TOA RHO FOR EACH MERIS BAND'
    FOR TBAND=0,NB_BANDS_MERIS-1 DO BEGIN
      MER_RHO[TBAND] = ROUJEAN_BRDF_COMPUTE_RHO(TOA_SZA,TOA_VZA,TOA_RAA,[MER_ROUJ[TBAND,0],         $
                                                                  MER_ROUJ[TBAND,1],         $
                                                                  MER_ROUJ[TBAND,2]],/DEGREES,VERBOSE=VERBOSE)
    ENDFOR

;---------------------------------------
; FOR AATSR 1.6 BAND

    IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: COMPUTING TOA RHO FOR AATSR 1600 BAND'
    IF AATSR_VALID EQ 1 THEN BEGIN
    ATS_RHO = ROUJEAN_BRDF_COMPUTE_RHO(TOA_SZA,TOA_VZA,TOA_RAA,[ATS_ROUJ[0],     $
                                                                ATS_ROUJ[1],     $
                                                                ATS_ROUJ[2]],/DEGREES,VERBOSE=VERBOSE)
    ENDIF ELSE ATS_RHO = 0.

;---------------------------------------
; CONCATENATE MERIS AND AATSR RHO VALUES

    SSEN_RHO = [MER_RHO,ATS_RHO]
    IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: ROUJEAN COMPUTED RHO = ',SSEN_RHO

;---------------------------------------
; COMPUTE TRANSMISSION AT EACH BAND
      
    TANG      = (1./COS(TOA_SZA*!DTOR))+(1./COS(TOA_VZA*!DTOR))
    TEMP_OZONE= TOZONE*(OZONE/REF_O3)
    TEMP_WV   = TWVAP*(WVAP/REF_WV)
    TOT_TRANS = EXP(-(TEMP_OZONE+TEMP_WV+TGAS)*TANG)
 
    TRANS = FLTARR(NB_BANDS_MERIS+1)
    FOR TBAND=0,NB_BANDS_MERIS DO BEGIN
      TT = WHERE(RSR_DATA[*,TBAND] GT 0.0,CC)
      IF CC GT 0 THEN TRANS[TBAND] = TOTAL(TOT_TRANS[TT]*RSR_DATA[TT,TBAND])/TOTAL(RSR_DATA[TT,TBAND])
    ENDFOR
    IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: COMPUTED TRANSMISSION = ',TRANS 

;---------------------------------------
; CORRECT RHO FOR TRANSMISSION

    SSEN_RHO_COR = SSEN_RHO/TRANS
    IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: TRANSMISSION CORRECTED RHO = ',SSEN_RHO_COR 

;---------------------------------------
;   INTERPOLATE LINEARLY/CUBIC SPLINE

    SSEN_RHO_COR_HYP = INTERPOL(SSEN_RHO_COR,[MER_WL,ATS_WL],WAVELENGTHS)

;---------------------------------------
;   ADD HYPERSPECTRAL TRANSMISSION

    SSEN_RHO_HYP = SSEN_RHO_COR_HYP*TOT_TRANS

;---------------------------------------  
;   CONVOLVE TO VGT RSR 

    FOR TBAND=0,NB_BANDS_VGT-1 DO BEGIN
        SIMU_VGT[IDX,NUM_NON_REF+TBAND]=TOTAL(SSEN_RHO_HYP*VGT_RSR_DATA[*,TBAND])/TOTAL(VGT_RSR_DATA[*,TBAND])
        SIMU_VGT_UCT[IDX,1+TBAND] = VGT_UCT_S+SIM_UCT_S
        SIMU_VGT_UCT[IDX,1+NB_BANDS_VGT+TBAND] = SQRT(VGT_UCT_R^2+EDB_UCT_R^2+SIM_UCT_R^2)
        
        
    ; if band one is negative or very high then somethings gone wrong - insert 0 values
    	if SIMU_VGT[IDX,NUM_NON_REF] lt 0.0 or SIMU_VGT[IDX,NUM_NON_REF] gt 1.5 then SIMU_VGT[IDX,NUM_NON_REF:NUM_NON_REF+NB_BANDS_VGT-1]=0.
        
    ENDFOR

    SIMU_VGT[IDX,NUM_NON_REF+NB_BANDS_VGT]   = AATSR_VALID
    SIMU_VGT[IDX,NUM_NON_REF+NB_BANDS_VGT+1] = ANGLE_VALID
    IF KEYWORD_SET(VERBOSE) THEN PRINT,'VGT_SIMULATION: VGT SIMULATED RHO = ',SIMU_VGT[IDX,NUM_NON_REF:NUM_NON_REF+NB_BANDS_VGT-1]

;---------------------------------------  
; GENERATE THE REFLECTANCE PLOT

    ERASE
    PLOT,WAVELENGTHS,SSEN_RHO_COR_HYP,/NODATA,$
      COLOR = 0, BACKGROUND = 255,$
      TITLE  = 'SIMULATED RHO FOR '+TDATE,$
      YTITLE = 'REFLECTANCE (DL)',$
      XTITLE = 'WAVELENGTH',$
      YRANGE = [YMIN,YMAX],$
      XTICKFORMAT='((F8.3))'

    LNAME = ['SSEN_TAU_COR','SSEN_HYPSPEC','VGT_SIM']
    LCOLOR = [70,140,200]

    OPLOT,[MER_WL,ATS_WL],SSEN_RHO_COR, COLOR=LCOLOR[0],PSYM=1
    OPLOT,WAVELENGTHS,SSEN_RHO_HYP,     COLOR=LCOLOR[1]
    OPLOT,VGT_WL,SIMU_VGT[IDX,NUM_NON_REF:NUM_NON_REF+NB_BANDS_VGT-1],PSYM=1,COLOR=LCOLOR[2]
    
    XYOUTS,0.75,0.9-0.035*0,'- '+LNAME[0],COLOR=LCOLOR[0],/normal
    XYOUTS,0.75,0.9-0.035*1,'- '+LNAME[1],COLOR=LCOLOR[1],/normal
    XYOUTS,0.75,0.9-0.035*2,'- '+LNAME[2],COLOR=LCOLOR[2],/normal
    
    ;LEGEND,LNAME,COLOR=LCOLOR,/RIGHT

    TEMP = TVRD(TRUE=1)
    WRITE_JPEG,PLOT_BASE+TDATE+'.JPG',TEMP,TRUE=1,QUALITY=100
    ERASE
    
    NEXT_VGT_DATE:
    
  ENDFOR

;---------------------------------------  
; OUPUT SAVE FILE OF COMPUTE RHO AND VGT RHO

  SET_PLOT, MACHINE_WINDOW
  SAVE,SIMU_VGT,FILENAME=OUTPUT_VGT_SIM
  SAVE,GD_VGT_DATA,FILENAME=OUTPUT_VGT
  SAVE,SIMU_VGT_UCT,FILENAME=OUTPUT_VGT_UCT

;--------------------------------------- 
; OUTPUT CSV OF VGT RHO AND COMPUTED RHO

  FORMAT = '(3(A,1H;), '+STRTRIM(STRING(NB_DATES-1),2)+'(F15.6,1H;),1(F15.6))'
  OPENW,OUTF,OUTPUT_CSV,/GET_LUN
  PRINTF,OUTF,FORMAT=FORMAT,'SENSOR','PROC_VER','PARAMETER',GD_VGT_DATA[0,*]

  FOR K=0,NUM_NON_REF-2 DO PRINTF,OUTF,FORMAT=FORMAT,VGT_SENSOR,VGT_PROC_VER,NON_REF_NAMES[K],GD_VGT_DATA[K+1,*]
  FOR K=0,NB_BANDS_VGT-1 DO PRINTF,OUTF,FORMAT=FORMAT,VGT_SENSOR,       VGT_PROC_VER,$
    'TOA_REF_'+STRTRIM(STRING(K),2),GD_VGT_DATA[NUM_NON_REF+K,*]
  PRINTF,OUTF,FORMAT=FORMAT,VGT_SENSOR+'_SIM',VGT_PROC_VER,'AATSR_ON',SIMU_VGT[*,NUM_NON_REF+NB_BANDS_VGT] 
  PRINTF,OUTF,FORMAT=FORMAT,VGT_SENSOR+'_SIM',VGT_PROC_VER,'VALID_ANGLE_RANGE',SIMU_VGT[*,NUM_NON_REF+NB_BANDS_VGT+1]   
  FOR K=0,NB_BANDS_VGT-1 DO PRINTF,OUTF,FORMAT=FORMAT,VGT_SENSOR+'_SIM',VGT_PROC_VER,$
    'TOA_REF_'+STRTRIM(STRING(K),2),SIMU_VGT[*,NUM_NON_REF+K] 
  FOR K=0,NB_BANDS_VGT-1 DO PRINTF,OUTF,FORMAT=FORMAT,VGT_SENSOR+'_SIM',VGT_PROC_VER,$
    'SYSTEMATIC_ERROR_'+STRTRIM(STRING(K),2),SIMU_VGT_UCT[*,1+K]     
  FOR K=0,NB_BANDS_VGT-1 DO PRINTF,OUTF,FORMAT=FORMAT,VGT_SENSOR+'_SIM',VGT_PROC_VER,$
    'RANDOM_ERROR_'+STRTRIM(STRING(K),2),SIMU_VGT_UCT[*,1+nb_bands_VGT+K]    
      
  FREE_LUN,OUTF

;--------------------------------------- 
; OUTPUT PLOT OF COMPARISON

  RES = PLOT_SIM_VGT(SL_FOLDER,GD_VGT_DATA,SIMU_VGT,VERBOSE=VERBOSE)
  PRINT, 'VGT_SIMULATION: SIMULATION COMPLETE'
  RETURN,1
  
END
