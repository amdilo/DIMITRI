;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      WRITE_CSV_CALIB_REPORT 
;* 
;* PURPOSE:
;*      WRITE CSV CALIB REPORT 
;* 
;* CALLING SEQUENCE:
;*      RES = WRITE_CSV_CALIB_REPORT(OUT_FILENAME_REPORT, CSV_REPORT_STRUCT, VERBOSE=VERBOSE)      
;* 
;* INPUTS:
;*      OUT_FILENAME_REPORT = A STRING CONTAINING THE NAME OF THE CSV FILE
;*      CSV_REPORT_STRUCT   = A STRUCTURE CONTAINING THE INFORMATION TO WRITE IN THE CSV FILE
;*
;* KEYWORDS:
;*      VERBOSE  - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS   - 1: NOMINAL, (-1): ERROR, 0: NO PRODUCTS FOUND
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      02 MAR 2015 - NCG / MAGELLIUM - CREATION (DIMITRI V4)
;*
;* VALIDATION HISTORY:
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION WRITE_CSV_CALIB_REPORT, OUT_FILENAME_REPORT, CSV_REPORT_STRUCT, VERBOSE=VERBOSE

  FCT_NAME = 'WRITE_CSV_CALIB_REPORT'
  
  STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')
  STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
  
  ;---------------------
  ; CHECK OUTPUT FOLDER AND FILE

  OUTPUT_FOLDER = FILE_DIRNAME(OUT_FILENAME_REPORT)
  OUT_FOLDER_INFO = FILE_INFO(OUTPUT_FOLDER)
  IF OUT_FOLDER_INFO.DIRECTORY EQ 0 THEN BEGIN
      FILE_MKDIR, OUTPUT_FOLDER
      IF KEYWORD_SET(VERBOSE) THEN BEGIN      
        PRINT, FCT_NAME + ': WARNING, OUTPUT FOLDER ''' + OUTPUT_FOLDER + ''' NOT FOUND'
        PRINT, FCT_NAME + ': OUTPUT FOLDER ''' + OUTPUT_FOLDER + ''' CREATED'
      ENDIF
  ENDIF

  OUT_FILE_INFO = FILE_INFO(OUT_FILENAME_REPORT)
  IF OUT_FILE_INFO.EXISTS EQ 1 THEN BEGIN
      FILE_DELETE,OUT_FILENAME_REPORT
      IF KEYWORD_SET(VERBOSE) THEN BEGIN      
        PRINT, FCT_NAME + ': PREVIOUS OUTPUT FILE ''' + OUT_FILENAME_REPORT + ''' DELETED'
      ENDIF
  ENDIF
  
  ;---------------------
  ; COMPUTE CSV HEADER
  
  NB_TAGS = N_TAGS(CSV_REPORT_STRUCT.FIELDS)
  TAGS_NAME = TAG_NAMES(CSV_REPORT_STRUCT.FIELDS)
  
  ; SEARCH BAND TAG NAMES
  IDX_BAND_TAG = WHERE(STRMATCH(TAGS_NAME, '*BAND*') EQ 1, NB_BAND_TAG, COMPLEMENT=IDX_NO_BAND_TAG, NCOMPLEMENT=NB_NO_BAND_TAG)
  NO_BAND_TAGS = TAGS_NAME[IDX_NO_BAND_TAG] 
  BAND_TAGS    = TAGS_NAME[IDX_BAND_TAG] 
  
  BAND_TAG_INIT = (STRSPLIT(BAND_TAGS[0],'BAND_', /REGEX,/EXTRACT))[0]
  FOR NUM=1, N_ELEMENTS(BAND_TAGS)-1 DO BEGIN
    BAND_TAG_INIT = [ BAND_TAG_INIT, (STRSPLIT(BAND_TAGS[NUM],'BAND_', /REGEX,/EXTRACT))[0] ]
  ENDFOR
  
  ; GET REAL BAND NUMBER
  IDX_BANDS_IDS = WHERE(STRMATCH(CSV_REPORT_STRUCT.COMPLEMENT.REFL_BAND_IDS, '-1') EQ 0, NB_BANDS)
  
  ; INITIALISE CSV HEADER WITH NO BAND DEPENDENT FIELDS, AND ADD BAND DEPENDENT FIELDS FOR EACH BAND
  CSV_HEADER = NO_BAND_TAGS
  FOR NUM=0, NB_BANDS-1 DO BEGIN
    CSV_HEADER = [ CSV_HEADER, CSV_REPORT_STRUCT.COMPLEMENT.REFL_BAND_IDS[NUM] + '_' + BAND_TAG_INIT ]
  ENDFOR
  NB_HEADER_FIELDS = N_ELEMENTS(CSV_HEADER)

  ; GET NB_FILES AND NB_DIRECTIONS
  DIMENSIONS = SIZE(CSV_REPORT_STRUCT.FIELDS.SZA_MEAN, /DIMENSIONS)
  IF N_ELEMENTS(DIMENSIONS) EQ 1 THEN BEGIN
    NB_DIRECTIONS = DIMENSIONS[0]
    NB_FILES      = 1
  ENDIF ELSE BEGIN
    NB_DIRECTIONS = DIMENSIONS[0]
    NB_FILES      = DIMENSIONS[1]
  ENDELSE
  
  ;---------------------
  ; GET CSV FORMAT
  
  CSV_FORMAT = GET_CSV_CALIB_REPORT_FORMAT(NB_BANDS)
  CSV_HEADER_FORMAT = '('+STRTRIM(STRING(NB_HEADER_FIELDS),2)+'(A,1H;))'
  
  ;---------------------
  ; OPEN OUTPUT FILE AND WRITE HEADER

  OPENW, CSV_LUN, OUT_FILENAME_REPORT, /GET_LUN
  PRINTF, CSV_LUN, CSV_HEADER, FORMAT=CSV_HEADER_FORMAT

  ;---------------------
  ; LOOP ON FILES AND DIRECTIONS
  
  FOR NUM_FILE=0, NB_FILES-1 DO BEGIN
  
    FOR NUM_DIR=0, NB_DIRECTIONS-1 DO BEGIN
    
      ; COMPUTE CSV BAND VALUES TO SAVE IN CSV FILE
      CSV_BAND_INFOS = [ CSV_REPORT_STRUCT.FIELDS.BAND_REF_TO_SIM_RATIO_PIX_NUM[NUM_DIR, 0, NUM_FILE], $ 
                  CSV_REPORT_STRUCT.FIELDS.BAND_REF_TO_SIM_RATIO_MEAN[NUM_DIR, 0, NUM_FILE], $ 
                  CSV_REPORT_STRUCT.FIELDS.BAND_REF_TO_SIM_RATIO_STD[NUM_DIR, 0, NUM_FILE], $ 
                  CSV_REPORT_STRUCT.FIELDS.BAND_RHO_SIM_UNCERT_MEAN[NUM_DIR, 0, NUM_FILE], $ 
                  CSV_REPORT_STRUCT.FIELDS.BAND_RHO_SIM_UNCERT_STD[NUM_DIR, 0, NUM_FILE] ]
      FOR NUM_BAND=1, NB_BANDS-1 DO BEGIN
         CSV_BAND_INFOS = [ CSV_BAND_INFOS, $
                  CSV_REPORT_STRUCT.FIELDS.BAND_REF_TO_SIM_RATIO_PIX_NUM[NUM_DIR, NUM_BAND, NUM_FILE], $ 
                  CSV_REPORT_STRUCT.FIELDS.BAND_REF_TO_SIM_RATIO_MEAN[NUM_DIR, NUM_BAND, NUM_FILE], $ 
                  CSV_REPORT_STRUCT.FIELDS.BAND_REF_TO_SIM_RATIO_STD[NUM_DIR, NUM_BAND, NUM_FILE], $ 
                  CSV_REPORT_STRUCT.FIELDS.BAND_RHO_SIM_UNCERT_MEAN[NUM_DIR, NUM_BAND, NUM_FILE], $ 
                  CSV_REPORT_STRUCT.FIELDS.BAND_RHO_SIM_UNCERT_STD[NUM_DIR, NUM_BAND, NUM_FILE] ]
      ENDFOR
                  
      PRINTF, CSV_LUN, FORMAT=CSV_FORMAT, $
                  CSV_REPORT_STRUCT.FIELDS.NCDF_FILENAME[NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.L1_FILENAME[NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.VIEWING_DIRECTION[NUM_DIR], $
                  CSV_REPORT_STRUCT.FIELDS.YEAR[NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.MONTH[NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.DAY[NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.HOUR[NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.MINUTES[NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.DECIMAL_YEAR[NUM_FILE], $

                  CSV_REPORT_STRUCT.FIELDS.SZA_MEAN[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.SZA_STD[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.SAA_MEAN[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.SAA_STD[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.VZA_MEAN[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.VZA_STD[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.VAA_MEAN[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.VAA_STD[NUM_DIR, NUM_FILE], $

                  CSV_REPORT_STRUCT.FIELDS.ERA_WIND_SPEED_MEAN[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.ERA_WIND_SPEED_STD[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.ERA_WIND_DIR_MEAN[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.ERA_WIND_DIR_STD[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.ERA_OZONE_MEAN[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.ERA_OZONE_STD[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.ERA_PRESSURE_MEAN[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.ERA_PRESSURE_STD[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.ERA_WATERVAPOUR_MEAN[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.ERA_WATERVAPOUR_STD[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.ESA_CHLOROPHYLL_MEAN[NUM_DIR, NUM_FILE], $
                  CSV_REPORT_STRUCT.FIELDS.ESA_CHLOROPHYLL_STD[NUM_DIR, NUM_FILE], $
                  
                  CSV_BAND_INFOS
    
    ENDFOR
  
  ENDFOR
  
  ;---------------------
  ; CLOSE OUTPUT FILE
  FREE_LUN, CSV_LUN
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ': END'
  RETURN, STATUS_OK
  
END

