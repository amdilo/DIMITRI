FUNCTION GET_VIIRS_VIEWING_GEOMETRIES,FILENAME,VERBOSE=VERBOSE

;+
; :Name:
;      GET_MODISA_VIEWING_GEOMETRIES
;
; :Description:
;      returns the interpolated viewing_geometries of a modisa image
;
; :Calling sequence:
;      RES = GET_MODISA_VIEWING_GEOMETRIES(FILENAME)
;
; :Inputs:
;      FILENAME :
;      - a scalar containing the filename of the product for geolocaiton extraction
;
; :Keywords:
;      VERBOSE :
;          - processing status outputs
;
; :Returns:
;      STRUCT.SZA :
;        - solar zenith angle in degrees
;      STRUCT.SAA :
;        - solar azimuth angle in degrees
;      STRUCT.VZA :
;        - sensor zenith angle in degrees
;      STRUCT.VAA :
;        - sensor azimuth angle in degrees
;
; :COMMON BLOCKS:
;      NONE
;
; :History:
;                  - M BOUVET - PROTOTYPE DIMITRI VERSION
;      02 DEC 2010 - C KENT   - DIMITRI-2 V1.0
;      27 APR 2011 - C KENT   - ADDED FULL SWATH EXCEPTION PROCESSING
;
; VALIDATION HISTORY:
;      01 DEC 2010 - C KENT    - WINDOWS 32-BIT MACHINE IDL 7.1: COMPILATION SUCCESSFUL,
;                                PIXEL DATA WITHIN APPROXIMATELY 0.004 DEGREES OF BEAM VISAT
;      05 JAN 2011 - C KENT    - LINUX 64-BIT MACHINE IDL 8.0: COMPILATION SUCCESSFUL,
;                                NO APPARENT DIFFERENCES WHEN COMPARED TO WINDOWS MACHINE
;-

;------------------------------------------------
; CHECK FILENAME AND IN_BAND ARE NOMINAL

IF FILENAME EQ '' THEN BEGIN
  PRINT, 'VIIRS L1B VIEWING_GEOMETRIES: ERROR, INPUT FILENAME INCORRECT'
  RETURN,-1
ENDIF

; Grab solar zenith

IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VIIRS L1B VIEWING_GEOMETRIES: RETRIEVING SOLAR ZENITH VALUES'
HDF_ID = HDF_SD_START(FILENAME, /READ)
SDS_NAME = HDF_SD_NAMETOINDEX(HDF_ID, 'SolarZenithAngle')
SDS_ID=HDF_SD_SELECT(HDF_ID, SDS_NAME)
HDF_SD_GETDATA, SDS_ID,L1B_SZA

SCF = 1.0 ; we assume there is no scaling factor unless we find one.

; look for a scaling factor, I don't think ther isone for VIIRS files but I leave here anywya
ATTR_INDX = HDF_SD_ATTRFIND(SDS_ID, 'scale_factor')
IF ATTR_INDX GE 0 THEN HDF_SD_ATTRINFO, SDS_ID, ATTR_INDX, DATA=SCF
HDF_SD_ENDACCESS, SDS_ID

; Save to an array
GEO_DIMS  = SIZE(L1B_SZA)
L1B_SZA=FLOAT(L1B_SZA)
SCF = MAKE_ARRAY(GEO_DIMS[1],GEO_DIMS[2],/FLOAT,VALUE=SCF)
L1B_SZA=L1B_SZA*SCF

IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VIIRS L1B VIEWING_GEOMETRIES: RETRIEVING SOLAR AZIMUTH VALUES'
SDS_NAME = HDF_SD_NAMETOINDEX(HDF_ID, 'SolarAzimuthAngle')
SDS_ID=HDF_SD_SELECT(HDF_ID,SDS_NAME)
HDF_SD_GETDATA,SDS_ID,L1B_SAA

SCF = 1.0 ; we assume there is no scaling factor unless we find one.

ATTR_INDX = HDF_SD_ATTRFIND(SDS_ID, 'scale_factor')
IF ATTR_INDX GE 0 THEN HDF_SD_ATTRINFO, SDS_ID, ATTR_INDX, DATA=SCF
HDF_SD_ENDACCESS, SDS_ID
L1B_SAA=FLOAT(L1B_SAA)
SCF = MAKE_ARRAY(GEO_DIMS[1],GEO_DIMS[2],/FLOAT,VALUE=SCF)
L1B_SAA=L1B_SAA*SCF

IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VIIRS L1B VIEWING_GEOMETRIES: RETRIEVING Satellite ZENITH VALUES'
SDS_NAME = HDF_SD_NAMETOINDEX(HDF_ID, 'SatelliteZenithAngle')
SDS_ID=HDF_SD_SELECT(HDF_ID, SDS_NAME)
HDF_SD_GETDATA,SDS_ID, L1B_VZA

SCF = 1.0 ; we assume there is no scaling factor unless we find one.

ATTR_INDX = HDF_SD_ATTRFIND(SDS_ID, 'scale_factor')
IF ATTR_INDX GE 0 THEN HDF_SD_ATTRINFO, SDS_ID, ATTR_INDX, DATA=SCF
HDF_SD_ENDACCESS, SDS_ID
L1B_VZA=FLOAT(L1B_VZA)
SCF = MAKE_ARRAY(GEO_DIMS[1], GEO_DIMS[2], /FLOAT, VALUE=SCF)
L1B_VZA=L1B_VZA*SCF

IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VIIRS L1B VIEWING_GEOMETRIES: RETRIEVING Satellite AZIMUTH VALUES'
SDS_NAME = HDF_SD_NAMETOINDEX(HDF_ID, 'SatelliteAzimuthAngle')
SDS_ID=HDF_SD_SELECT(HDF_ID, SDS_NAME)
HDF_SD_GETDATA,SDS_ID, L1B_VAA

SCF = 1.0 ;

ATTR_INDX = HDF_SD_ATTRFIND(SDS_ID, 'scale_factor')
IF ATTR_INDX GE 0 THEN HDF_SD_ATTRINFO, SDS_ID, ATTR_INDX, DATA=SCF
HDF_SD_ENDACCESS, SDS_ID
L1B_VAA=FLOAT(L1B_VAA)
SCF = MAKE_ARRAY(GEO_DIMS[1], GEO_DIMS[2], /FLOAT,VALUE=SCF)
L1B_VAA=L1B_VAA*SCF

;-------------------------------------------------
; CLOSE THE HDF FILE

IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VIIRS L1B VIEWING_GEOMETRIES: CLOSING HDF FILE'
HDF_SD_END,HDF_ID

; No need to interpolate for VIIRS

;------------------------------------------------
; RETURN LAT AND LON

IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VIIRS L1B VIEWING_GEOMETRIES: RETURNING VIEWING GEOMETRIES'
RETURN,{SZA:L1B_SZA, SAA:L1B_SAA, VZA:L1B_VZA, VAA:L1B_VAA}

END






