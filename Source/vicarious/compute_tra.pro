;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*     COMPUTE_TRA
;* 
;* PURPOSE:
;*      COMPUTE AEROSOL+RAYLEIGH TOTAL TRANSMITTANCE AT GIVEN WIND, GEOMETRY AND BAND
;*      TOTAL IS DOWNWARD+UPWARD AND DIFFUSE+DIRECT 
;* 
;* CALLING SEQUENCE:
;*      RES = COMPUTE_TRA(WIND, VZA, SZA, TAUA, IBAND)
;* 
;* INPUTS:
;*      WIND     - THE WIND SPEED IN M/S.
;*      VZA      - THE VIEWING ZENITH ANGLE IN DEGREES 
;*      SZA      - THE SOLAR ZENITH ANGLE IN DEGREES
;*      TAUA     - THE AEROSOL OPTICAL THICKNESS
;*      IBAND    - THE INDEX OF WAVELENGTH FOR GIVEN SENSOR
;*
;* KEYWORDS:
;*      COS              - INTERPOLATE ZENITH ANGLES IN COSINE
;*      VERBOSE          - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      TRA             - RAYLEIGH+AEROSOL TOTAL TRANSMITTANCE 
;*
;* COMMON BLOCKS:
;*      RTM_LUT
;*
;* MODIFICATION HISTORY:
;*        01 NOV 2013 - C MAZERAN - FIRST IMPLEMENTATION
;*
;* VALIDATION HISTORY:
;*        01 NOV 2013 - C MAZERAN - IDL 8.0 AND LINUX 64-BIT MACHINE IDL 8.2, NOMINAL COMPILATION AND OPERATION.
;*
;**************************************************************************************
FUNCTION COMPUTE_TRA, WIND, VZA, SZA, TAUA, IBAND, COS=COS

COMMON RTM_LUT

;-----------------------------------------
; DEFINE CURRENT FUNCTION NAME

 FCT_NAME = "COMPUTE_TRA"

 ;-----------------------------------------
 ; CHECK INPUTS CORRESPOND TO
 ; A ONE-DIMENSIONNAL ARRAY

 S1 = SIZE(VZA,/N_DIMENSIONS)
 S2 = SIZE(SZA,/N_DIMENSIONS)
 S3 = SIZE(TAUA,/N_DIMENSIONS)
 S  = [S1, S2, S3]

 IF N_ELEMENTS(UNIQ(S(SORT(S)))) NE 1 THEN BEGIN
   PRINT, FCT_NAME+":ERROR, WORKS ONLY FOR 1D ARRAY"
   RETURN, -1
 ENDIF

;-----------------------------------------
; CHECK INPUTS HAVE THE SAME DIMENSION

 N1 = N_ELEMENTS(VZA)
 N2 = N_ELEMENTS(SZA)
 N3 = N_ELEMENTS(TAUA)
 N  = [N1, N2, N3]
 IF N_ELEMENTS(UNIQ(N(SORT(N)))) NE 1 THEN BEGIN
   PRINT, FCT_NAME+":ERROR, INPUTS DON'T HAVE SAME DIMENSION"
   RETURN, -1
 ENDIF

;-----------------------------------------
; CHECK LUTS ARE LOADED

 IF ( N_ELEMENTS(TAUA_LUT) EQ 0 OR N_ELEMENTS(TRA_DOWN_LUT) EQ 0 OR N_ELEMENTS(TRA_UP_LUT) EQ 0 ) THEN BEGIN
   PRINT, FCT_NAME+":ERROR, TAUA_LUT AND/OR TRA_DOWN_LUT AND/OR TRA_UP_LUT NOT LOADED"
   RETURN, -1
 ENDIF

;-----------------------------------------
; COPY INPUT ARRAY IN GENERIC NAME 

 X = DBLARR([2,N1])
 IF KEYWORD_SET(COS) THEN X[0,*] = COS(SZA*!DTOR) ELSE X[0,*] = SZA
 X[1,*] = TAUA

;-----------------------------------------
; COMPUTE INDICES AND WEIGHTS OF THE
; DOWNWARD TRANSMITTANCE INTERPOLATION

 INDEX  = INTARR(2,N1)
 WEIGHT = DBLARR(2,N1)

 FOR I=0, 1 DO BEGIN

    IF I EQ 0 THEN XREF = TRA_DOWN_LUT.(I) ELSE XREF=REFORM(TAUA_LUT.DATA[*,IBAND])
    IF ( I EQ 0 AND KEYWORD_SET(COS) ) THEN XREF = COS(TRA_DOWN_LUT.(I)*!DTOR)

    INDEX[I,*]  = VALUE_LOCATE(XREF, X[I,*])

    ID=WHERE(INDEX[I,*] GE 0 AND INDEX[I,*] LT N_ELEMENTS(XREF)-1, COUNT, NCOMPLEMENT=NCOUNT)
    IF COUNT NE 0 THEN WEIGHT[I,ID]=(X[I,ID]-XREF[INDEX[I,ID]])/(XREF[INDEX[I,ID]+1]-XREF[INDEX[I,ID]])
    IF NCOUNT NE 0 THEN BEGIN
      ID=WHERE(INDEX[I,*] EQ -1 )
      IF ID[0] NE -1 THEN BEGIN
        INDEX[I,ID]   = 0
        WEIGHT[I,ID]  = 0.
      ENDIF
      ID=WHERE(INDEX[I,*] EQ N_ELEMENTS(XREF)-1 )
      IF ID[0] NE -1 THEN BEGIN
        INDEX[I,ID]   = N_ELEMENTS(XREF)-2
        WEIGHT[I,ID]  = 1.
      ENDIF
    ENDIF

 ENDFOR
 
;-----------------------------------------
; INTERPOLATE IN THE DOWNWARD TRANSMITTANCE
; LUT

 TRA_DOWN = MAKE_ARRAY(N1,/FLOAT,VALUE=0.)

 DATA = ALOG(REFORM(TRA_DOWN_LUT.DATA[*,*,IBAND]))

 FOR I0 = 0, 1 DO BEGIN
 FOR I1 = 0, 1 DO BEGIN
    TRA_DOWN[*] += (I0?WEIGHT[0,*]:(1.-WEIGHT[0,*]))*$
                   (I1?WEIGHT[1,*]:(1.-WEIGHT[1,*]))*DATA[INDEX[0,*]+I0,INDEX[1,*]+I1]
 ENDFOR
 ENDFOR

 TRA_DOWN = EXP(TRA_DOWN)

;-----------------------------------------
; COPY INPUT ARRAY IN GENERIC NAME 

 X = DBLARR([2,N1])
 IF KEYWORD_SET(COS) THEN X[0,*] = COS(VZA*!DTOR) ELSE X[0,*] = VZA
 X[1,*] = TAUA

;-----------------------------------------
; COMPUTE INDICES AND WEIGHTS OF THE
; UPWARD TRANSMITTANCE INTERPOLATION

 INDEX  = INTARR(2,N1)
 WEIGHT = DBLARR(2,N1)

 FOR I=0, 1 DO BEGIN

    IF I EQ 0 THEN XREF = TRA_UP_LUT.(I) ELSE XREF=REFORM(TAUA_LUT.DATA[*,IBAND])
    IF ( I EQ 0 AND KEYWORD_SET(COS) ) THEN XREF = COS(TRA_UP_LUT.(I)*!DTOR)

    INDEX[I,*]  = VALUE_LOCATE(XREF, X[I,*])

    ID=WHERE(INDEX[I,*] GE 0 AND INDEX[I,*] LT N_ELEMENTS(XREF)-1, COUNT, NCOMPLEMENT=NCOUNT)
    IF COUNT NE 0 THEN WEIGHT[I,ID]=(X[I,ID]-XREF[INDEX[I,ID]])/(XREF[INDEX[I,ID]+1]-XREF[INDEX[I,ID]])
    IF NCOUNT NE 0 THEN BEGIN
      ID=WHERE(INDEX[I,*] EQ -1 )
      IF ID[0] NE -1 THEN BEGIN
        INDEX[I,ID]   = 0
        WEIGHT[I,ID]  = 0.
      ENDIF
      ID=WHERE(INDEX[I,*] EQ N_ELEMENTS(XREF)-1 )
      IF ID[0] NE -1 THEN BEGIN
        INDEX[I,ID]   = N_ELEMENTS(XREF)-2
        WEIGHT[I,ID]  = 1.
      ENDIF
    ENDIF

 ENDFOR
 
;-----------------------------------------
; INTERPOLATE IN THE UPWARD TRANSMITTANCE
; LUT

 TRA_UP = MAKE_ARRAY(N1,/FLOAT,VALUE=0.)

 DATA = ALOG(REFORM(TRA_UP_LUT.DATA[*,*,IBAND]))

 FOR I0 = 0, 1 DO BEGIN
 FOR I1 = 0, 1 DO BEGIN
    TRA_UP[*] += (I0?WEIGHT[0,*]:(1.-WEIGHT[0,*]))*$
                 (I1?WEIGHT[1,*]:(1.-WEIGHT[1,*]))*DATA[INDEX[0,*]+I0,INDEX[1,*]+I1]
 ENDFOR
 ENDFOR

 TRA_UP = EXP(TRA_UP)

;-----------------------------------------
; COMPUTE FINAL TRANSMITTANCE

 TRA = TRA_DOWN*TRA_UP
 
 RETURN, TRA

END
