;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      INTERP4D
;*
;* PURPOSE:
;*      FUNCTION TO PERFORM 4D INTERPOLATION THROUGH A 4-D LOOK-UP TABLE (DIRECT DATA RANGE RESTRICTION METHOD)
;*
;* CALLING SEQUENCE:
;*      OUT_VAL = INTERP4D(W_LUT, X_LUT, Y_LUT, Z_LUT, OUT_LUT, W, X, Y, Z, W_BKPT_VALUES, X_BKPT_VALUES, Y_BKPT_VALUES, Z_BKPT_VALUES)
;*
;* INPUTS:
;*      W_LUT         : 4-D LUT 1ST DIMENSION
;*      X_LUT         : 4-D LUT 2ND DIMENSION
;*      Y_LUT         : 4-D LUT 3RD DIMENSION
;*      Z_LUT         : 4-D LUT 4TH DIMENSION;
;*      W             : INPUT(S) 1ST DIMENSION
;*      X             : INPUT(S) 2ND DIMENSION
;*      Y             : INPUT(S) 3RD DIMENSION
;*      Z             : INPUT(S) 4TH DIMENSION
;*      W_BKPT_VALUES : LUT_4D 1ST DIMENSION BREAKPOINT VALUES
;*      X_BKPT_VALUES : LUT_4D 2ND DIMENSION BREAKPOINT VALUES
;*      Y_BKPT_VALUES : LUT_4D 3RD DIMENSION BREAKPOINT VALUES
;*      Z_BKPT_VALUES : LUT_4D 4TH DIMENSION BREAKPOINT VALUES
;*
;* KEYWORDS:
;*      INVERSE_Z        : INVERT OUTPUT DIMENSION AND LAST INPUT DIMENSION TO INVERT LOOK-UP TABLE RESULT
;*                          USED FOR LOOK-UP TABLE INVERSION
;*
;* OUTPUTS:
;*      OUT_VAL = INTERPOLATED VALUE
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*
;* VALIDATION HISTORY:
;*      20 JAN 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION INTERP4D, W_LUT, X_LUT, Y_LUT, Z_LUT, OUT_LUT, W, X, Y, Z, W_BKPT_VALUES, X_BKPT_VALUES, Y_BKPT_VALUES, Z_BKPT_VALUES, INVERSE_Z=INVERSE_Z

  ; BUILD NORMALIZE INPUTS FOR INTERPOLATION
  NB_VAL=N_ELEMENTS(W)
  OUT_VAL = FLTARR(NB_VAL)
  
  W_DOINTERP = QUANTIZE_BOL_TOL(W, W_BKPT_VALUES, VAL_BOL=W_VAL_BOL, VAL_TOL=W_VAL_TOL)
  X_DOINTERP = QUANTIZE_BOL_TOL(X, X_BKPT_VALUES, VAL_BOL=X_VAL_BOL, VAL_TOL=X_VAL_TOL)
  Y_DOINTERP = QUANTIZE_BOL_TOL(Y, Y_BKPT_VALUES, VAL_BOL=Y_VAL_BOL, VAL_TOL=Y_VAL_TOL)
  Z_DOINTERP = QUANTIZE_BOL_TOL(Z, Z_BKPT_VALUES, VAL_BOL=Z_VAL_BOL, VAL_TOL=Z_VAL_TOL)
  
  ; LOOP OVER SAMPLE
  FOR INC=0,NB_VAL-1 DO BEGIN
    
    CUR_W_VAL_BOL=W_VAL_BOL(INC)
    CUR_W_VAL_TOL=W_VAL_TOL(INC)
    CUR_W_VAL=W(INC)
    
    INDX_W_LUT_BOL = WHERE(W_LUT EQ CUR_W_VAL_BOL)
    X_LUT_RNG_W_BOL = X_LUT(INDX_W_LUT_BOL)
    Y_LUT_RNG_W_BOL = Y_LUT(INDX_W_LUT_BOL)
    Z_LUT_RNG_W_BOL = Z_LUT(INDX_W_LUT_BOL)
    OUT_LUT_RNG_W_BOL = OUT_LUT(INDX_W_LUT_BOL)
    IF W_DOINTERP(INC) EQ 0 THEN BEGIN
      IF KEYWORD_SET(INVERSE_Z) THEN BEGIN
          DIM1_INV = Z_LUT(INDX_W_LUT_BOL)  ; NCG / MAGELLIUM MODIF : Z_LUT instead of OUT_LUT
      ENDIF ELSE BEGIN
          DIM1_INV = OUT_LUT(INDX_W_LUT_BOL)            
      ENDELSE
      X_LUT_RNG_W_TOL = X_LUT_RNG_W_BOL
      Y_LUT_RNG_W_TOL = Y_LUT_RNG_W_BOL
      Z_LUT_RNG_W_TOL = Z_LUT_RNG_W_BOL
    ENDIF ELSE BEGIN
      INDX_W_LUT_TOL = WHERE(W_LUT EQ CUR_W_VAL_TOL)
      X_LUT_RNG_W_TOL = X_LUT(INDX_W_LUT_TOL)
      Y_LUT_RNG_W_TOL = Y_LUT(INDX_W_LUT_TOL)
      Z_LUT_RNG_W_TOL = Z_LUT(INDX_W_LUT_TOL)
      IF KEYWORD_SET(INVERSE_Z) THEN BEGIN
        DIM1_INV= INTERP1D_MULTIY([CUR_W_VAL_BOL, CUR_W_VAL_TOL], [ [Z_LUT(INDX_W_LUT_BOL)] , [Z_LUT(INDX_W_LUT_TOL)] ], CUR_W_VAL);
      ENDIF ELSE BEGIN
        DIM1_INV= INTERP1D_MULTIY([CUR_W_VAL_BOL, CUR_W_VAL_TOL], [ [OUT_LUT(INDX_W_LUT_BOL)] , [OUT_LUT(INDX_W_LUT_TOL)] ], CUR_W_VAL);
      ENDELSE      
      
    ENDELSE
    
    CUR_X_VAL_BOL=X_VAL_BOL(INC)
    CUR_X_VAL_TOL=X_VAL_TOL(INC)
    CUR_X_VAL=X(INC)
    
    INDX_X_LUT_BOL = WHERE(X_LUT_RNG_W_BOL EQ CUR_X_VAL_BOL)
    Y_LUT_RNG_X_BOL = Y_LUT_RNG_W_BOL(INDX_X_LUT_BOL)
    Z_LUT_RNG_X_BOL = Z_LUT_RNG_W_BOL(INDX_X_LUT_BOL)
    OUT_LUT_RNG_X_BOL = OUT_LUT_RNG_W_BOL(INDX_X_LUT_BOL)
    IF X_DOINTERP(INC) EQ 0 THEN BEGIN
      DIM2_INV = DIM1_INV(INDX_X_LUT_BOL)
      Y_LUT_RNG_X_TOL = Y_LUT_RNG_X_BOL
      Z_LUT_RNG_X_TOL = Z_LUT_RNG_X_BOL
    ENDIF ELSE BEGIN
      INDX_X_LUT_TOL = WHERE(X_LUT_RNG_W_BOL EQ CUR_X_VAL_TOL)
      Y_LUT_RNG_X_TOL = Y_LUT_RNG_W_TOL(INDX_X_LUT_TOL)
      Z_LUT_RNG_X_TOL = Z_LUT_RNG_W_TOL(INDX_X_LUT_TOL)
      DIM2_INV= INTERP1D_MULTIY([CUR_X_VAL_BOL, CUR_X_VAL_TOL], [ [DIM1_INV(INDX_X_LUT_BOL)] , [DIM1_INV(INDX_X_LUT_TOL)] ], CUR_X_VAL);
    ENDELSE

    CUR_Y_VAL_BOL=Y_VAL_BOL(INC)
    CUR_Y_VAL_TOL=Y_VAL_TOL(INC)
    CUR_Y_VAL=Y(INC)

    INDX_Y_LUT_BOL = WHERE(Y_LUT_RNG_X_BOL EQ CUR_Y_VAL_BOL)
    Z_LUT_RNG_Y_BOL = Z_LUT_RNG_X_BOL(INDX_Y_LUT_BOL)
    OUT_LUT_RNG_Y_BOL = OUT_LUT_RNG_X_BOL(INDX_Y_LUT_BOL)    
    IF Y_DOINTERP(INC) EQ 0 THEN BEGIN
      DIM3_INV = DIM2_INV(INDX_Y_LUT_BOL)
      Z_LUT_RNG_Y_TOL = Z_LUT_RNG_Y_BOL
    ENDIF ELSE BEGIN
      INDX_Y_LUT_TOL = WHERE(Y_LUT_RNG_X_TOL EQ CUR_Y_VAL_TOL)
      Z_LUT_RNG_Y_TOL = Z_LUT_RNG_X_TOL(INDX_Y_LUT_TOL)      
      DIM3_INV= INTERP1D_MULTIY([CUR_Y_VAL_BOL, CUR_Y_VAL_TOL], [ [DIM2_INV(INDX_Y_LUT_BOL)] , [DIM2_INV(INDX_Y_LUT_TOL)] ], CUR_Y_VAL);
    ENDELSE

    ; FILTER OUT NAN VALUES ON X
    CUR_Z_VAL=Z(INC)
    INDX_XNAN=WHERE(FINITE(DIM3_INV, /NAN),COUNT_NAN,COMPLEMENT=INDX_XVLD)
    IF COUNT_NAN EQ N_ELEMENTS(DIM3_INV) THEN BEGIN
      OUT_VAL(INC)=!VALUES.F_NAN
      CONTINUE ; NEXT INC VALUE IN FOR LOOP
    ENDIF
    DIM3_INV=DIM3_INV(INDX_XVLD);
    
    IF KEYWORD_SET(INVERSE_Z) THEN BEGIN
      DIMOUT_LUT=OUT_LUT_RNG_Y_BOL(INDX_XVLD);
      ; LOOK FOR INVERTED VALUE
      OUT_VAL(INC)=INTERP1D(DIM3_INV,DIMOUT_LUT,CUR_Z_VAL);
    ENDIF ELSE BEGIN
      DIMOUT_LUT=Z_LUT_RNG_Y_BOL(INDX_XVLD);
      OUT_VAL(INC)=INTERP1D(Z_LUT_RNG_Y_BOL,DIM3_INV,CUR_Z_VAL);
    ENDELSE

  ENDFOR

  RETURN, OUT_VAL
  
  
END