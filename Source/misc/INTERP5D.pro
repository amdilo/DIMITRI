;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      INTERP5D
;*
;* PURPOSE:
;*      FUNCTION TO PERFORM 5D INTERPOLATION THROUGH A 5-D LOOK-UP TABLE (DIRECT DATA RANGE RESTRICTION METHOD)
;*
;* CALLING SEQUENCE:
;*      OUT_VAL = INTERP6D(DIM1_LUT, DIM2_LUT, DIM3_LUT, DIM4_LUT, DIM5_LUT, DIM6_LUT, OUT_LUT, $
;*                         DIM1, DIM2, DIM3, DIM4, DIM5, DIM6, $
;*                         DIM1_BREAKPOINTS, DIM2_BREAKPOINTS, DIM3_BREAKPOINTS, DIM4_BREAKPOINTS, DIM5_BREAKPOINTS, DIM6_BREAKPOINTS, INVERSE_Z=INVERSE_Z) 
;*
;* INPUTS:
;*      DIM1_LUT             : LOOK-UP TABLE 1ST DIMENSION
;*      DIM2_LUT             : LOOK-UP TABLE 2ND DIMENSION
;*      DIM3_LUT             : LOOK-UP TABLE 3RD DIMENSION
;*      DIM4_LUT             : LOOK-UP TABLE 4TH DIMENSION
;*      DIM5_LUT             : LOOK-UP TABLE 5TH DIMENSION
;*      OUT_LUT              : OUTPUT DIMENSION OF THE 5-D LOOK-UP TABLE
;*      DIM1                 : INPUT 1ST DIMENSION DATA VALUES
;*      DIM2                 : INPUT 2ND DIMENSION DATA VALUES
;*      DIM3                 : INPUT 3RD DIMENSION DATA VALUES
;*      DIM4                 : INPUT 4TH DIMENSION DATA VALUES
;*      DIM5                 : INPUT 5TH DIMENSION DATA VALUES
;*      DIM1_BKPT_VALUES     : LUT_5D 1ST DIMENSION BREAKPOINT VALUES
;*      DIM2_BKPT_VALUES     : LUT_5D 2ND DIMENSION BREAKPOINT VALUES
;*      DIM3_BKPT_VALUES     : LUT_5D 3RD DIMENSION BREAKPOINT VALUES
;*      DIM4_BKPT_VALUES     : LUT_5D 4TH DIMENSION BREAKPOINT VALUES
;*      DIM5_BKPT_VALUES     : LUT_5D 5TH DIMENSION BREAKPOINT VALUES
;*
;* KEYWORDS:
;*      INVERSE_Z        : INVERT OUTPUT DIMENSION AND LAST INPUT DIMENSION TO INVERT LOOK-UP TABLE RESULT
;*                          USED FOR LOOK-UP TABLE INVERSION
;*
;* OUTPUTS:
;*      OUT_VAL = INTERPOLATED VALUE
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*
;* VALIDATION HISTORY:
;*      20 JAN 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION INTERP5D, DIM1_LUT, DIM2_LUT, DIM3_LUT, DIM4_LUT, DIM5_LUT, OUT_LUT, DIM1, DIM2, $
                    DIM3, DIM4, DIM5, DIM1_BKPT_VALUES, DIM2_BKPT_VALUES, DIM3_BKPT_VALUES, $
                    DIM4_BKPT_VALUES, DIM5_BKPT_VALUES, INVERSE_Z=INVERSE_Z

  ; BUILD NORMALIZE INPUTS FOR INTERPOLATION
  NB_VAL=N_ELEMENTS(DIM1)
  OUT_VAL = FLTARR(NB_VAL)
  
  ; IDENTIFY IF LINEAR INTERPOLATION ARE REQUIRED ON EACH DIMENSION (ON BREAKPOINT = SAMPLE/HOLD - OUT OF RANGE = VALUE AT LUT LIMIT)
  DIM1_DOINTERP = QUANTIZE_BOL_TOL(DIM1, DIM1_BKPT_VALUES, VAL_BOL=DIM1_VAL_BOL, VAL_TOL=DIM1_VAL_TOL)
  DIM2_DOINTERP = QUANTIZE_BOL_TOL(DIM2, DIM2_BKPT_VALUES, VAL_BOL=DIM2_VAL_BOL, VAL_TOL=DIM2_VAL_TOL)
  DIM3_DOINTERP = QUANTIZE_BOL_TOL(DIM3, DIM3_BKPT_VALUES, VAL_BOL=DIM3_VAL_BOL, VAL_TOL=DIM3_VAL_TOL)
  DIM4_DOINTERP = QUANTIZE_BOL_TOL(DIM4, DIM4_BKPT_VALUES, VAL_BOL=DIM4_VAL_BOL, VAL_TOL=DIM4_VAL_TOL)
  DIM5_DOINTERP = QUANTIZE_BOL_TOL(DIM5, DIM5_BKPT_VALUES, VAL_BOL=DIM5_VAL_BOL, VAL_TOL=DIM5_VAL_TOL)
  
  ; LOOP OVER INPUT DATA (DIM1,DIM2,DIM3,DIM4,DIM5) 
  FOR INC=0,NB_VAL-1 DO BEGIN
    
    ; -- DATA RANGE RESTRICTION ON 1ST DIMENSION (DIM1) -- 
    ; GET CURRENT INPUT DATA ON 1ST DIMENSION + BOTTOM LIMIT (BOL) + TOP LIMIT (TOL)  
    CUR_DIM1_VAL_BOL=DIM1_VAL_BOL(INC)
    CUR_DIM1_VAL_TOL=DIM1_VAL_TOL(INC)
    CUR_DIM1_VAL=DIM1(INC)
    
    ; GET CURRENT INPUT DATA ON 1ST DIMENSION + BOTTOM LIMIT (BOL) + TOP LIMIT (TOL)
    INDX_DIM1_LUT_BOL = WHERE(DIM1_LUT EQ CUR_DIM1_VAL_BOL)
    DIM2_LUT_RNG_DIM1_BOL = DIM2_LUT(INDX_DIM1_LUT_BOL)
    DIM3_LUT_RNG_DIM1_BOL = DIM3_LUT(INDX_DIM1_LUT_BOL)
    DIM4_LUT_RNG_DIM1_BOL = DIM4_LUT(INDX_DIM1_LUT_BOL)
    DIM5_LUT_RNG_DIM1_BOL = DIM5_LUT(INDX_DIM1_LUT_BOL)
    OUT_LUT_RNG_DIM1_BOL = OUT_LUT(INDX_DIM1_LUT_BOL)

    IF DIM1_DOINTERP(INC) EQ 0 THEN BEGIN
      ; NO INTERPOLATION REQUIRED DIM1 SAMPLE ON A DIM1 BKPT OR OUT OF DIM1 RANGE
      IF KEYWORD_SET(INVERSE_Z) THEN BEGIN
          ; IN CASE OF LUT INVERSION LAST DIMENSION (DIM5) IS THE TARGET VALUE TO FIND
          DIM1_INV = DIM5_LUT(INDX_DIM1_LUT_BOL)
          ;DIM1_INV = OUT_LUT(INDX_DIM1_LUT_BOL)
      ENDIF ELSE BEGIN
          ; OTHERWISE TARGET DIMENSION TO FIND IS OUT_LUT (CLASSICAL CASE)
          DIM1_INV = OUT_LUT(INDX_DIM1_LUT_BOL)
      ENDELSE
      ; IF NO INTERPOLATION REQUIRED ON DIM1 / TOL VALUES = BOL VALUES
      DIM2_LUT_RNG_DIM1_TOL = DIM2_LUT_RNG_DIM1_BOL
      DIM3_LUT_RNG_DIM1_TOL = DIM3_LUT_RNG_DIM1_BOL
      DIM4_LUT_RNG_DIM1_TOL = DIM4_LUT_RNG_DIM1_BOL
      DIM5_LUT_RNG_DIM1_TOL = DIM5_LUT_RNG_DIM1_BOL
      
    ENDIF ELSE BEGIN
      ; IF LINEAR INTERPOLATION IS REQUIRED > LOOK FOR TOP LIMIT ON REMAINING DIMENSIONS
      INDX_DIM1_LUT_TOL = WHERE(DIM1_LUT EQ CUR_DIM1_VAL_TOL)
      DIM2_LUT_RNG_DIM1_TOL = DIM2_LUT(INDX_DIM1_LUT_TOL)
      DIM3_LUT_RNG_DIM1_TOL = DIM3_LUT(INDX_DIM1_LUT_TOL)
      DIM4_LUT_RNG_DIM1_TOL = DIM4_LUT(INDX_DIM1_LUT_TOL)
      DIM5_LUT_RNG_DIM1_TOL = DIM5_LUT(INDX_DIM1_LUT_TOL)
      
      IF KEYWORD_SET(INVERSE_Z) THEN BEGIN
        ; FIND PROPER DIM5 VALUE REGARDING CURRENT DIM1 VALUE BW. DIM1 RANGE (BOL/TOL)
        DIM1_INV= INTERP1D_MULTIY([CUR_DIM1_VAL_BOL, CUR_DIM1_VAL_TOL], [ [DIM5_LUT(INDX_DIM1_LUT_BOL)] , [DIM5_LUT(INDX_DIM1_LUT_TOL)] ], CUR_DIM1_VAL);
      ENDIF ELSE BEGIN
        ; FIND PROPER OUTPUT VALUE REGARDING CURRENT DIM1 VALUE BW. DIM1 RANGE (BOL/TOL)        
        DIM1_INV= INTERP1D_MULTIY([CUR_DIM1_VAL_BOL, CUR_DIM1_VAL_TOL], [ [OUT_LUT(INDX_DIM1_LUT_BOL)] , [OUT_LUT(INDX_DIM1_LUT_TOL)] ], CUR_DIM1_VAL);
      ENDELSE      
      
    ENDELSE
    
    ; -- DATA RANGE RESTRICTION ON 2ND DIMENSION (DIM2) --
    ; GET CURRENT INPUT DATA ON 2ND DIMENSION + BOTTOM LIMIT (BOL) + TOP LIMIT (TOL)
    CUR_DIM2_VAL_BOL=DIM2_VAL_BOL(INC)
    CUR_DIM2_VAL_TOL=DIM2_VAL_TOL(INC)
    CUR_DIM2_VAL=DIM2(INC)
    
    ; GET CURRENT INPUT DATA ON 2ND DIMENSION + BOTTOM LIMIT (BOL) + TOP LIMIT (TOL)    
    INDX_DIM2_LUT_BOL = WHERE(DIM2_LUT_RNG_DIM1_BOL EQ CUR_DIM2_VAL_BOL)
    DIM3_LUT_RNG_DIM2_BOL = DIM3_LUT_RNG_DIM1_BOL(INDX_DIM2_LUT_BOL)
    DIM4_LUT_RNG_DIM2_BOL = DIM4_LUT_RNG_DIM1_BOL(INDX_DIM2_LUT_BOL)
    DIM5_LUT_RNG_DIM2_BOL = DIM5_LUT_RNG_DIM1_BOL(INDX_DIM2_LUT_BOL)
    
    OUT_LUT_RNG_DIM2_BOL = OUT_LUT_RNG_DIM1_BOL(INDX_DIM2_LUT_BOL)
    IF DIM2_DOINTERP(INC) EQ 0 THEN BEGIN
      ; NO INTERPOLATION REQUIRED DIM2 SAMPLE ON A DIM2 BKPT OR OUT OF DIM2 RANGE
      DIM2_INV = DIM1_INV(INDX_DIM2_LUT_BOL)
      DIM3_LUT_RNG_DIM2_TOL = DIM3_LUT_RNG_DIM2_BOL
      DIM4_LUT_RNG_DIM2_TOL = DIM4_LUT_RNG_DIM2_BOL
      DIM5_LUT_RNG_DIM2_TOL = DIM5_LUT_RNG_DIM2_BOL
      
    ENDIF ELSE BEGIN
      ; IF LINEAR INTERPOLATION IS REQUIRED > LOOK FOR TOP LIMIT ON REMAINING DIMENSIONS (DIM3/4&5)
      INDX_DIM2_LUT_TOL = WHERE(DIM2_LUT_RNG_DIM1_TOL EQ CUR_DIM2_VAL_TOL)
      DIM3_LUT_RNG_DIM2_TOL = DIM3_LUT_RNG_DIM1_TOL(INDX_DIM2_LUT_TOL)
      DIM4_LUT_RNG_DIM2_TOL = DIM4_LUT_RNG_DIM1_TOL(INDX_DIM2_LUT_TOL)
      DIM5_LUT_RNG_DIM2_TOL = DIM5_LUT_RNG_DIM1_TOL(INDX_DIM2_LUT_TOL)
      DIM2_INV= INTERP1D_MULTIY([CUR_DIM2_VAL_BOL, CUR_DIM2_VAL_TOL], [ [DIM1_INV(INDX_DIM2_LUT_BOL)] , [DIM1_INV(INDX_DIM2_LUT_TOL)] ], CUR_DIM2_VAL);

    ENDELSE

    ; -- DATA RANGE RESTRICTION ON 3RD DIMENSION (DIM2) --
    ; GET CURRENT INPUT DATA ON 3RD DIMENSION + BOTTOM LIMIT (BOL) + TOP LIMIT (TOL)
    CUR_DIM3_VAL_BOL=DIM3_VAL_BOL(INC)
    CUR_DIM3_VAL_TOL=DIM3_VAL_TOL(INC)
    CUR_DIM3_VAL=DIM3(INC)

    ; GET CURRENT INPUT DATA ON 3RD DIMENSION + BOTTOM LIMIT (BOL) + TOP LIMIT (TOL)
    INDX_DIM3_LUT_BOL = WHERE(DIM3_LUT_RNG_DIM2_BOL EQ CUR_DIM3_VAL_BOL)
    DIM4_LUT_RNG_DIM3_BOL = DIM4_LUT_RNG_DIM2_BOL(INDX_DIM3_LUT_BOL)
    DIM5_LUT_RNG_DIM3_BOL = DIM5_LUT_RNG_DIM2_BOL(INDX_DIM3_LUT_BOL)
    OUT_LUT_RNG_DIM3_BOL = OUT_LUT_RNG_DIM2_BOL(INDX_DIM3_LUT_BOL)    
    IF DIM3_DOINTERP(INC) EQ 0 THEN BEGIN
      ; NO INTERPOLATION REQUIRED DIM3 SAMPLE ON A DIM3 BKPT OR OUT OF DIM3 RANGE
      DIM3_INV = DIM2_INV(INDX_DIM3_LUT_BOL)
      DIM4_LUT_RNG_DIM3_TOL = DIM4_LUT_RNG_DIM3_BOL
      DIM5_LUT_RNG_DIM3_TOL = DIM5_LUT_RNG_DIM3_BOL
    ENDIF ELSE BEGIN
      ; IF LINEAR INTERPOLATION IS REQUIRED > LOOK FOR TOP LIMIT ON REMAINING DIMENSIONS 4&5
      INDX_DIM3_LUT_TOL = WHERE(DIM3_LUT_RNG_DIM2_TOL EQ CUR_DIM3_VAL_TOL)
      DIM4_LUT_RNG_DIM3_TOL = DIM4_LUT_RNG_DIM2_TOL(INDX_DIM3_LUT_TOL)
      DIM5_LUT_RNG_DIM3_TOL = DIM5_LUT_RNG_DIM2_TOL(INDX_DIM3_LUT_TOL)
      DIM3_INV= INTERP1D_MULTIY([CUR_DIM3_VAL_BOL, CUR_DIM3_VAL_TOL], [ [DIM2_INV(INDX_DIM3_LUT_BOL)] , [DIM2_INV(INDX_DIM3_LUT_TOL)] ], CUR_DIM3_VAL);
    ENDELSE

    ; -- DATA RANGE RESTRICTION ON 2ND DIMENSION (DIM2) --
    ; GET CURRENT INPUT DATA ON 2ND DIMENSION + BOTTOM LIMIT (BOL) + TOP LIMIT (TOL)
    CUR_DIM4_VAL_BOL=DIM4_VAL_BOL(INC)
    CUR_DIM4_VAL_TOL=DIM4_VAL_TOL(INC)
    CUR_DIM4_VAL=DIM4(INC)
    
    ; GET CURRENT INPUT DATA ON 4ND DIMENSION + BOTTOM LIMIT (BOL) + TOP LIMIT (TOL)    
    INDX_DIM4_LUT_BOL = WHERE(DIM4_LUT_RNG_DIM3_BOL EQ CUR_DIM4_VAL_BOL)
    DIM5_LUT_RNG_DIM4_BOL = DIM5_LUT_RNG_DIM3_BOL(INDX_DIM4_LUT_BOL)
    OUT_LUT_RNG_DIM4_BOL = OUT_LUT_RNG_DIM3_BOL(INDX_DIM4_LUT_BOL)
    IF DIM4_DOINTERP(INC) EQ 0 THEN BEGIN
      ; NO INTERPOLATION REQUIRED : DIM4 SAMPLE ON A DIM4 BKPT OR OUT OF DIM4 RANGE
      DIM4_INV = DIM3_INV(INDX_DIM4_LUT_BOL)
      DIM5_LUT_RNG_DIM4_TOL = DIM5_LUT_RNG_DIM4_BOL
    ENDIF ELSE BEGIN
      INDX_DIM4_LUT_TOL = WHERE(DIM4_LUT_RNG_DIM3_TOL EQ CUR_DIM4_VAL_TOL)
      DIM5_LUT_RNG_DIM4_TOL = DIM5_LUT_RNG_DIM3_TOL(INDX_DIM4_LUT_TOL)
      DIM4_INV= INTERP1D_MULTIY([CUR_DIM4_VAL_BOL, CUR_DIM4_VAL_TOL], [ [DIM3_INV(INDX_DIM4_LUT_BOL)] , [DIM3_INV(INDX_DIM4_LUT_TOL)] ], CUR_DIM4_VAL);
    ENDELSE

    ; FOCUS ON REMAINING DATA ON 5TH DIMENSION LIMITED TO 1D 
    ; FILTER OUT NAN VALUES ON X
    CUR_DIM5_VAL=DIM5(INC)
    INDX_XNAN=WHERE(FINITE(DIM4_INV, /NAN),COUNT_NAN,COMPLEMENT=INDX_XVLD)
    IF COUNT_NAN EQ N_ELEMENTS(DIM4_INV) THEN BEGIN
      OUT_VAL(INC)=!VALUES.F_NAN
      CONTINUE ; NEXT INC VALUE IN FOR LOOP
    ENDIF
    DIM4_INV=DIM4_INV(INDX_XVLD);
    
    IF KEYWORD_SET(INVERSE_Z) THEN BEGIN
      DIMOUT_LUT=OUT_LUT_RNG_DIM4_BOL(INDX_XVLD);
      ; LOOK FOR INVERTED VALUE OF DIM5 THROUGH DIMOUT VALUE
      OUT_VAL(INC)=INTERP1D(DIM4_INV,DIMOUT_LUT,CUR_DIM5_VAL);
    ENDIF ELSE BEGIN
      ; LOOK FOR DIMOUT THROUGH DIM5 DATA RANGE @ CUR_DIM5_VAL
      OUT_VAL(INC)=INTERP1D(DIM5_LUT_RNG_DIM4_BOL,DIM4_INV,CUR_DIM5_VAL);
    ENDELSE

  ENDFOR

  RETURN, OUT_VAL
  
  
END