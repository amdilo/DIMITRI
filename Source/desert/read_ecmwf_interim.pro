;-----------------------------------------
; NAME:
;  READ_ECMWF_INTERIM
; -------------------------
; PURPOSE:
; READ ECMWF TOTAL COLUMN OZONE (TCO) OR WATER VAPOUR (WV) VALUES AT GIVEN DATE, LAT AND LONG
; 
; -------------------------
;CALLING SEQUENCE:
;      RES =READ_ECMWF_INTERIM(DATE, LATITUDE, LONGITUDE, FIELD_NAME, /SHOW_MOVIE)
;
; -------------------------
; INPUT:
; - DATE : A SINGLE DATE OR A VECTOR OF N DATES - THE DATE MUST BE IN DECIMAL YEAR
; - LATITUDE :A SINGLE LATITUDE OR A VECTOR OF N LATITUDES
; - LONGITUDE : A SINGLE LONGITUDE OR A VECTOR OF N LONGITUDES
; - FIELD_NAME : 'WV' (FOR WATER VAPOUR) OR 'TCO' (FOR TOTAL COLUMN OZONE)
; 
; --------------------------------
;  KEYWORDS:
;    /SHOW_MOVIE : MAKES A MOVIE OF ALL REANALYSIS MAPS 
;    
; --------------------------------
; OUTPUTS:
; - A SINGLE VALUE OR A VECTOR OF N VALUES OF WV [IN kg/m2] OR TCO [DU]
;
; -------------------------
; EXAMPLE:
; 
; -------------------------
; TROUBLE SHOOTING:
;
; -------------------------
;COMMON BLOCKS:
;      NON
;
; -------------------------
; MODIFICATION HISTORY:
;        18 NOV 2012  - M BOUVET    - FIRST PROTOTYPE OF THE ROUTINE
;        15 JAN 2015  - B ALHAMMOUD - FIRST IMPLEMENTATION TO DIMITRI-V3.1A
;
; VALIDATION HISTORY:
;        21 JAN 2015 -  B ALHAMMOUD - LINUX 64-BIT MACHINE IDL 8.2, NOMINAL COMPILATION AND OPERATION.
;                                  TESTED FOR PARASOL OVER LIBYA4
;
; -------------------------

FUNCTION READ_ECMWF_INTERIM, DATE, LATITUDE, LONGITUDE, FIELD_NAME, SHOW_MOVIE=SHOW_MOVIE

;-----------------------------------------
; DEFINE CURRENT FUNCTION NAME

  FCT_NAME  = 'read_ECMWF_interim'

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DEFINE CONVERSION FACTORS - 
; ECMWF WV AND TCO COMES IN KG/M2
; THIS ROUTINE OUTPUTS THEM IN KG/M2 AND DOBSON
;;;;;;;;;;;;;;;;;;;;;;;;;;;

  IF FIELD_NAME EQ 'WV' THEN CONVERSION_FACTOR=1.
  IF FIELD_NAME EQ 'TCO' THEN CONVERSION_FACTOR=1./2.1415E-5

  ERA_DIR  = GET_DIMITRI_LOCATION('ECMWF_ERA')
  
  FILENAME=ERA_DIR+'ECMWF_'+FIELD_NAME+'_ENVISAT_era_Full_Resolution.nc

; GET A FILE ID
  FILEID=NCDF_OPEN(FILENAME)

; FIND THE NUMBER OF FILE ATTRIBUTES AND DATASETS
  FILEINQ_STRUCT=NCDF_INQUIRE(FILEID)
  
;HELP, FILEINQ_STRUCT, /STRUCTURE
;
;FOR I=0,FILEINQ_STRUCT.NVARS-1 DO BEGIN
;  VARINQ_STRUCT=NCDF_VARINQ(FILEID, I)
;  HELP, VARINQ_STRUCT, /STRUCTURE
;ENDFOR

; READ THE LAT, LONG, TIME AND ECMWF FIELD
  LAT_ID=NCDF_VARID(FILEID, 'latitude')
  LON_ID=NCDF_VARID(FILEID, 'longitude')
  TIME_ID=NCDF_VARID(FILEID, 'time')
  IF FIELD_NAME EQ 'TCO' THEN VAR_ID=NCDF_VARID(FILEID, 'tco3')
  IF FIELD_NAME EQ 'WV' THEN VAR_ID=NCDF_VARID(FILEID, 'tcwv')
  
;READ THE LAT AND LONG
  NCDF_VARGET, FILEID, LAT_ID, LAT
  NCDF_VARGET, FILEID, LON_ID, LON

;READ THE TIME
  NCDF_VARGET, FILEID, TIME_ID, TIME

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CONVERT THE TIME TO DECIMAL YEAR
; FIST THE TIME IS CONVERTED TO JULIAN DAY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; TIME IN HOURS SINCE 1900/01/01 AT 00:00 IS CONVERTED TO JULIAN DAY

  JULDAY_TIME=JULDAY(1, 1, 1900, 0.,0.,0.)+DOUBLE(TIME/24.)

; GET YEAR FROM THE JULDAY
  CALDAT, JULDAY_TIME, MONTH, DAY, YEAR

; COMPUTE THE NUMBER OF DAY IN THE YEAR
  DIY=DBLARR(N_ELEMENTS(JULDAY_TIME))+365.
  DIY(WHERE((YEAR MOD 4) EQ 0))=366.

; TURN THE TIME INTO A DECIMAL YEAR
  TIME_DECIMAL_YEAR=DOUBLE(YEAR)+(JULDAY_TIME-JULDAY(1, 1, YEAR, 0,0,0))/DIY

;;;;;;;;;;;;;;;;;;;;
; READ THE FIELD AND THE SCALING FACTOR / OFFSET / UNITS
;;;;;;;;;;;;;;;;;;;;;
  NCDF_VARGET, FILEID, VAR_ID, VAR

; GET THE SCALING FACTOR OF THE VARIABLE
  NCDF_ATTGET, FILEID, 3, 'scale_factor', SCALING_FACTOR
  NCDF_ATTGET, FILEID, 3, 'add_offset', OFFSET

; READ UNITS
  NCDF_ATTGET, FILEID, 3, 'units', UNITS
  PRINT, 'Data are in '+STRING(UNITS)
  
; DATA ARE CONVERTED LATER ON SO WE CHANGE THE UNIT AT THIS POINT
  IF FIELD_NAME EQ 'TCO' THEN UNITS='DU'

; GET THE VALUE FRO MISSING VALUES
  NCDF_ATTGET, FILEID, 3, 'missing_value', MISSING_VALUE


;CLOSE THE FILE
  NCDF_CLOSE, FILEID


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SHOW MOVIE OF THE FULL TIME SERIES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  IF KEYWORD_SET(SHOW_MOVIE) THEN BEGIN
;DEFINE COLOR BAR_SIZE
     LENGTH_COLOR_BAR=400.
     WIDTH_COLOR_BAR=50.
     
; DEFINE WINDOW SIZE
     X_SIZE_WINDOW=N_ELEMENTS(LON)
     Y_SIZE_WINDOW=N_ELEMENTS(LAT)+WIDTH_COLOR_BAR*2
     
; DEFINE IMAGE SIZE
     X_IMAGE_SIZE=N_ELEMENTS(LON)
     Y_IMAGE_SIZE=N_ELEMENTS(LAT)
     
     WINDOW, 10,RETAIN=2, XSIZE=X_SIZE_WINDOW, YSIZE=Y_SIZE_WINDOW
     DEVICE, DECOMPOSED=0
     LOADCT, 39
     
 ; TOP AND BOTTOM OF COLOR SCALE
     MAX_COLOR=(MAX(VAR)*SCALING_FACTOR+OFFSET)*CONVERSION_FACTOR
     MIN_COLOR=(MIN(VAR)*SCALING_FACTOR+OFFSET)*CONVERSION_FACTOR
  
 ;DEFINE COLOR BAR
     COLOR_BAR=(INDGEN(LENGTH_COLOR_BAR)/LENGTH_COLOR_BAR)#TRANSPOSE(FLTARR(WIDTH_COLOR_BAR)+1.)*(MAX_COLOR-MIN_COLOR)+MIN_COLOR
     COLOR_BAR_BANNER=FLTARR(X_SIZE_WINDOW, WIDTH_COLOR_BAR)
     COLOR_BAR_BANNER[X_SIZE_WINDOW/2-LENGTH_COLOR_BAR/2:X_SIZE_WINDOW/2+LENGTH_COLOR_BAR/2-1,*]=COLOR_BAR
    
  
  ; START LOOPING ON EACH REANALYSIS
     FOR I_STEP=0, N_ELEMENTS(TIME_DECIMAL_YEAR)-1 DO BEGIN
    
    ; ASSIGN VALUES TO THE MAP TO BE DISPLAYED
        MAP=(VAR[*,*,I_STEP]*SCALING_FACTOR+OFFSET)*CONVERSION_FACTOR
    
    ; REVERSE THE MAP
        MAP=REVERSE(MAP, 2)
    
    ; TRICK TO HAVE COLORS DISPLAYED PROPERLY
        MAP[0,0]=MAX_COLOR
    
    ;DEFINE IMAGE WHERE DATA ARE STORED
        TMP_IMAGE=FLTARR(X_SIZE_WINDOW, Y_SIZE_WINDOW)
        TMP_IMAGE[*,Y_SIZE_WINDOW-Y_IMAGE_SIZE:Y_SIZE_WINDOW-1]= MAP
    
        TVSCL,(TMP_IMAGE>MIN_COLOR)<MAX_COLOR, /NAN
   
    ; ADD COLOR BAR
        TVSCL,(COLOR_BAR_BANNER>MIN_COLOR)<MAX_COLOR
    
    ; ADD SCALE
        XYOUTS,X_SIZE_WINDOW/2-LENGTH_COLOR_BAR/2-50, WIDTH_COLOR_BAR+20, STRTRIM(STRING(MIN_COLOR, FORMAT='(I)'))+' '+STRING(UNITS), COLOR=255, /DEVICE, CHARSIZE=1
        XYOUTS,X_SIZE_WINDOW/2+LENGTH_COLOR_BAR/2-100, WIDTH_COLOR_BAR+20, STRTRIM(STRING(MAX_COLOR, FORMAT='(I)'))+' '+STRING(UNITS), COLOR=255, /DEVICE, CHARSIZE=1
        XYOUTS,LENGTH_COLOR_BAR/2, WIDTH_COLOR_BAR*2-20, 'Time :'+STRING(TIME_DECIMAL_YEAR[I_STEP], FORMAT='(F15.5)'), COLOR=255, /DEVICE, CHARSIZE=1
        XYOUTS,LENGTH_COLOR_BAR/2, WIDTH_COLOR_BAR*2-10, FIELD_NAME, COLOR=255, /DEVICE, CHARSIZE=1
    
        WRITE_JPEG, './ECMWF_ERA_Interim/maps/'+FIELD_NAME+'_'+STRING(I_STEP)+'.jpeg',TVRD(TRUE=3), TRUE=3, QUALITY=100
        
     ENDFOR
     
  ENDIF


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; IDENTIFY THE WV/TCO VALUES THAT ARE NEEDED FROM THE DATES, LATITUDES AND LONGITUDES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  N_VALUES_REQUESTED=N_ELEMENTS(DATE)

  INDEX_TO_RETRIEVE=INTARR(3, N_VALUES_REQUESTED)

  OUTPUT_VALUES=FLTARR(N_VALUES_REQUESTED)

  FOR I_VALUE=0, N_VALUES_REQUESTED-1 DO BEGIN

     DUMMY=MIN(ABS(LON-LONGITUDE[I_VALUE]), MIN_INDEX)
     INDEX_TO_RETRIEVE[0,I_VALUE]=MIN_INDEX
     DUMMY=MIN(ABS(LAT-LATITUDE[I_VALUE]), MIN_INDEX)
     INDEX_TO_RETRIEVE[1,I_VALUE]=MIN_INDEX
     DUMMY=MIN(ABS(TIME_DECIMAL_YEAR-DATE[I_VALUE]), MIN_INDEX)
     INDEX_TO_RETRIEVE[2,I_VALUE]=MIN_INDEX
     
  ENDFOR

  FOR I_VALUE=0, N_VALUES_REQUESTED-1 DO OUTPUT_VALUES[I_VALUE]=VAR[INDEX_TO_RETRIEVE[0,I_VALUE],INDEX_TO_RETRIEVE[1,I_VALUE],INDEX_TO_RETRIEVE[2,I_VALUE]]

; USE SCALING FACTOR AND OFFSET
  OUTPUT_VALUES=OUTPUT_VALUES*SCALING_FACTOR+OFFSET

; CONVERT TO kg/m2 THE WV AND DOBSON THE OZONE
  OUTPUT_VALUES=OUTPUT_VALUES*CONVERSION_FACTOR

  FOR I_VALUE=0, N_VALUES_REQUESTED-1 DO IF VAR[INDEX_TO_RETRIEVE[0,I_VALUE],INDEX_TO_RETRIEVE[1,I_VALUE],INDEX_TO_RETRIEVE[2,I_VALUE]] EQ MISSING_VALUE THEN OUTPUT_VALUES[I_VALUE]=-999.


  RETURN, OUTPUT_VALUES

END
