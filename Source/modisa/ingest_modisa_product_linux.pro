;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      INGEST_MODISA_PRODUCT_LINUX       
;* 
;* PURPOSE:
;*      INGESTS MODIS-AQUA L1B DATA INTO DIMITRI DATABASE. MULTIPLE PRODUCT 
;*	    EXTRACTION IS AVAILABLE BUT IT EXPECTS ALL FILES TO BE THE SAME REGION/PROCESSING. 
;*      OUTPUTS QUICKLOOK IMAGES, UPDATES DATABASE AND APPENDS DATA TO SAV FILE FOR 
;*      SPECIFIED REGION AND PROCESSING.
;* 
;* CALLING SEQUENCE:
;*      RES = INGEST_MODISA_PRODUCT_LINUX(IFILES)      
;* 
;* INPUTS:
;*      IFILES -  A STRING OR STRING ARRAY OF THE FULL PATH FILENAMES OF PRODUCTS 
;*                FOR INGESTION.      
;*
;* KEYWORDS:
;*      INPUT_FOLDER      - A STRING CONTAINING THE FULL PATH OF THE 'INPUT' FOLDER, IF 
;*                          NOT PROVIDED THEN IT IS DERIVED FROM THE FILENAME
;*      ICOORDS           - A FOUR ELEMENT FLOATING-POINT ARRAY CONTAINING THE NORTH, SOUTH, 
;*                          EAST AND WEST COORDINATES OF THE ROI, E.G [50.,45.,10.,0.]
;*      NB_PIX_THRESHOLD  - NUMBER OF PIXELS WITHIN ROI TO BE ACCEPTED
;*      ENDIAN_SZE        - MACHINE ENDIAN SIZE (0: LITTLE, 1: BIG), IF NOT PROVIDED 
;*                          THEN COMPUTED.
;*      COLOUR_TABLE      - USER DEFINED IDL COLOUR TABLE INDEX (DEFAULT IS 39)
;*      PLOT_XSIZE        - WIDTH OF GENERATED PLOTS (DEFAULT IS 700PX)
;*      PLOT_YSIZE        - HEIGHT OF GENERATED PLOTS (DEFAULT IS 400PX)
;*      NO_ZBUFF          - IF SET THEN PLOTS ARE GENERATED IN WINDOWS AND NOT 
;*                          WIHTIN THE Z-BUFFER.
;*      NO_QUICKLOOK      - IF SET THEN QUICKLOOKS ARE NOT GENERATED FOR IFILES.
;*      VERBOSE           - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS  - 1: NO ERRORS REPORTED, (-1) OR 0: ERRORS DURING INGESTION	
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*        04 JUL 2005 - M BOUVET  - PROTOTYPE DIMITRI VERSION
;*        23 MAR 2011 - C KENT    - DIMITRI-2 V1.0
;*        01 JUL 2011 - C KENT    - ADDED ANGLE CORRECTOR
;*        04 JUL 2011 - C KENT    - ADDED AUX INFO TO OUTPUT SAV AND CLEANED UP SOME CODE
;*        12 JUL 2011 - C KENT    - FIXED BUG ON AUX INFO CALLING
;*        25 AUG 2011 - C KENT    - ADDED CHECK ON VALID ROI PIXEL AVERAGING
;*        12 SEP 2011 - C KENT    - ADDED NETCDF OUTPUT
;*        08 MAR 2012 - C KENT    - ADDED ROI COVERAGE
;*
;* VALIDATION HISTORY:
;*        12 APR 2010 - C KENT    - WINDOWS 32BIT MACHINE IDL 7.1: COMPILATION AND EXECUTION 
;*                                  SUCCESSFUL. TESTED MULTIPLE OPTIONS ON MULTIPLE 
;*                                  PRODUCTS
;*        12 APR 2011 - C KENT    - LINUX 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION INGEST_MODISA_PRODUCT_LINUX,IFILES,INPUT_FOLDER=INPUT_FOLDER,ICOORDS=ICOORDS,INGEST_SUNGLINT=INGEST_SUNGLINT,$
         COLOUR_TABLE=COLOUR_TABLE,PLOT_XSIZE=PLOT_XSIZE,PLOT_YSIZE=PLOT_YSIZE,NO_ZBUFF=NO_ZBUFF,NO_QUICKLOOK=NO_QUICKLOOK,$
         VERBOSE=VERBOSE

	FCT_NAME = 'INGEST_MODISA_PRODUCT_LINUX'

	STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
	STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')


;------------------------
; KEYWORD PARAMETER CHECK - NOTE, ASSUMES ALL PRODUCT ARE RELATED TO THE SAME REGION/PROCESSING

  IF STRCMP(STRING(IFILES[0]),'') THEN BEGIN
    PRINT, FCT_NAME + ' - ERROR, NO INPUT FILES PROVIDED, RETURNING...'
    RETURN, STATUS_ERROR
  ENDIF  
  IF N_ELEMENTS(INPUT_FOLDER) EQ 0 THEN INPUT_FOLDER = GET_DIMITRI_LOCATION('INPUT')

  ; GET THE CONFIGURATION VALUES (THRESHOLDS AND STRING VALUES)
  DL = GET_DIMITRI_LOCATION('DL')
  MISSING_VALUE_FLT=FLOAT(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))
  MISSING_VALUE_DBL=DOUBLE(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))
  MISSING_VALUE_LONG=LONG(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))
  SG_THETA_N_MIN=GET_DIMITRI_LOCATION('MIN_THETA_N_SG_PROCESS')               ; DEFAULT = 0?
  SG_THETA_N_MAX=GET_DIMITRI_LOCATION('MAX_THETA_N_SG_PROCESS')               ; DEFAULT = 4?
  SG_THETA_R_MAX=GET_DIMITRI_LOCATION('MAX_THETA_R_SG_PROCESS')               ; DEFAULT = 36?
  MIN_PIXEL_NB_INGEST_PROCESS = GET_DIMITRI_LOCATION('MIN_PIXEL_NB_INGEST_PROCESS')
  OUTPUT_FOLDER = GET_DIMITRI_LOCATION('INGESTION_OUTPUT')

  TEMP = STRSPLIT(IFILES[0],DL,/EXTRACT)

  TEMP_INF  = WHERE(STRCMP(TEMP,'Input') EQ 1)
  TEMP_INF  = TEMP_INF(N_ELEMENTS(TEMP_INF)-1)
  IREGION   = TEMP[TEMP_INF+1]
  IREGION   = STRMID(IREGION,5,STRLEN(IREGION)) 
  SENSOR    = TEMP[TEMP_INF+2]
  IPROC     = TEMP[TEMP_INF+3]
  IPROC     = STRMID(IPROC,5,STRLEN(IPROC)) 
  CFIG_DATA = GET_DIMITRI_CONFIGURATION()  
  AQA_SITE_TYPE = GET_SITE_TYPE(IREGION,VERBOSE=VERBOSE) 
  
  IF STRUPCASE(AQA_SITE_TYPE) EQ 'OCEAN' THEN AQA_SENSOR = SENSOR+'_O' ELSE AQA_SENSOR = SENSOR+'_L'
  
  IF N_ELEMENTS(ICOORDS) EQ 0 THEN BEGIN
    PRINT, 'MODISA L1B INGEST: NO ROI COORDINATES PROVIDED, USING DEFAULT OF [90.,-90,180.0,-180.0]'
    ICOORDS = [90.,-90.,180.0,-180.0]
  ENDIF
  IF N_ELEMENTS(COLOUR_TABLE) EQ 0 THEN BEGIN
    PRINT, 'MODISA L1B INGEST: NO COLOR_TABLE SET, USING DEFAULT OF 39'
    COLOUR_TABLE = CFIG_DATA.(1)[2]
  ENDIF
  IF N_ELEMENTS(PLOT_XSIZE) EQ 0 THEN BEGIN
    PRINT, 'MODISA L1B INGEST: PLOT_XSIZE NOT SET, USING DEFAULT OF 700'
    PLOT_XSIZE = CFIG_DATA.(1)[0]
  ENDIF
  IF N_ELEMENTS(PLOT_YSIZE) EQ 0 THEN BEGIN
    PRINT, 'MODISA L1B INGEST: PLOT_YSIZE NOT SET, USING DEFAULT OF 400'
    PLOT_YSIZE = CFIG_DATA.(1)[1]
  ENDIF  


;------------------------
; GET NUMBER OF IFILES 

  NB_FILES = N_ELEMENTS(IFILES)

;-----------------------------------------------
; GET THE DATABASE STRUCTURE
 ; IF INGEST_SUNGLINT EQ 1 THEN DB_DATA=GET_DIMITRI_SG_TEMPLATE(NB_FILES,/DB) ELSE 
  DB_DATA=GET_DIMITRI_TEMPLATE(NB_FILES,/DB)
  
;-----------------------------------------------  
; ADD DATA OF INGESTION TO DB_DATA

  TEMP = SYSTIME()
  TEMP = STRMATCH(STRMID(TEMP,8,1),' ') ? '0'+STRUPCASE(STRING(STRMID(TEMP,9,1)+'-'+STRMID(TEMP,4,3)+'-'+STRMID(TEMP,20,4))) : STRUPCASE(STRING( STRMID(TEMP,8,2)+'-'+STRMID(TEMP,4,3)+'-'+STRMID(TEMP,20,4)))
  DB_DATA.DIMITRI_DATE = TEMP 

;-----------------------------------------------
; ADD REGION, SENSOR AND PROC VERSION TO DB_DATA

  DB_DATA.SITE_NAME = IREGION
  DB_DATA.SITE_TYPE = SITE_TYPE
  DB_DATA.SITE_COORDINATES = 'NONE'
  DB_DATA.SENSOR = SENSOR
  DB_DATA.PROCESSING_VERSION = IPROC
 
	;-----------------------------------------
	; SET INITIAL VALUES 

  DB_DATA.L1_INGESTED_FILENAME = 'NONE'
  DB_DATA.ROI_STATUS = -1
  DB_DATA.ROI_PIX_NUM = -1
  DB_DATA.THETA_N_MEAN = -1
  DB_DATA.THETA_R_MEAN = -1
  DB_DATA.AUTO_CS_1_NAME = GET_DIMITRI_LOCATION('AUTO_CS_1_NAME')
  DB_DATA.AUTO_CS_1_MEAN = -1
  DB_DATA.ROI_CS_1_CLEAR_PIX_NUM = -1
  DB_DATA.AUTO_CS_2_NAME = GET_DIMITRI_LOCATION('AUTO_CS_2_NAME')
  DB_DATA.AUTO_CS_2_MEAN = -1
  DB_DATA.ROI_CS_2_CLEAR_PIX_NUM = -1
  DB_DATA.BRDF_CS_MEAN = -1
  DB_DATA.SSV_CS_MEAN = -1
  DB_DATA.MANUAL_CS = -1 
  DB_DATA.ERA_WIND_SPEED_MEAN = -1
  DB_DATA.ERA_WIND_DIR_MEAN = -1
  DB_DATA.ERA_OZONE_MEAN = -1
  DB_DATA.ERA_PRESSURE_MEAN = -1
  DB_DATA.ERA_WATERVAPOUR_MEAN = -1
  DB_DATA.ESA_CHLOROPHYLL_MEAN = -1

;----------------------------------
; DEFINE MODISA SPECIFIC PARAMETERS 

  NB_BANDS_1KM = 15
  NB_BANDS_500 = 5
  NB_BANDS_250 = 2
  NB_BANDS = NB_BANDS_1KM+NB_BANDS_500+NB_BANDS_250
  NB_DIRECTIONS = SENSOR_DIRECTION_INFO(SENSOR)
  
;----------------------------------
; DEFINE THE STATISTICAL ARRAYS
	ROI_AVG_TOA_REF= MAKE_ARRAY(NB_BANDS,NB_FILES,/FLOAT,VALUE=MISSING_VALUE_FLT)
	ROI_STD_TOA_REF= MAKE_ARRAY(NB_BANDS,NB_FILES,/FLOAT,VALUE=MISSING_VALUE_FLT)
	
	NB_ROI_PX        = FLTARR(NB_FILES)
	GOOD_RECORD      = MAKE_ARRAY(NB_FILES,/INTEGER,VALUE=0)
	IFILE_DATE 	     = DBLARR(5,NB_FILES)      ; CONTAINS YEAR,MONTH,DAY,DOY,DECIMEL_YEAR
	IFILE_VIEW 	     = DBLARR(4,NB_FILES)      ; CONTAINS SENSOR ZENITH,SENSOR AZIMUTH,SOLAR ZENITH,SOLAR AZIMUTH
        IFILE_AUX        = FLTARR(12,NB_FILES)     ; CONTAINS OZONE,PRESSURE,RELHUMIDITY,WIND_ZONAL,WIND_MERID, AND WVAP (MU AND SIGMA)
  
;---------------------------------
; IF ONLY 1 PRODUCT FOR INGESTION THEN REFORM ARRAYS
  
  IF NB_FILES EQ 1 THEN BEGIN
    ROI_AVG_TOA_REF  = REFORM(ROI_AVG_TOA_REF,NB_BANDS,NB_FILES)
    ROI_STD_TOA_REF  = REFORM(ROI_STD_TOA_REF,NB_BANDS,NB_FILES)
    IFILE_DATE       = REFORM(IFILE_DATE,5,NB_FILES)
    IFILE_VIEW       = REFORM(IFILE_VIEW,4,NB_FILES)
    IFILE_AUX        = REFORM(IFILE_AUX,12,NB_FILES)
  ENDIF

  IF KEYWORD_SET(VERBOSE) THEN BEGIN
    PRINT, 'MODISA L1B INGEST: DEFINITION OF OUTPUT ARRAYS:'
    HELP, ROI_AVG_TOA_REF,ROI_STD_TOA_REF,NB_ROI_PX,GOOD_RECORD,IFILE_DATE,IFILE_VIEW
  ENDIF

;---------------------------------
; ADD DATA TO NETCDF OUTPUT STRUCTURE

  NCDF_OUT = GET_DIMITRI_EXTRACT_NCDF_DATA_STRUCTURE(NB_FILES,NB_BANDS,NB_DIRECTIONS)
  NCDF_OUT.ATT_FNAME  = 'Site_'+IREGION+'_'+SENSOR+'_'+'Proc_'+IPROC+'.nc'
  NCDF_OUT.ATT_TOOL   = GET_DIMITRI_LOCATION('TOOL')
  NCDF_OUT.ATT_SENSOR = SENSOR
  NCDF_OUT.ATT_PROCV  = IPROC
  NCDF_OUT.ATT_PRES   = STRTRIM(STRING(SENSOR_PIXEL_SIZE(SENSOR)),2)+' KM'
  NCDF_OUT.ATT_NBANDS = STRTRIM(STRING(NB_BANDS),2)
  NCDF_OUT.ATT_NDIRS  = STRTRIM(STRING(NB_DIRECTIONS[0]),2)
  NCDF_OUT.ATT_SITEN  = IREGION
  NCDF_OUT.ATT_SITEC  = STRJOIN(STRTRIM(STRING(ICOORDS),2),' ')
  NCDF_OUT.ATT_SITET  = AQA_SITE_TYPE
  
;----------------------------------
; START MAIN LOOP OVER EACH IFILE
 
  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: STARTING INGESTION LOOP ON MERIS PRODUCTS'
	FOR IN_FNAME=0,NB_FILES-1 DO BEGIN; IN_FNAME IS RESERVED FOR LOOPS WITHIN THE INGESTION ROUTINES

    TEMP = STRSPLIT(IFILES[IN_FNAME],DL,/EXTRACT)
    DB_DATA.FILENAME[IN_FNAME] = TEMP[N_ELEMENTS(TEMP)-1]

  IF KEYWORD_SET(VERBOSE) THEN BEGIN
      PRINT, 'MODISA INGEST [' + STRTRIM(STRING(IN_FNAME+1),1) + ' / ' + STRTRIM(STRING(NB_FILES),1) + '] : ' + DB_DATA.FILENAME[IN_FNAME]
  ENDIF


;------------------------------------------
; RETRIEVE AUX DATA FILENAMES FOR DB_DATA

    TEMP = GET_MODISA_AUX_FILES(IFILES[IN_FNAME],VERBOSE=VERBOSE)	

    DB_DATA.AUX_DATA_1[IN_FNAME] = TEMP[0]
    DB_DATA.AUX_DATA_2[IN_FNAME] = TEMP[1] 
    DB_DATA.AUX_DATA_3[IN_FNAME] = TEMP[2] 
    DB_DATA.AUX_DATA_4[IN_FNAME] = TEMP[3] 
    DB_DATA.AUX_DATA_5[IN_FNAME] = TEMP[4] 
    DB_DATA.AUX_DATA_6[IN_FNAME] = TEMP[5] 
    DB_DATA.AUX_DATA_7[IN_FNAME] = TEMP[6] 
    DB_DATA.AUX_DATA_8[IN_FNAME] = TEMP[7] 
    DB_DATA.AUX_DATA_9[IN_FNAME] = TEMP[8] 
    DB_DATA.AUX_DATA_10[IN_FNAME] = TEMP[9] 
       
;----------------------------------
; RETRIEVE DATE INFORMATION 

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: RETRIEVING DATE INFORMATION'
    TEMP_DATE = GET_MODISA_DATE_INFO(IFILES[IN_FNAME],VERBOSE=VERBOSE)
    
		ACQ_YEAR  = STRING(FORMAT="(I4)", STRTRIM(TEMP_DATE.YEAR,1))
		ACQ_MONTH = STRING(FORMAT="(I2.2)", STRTRIM(TEMP_DATE.MONTH,1))
		ACQ_DAY   = STRING(FORMAT="(I2.2)", STRTRIM(TEMP_DATE.DAY,1))

		DATE_HR  = STRING(FORMAT="(I2.2)", STRTRIM(TEMP_DATE.HOUR,1))
		DATE_MIN = STRING(FORMAT="(I2.2)", STRTRIM(TEMP_DATE.MINUTE,1))

    IFILE_DATE[0,IN_FNAME]  = TEMP_DATE.YEAR
    IFILE_DATE[1,IN_FNAME]  = TEMP_DATE.MONTH
    IFILE_DATE[2,IN_FNAME]  = TEMP_DATE.DAY
    IFILE_DATE[3,IN_FNAME]  = TEMP_DATE.DOY
    IFILE_DATE[4,IN_FNAME]  = TEMP_DATE.DYEAR
    
;----------------------------------
; ADD DATE INFORMATION TO DB_DATA

    DB_DATA.YEAR[IN_FNAME]  = IFILE_DATE[0,IN_FNAME]
    DB_DATA.MONTH[IN_FNAME] = IFILE_DATE[1,IN_FNAME]
    DB_DATA.DAY[IN_FNAME]   = IFILE_DATE[2,IN_FNAME]
    DB_DATA.DOY[IN_FNAME]   = IFILE_DATE[3,IN_FNAME]
    DB_DATA.DECIMAL_YEAR[IN_FNAME] = IFILE_DATE[4,IN_FNAME]
	
		;----------------------------------
		; STORE DATE IN NETCDF STRUCTURE

    NCDF_OUT.VAR_PNAME[IN_FNAME]  = DB_DATA.L1_FILENAME[IN_FNAME] 
		NCDF_OUT.VAR_PTIME[IN_FNAME]  = STRJOIN(STRSPLIT(TEMP_DATE.CMD_DATE,'-',/EXTRACT))+' '+STRMID(TEMP_DATE.CMD_TIME,0,2)+':'+STRMID(TEMP_DATE.CMD_TIME,3,2)+':'+STRMID(TEMP_DATE.CMD_TIME,6,2)
		NCDF_OUT.VAR_DTIME[IN_FNAME]  = DB_DATA.DECIMAL_YEAR[IN_FNAME]

;----------------------------------
; RETRIEVE INPUT FILE L1B RADIANCE 

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: RETRIEVING REFLECTANCE INFORMATION'
    TOA_REF_1KM = GET_MODISA_L1B_REFLECTANCE_LINUX(IFILES[IN_FNAME],/RES_1KM,VERBOSE=VERBOSE)
    TEMP_REF = TOA_REF_1KM[*,*,0]
    
;----------------------------------
; RETRIEVE INPUT FILE GEOLOCATION

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: RETRIEVING GEOLOCATION INFORMATION'
		IFILE_GEO = GET_MODISA_LAT_LON(IFILES[IN_FNAME],VERBOSE=VERBOSE)

		;------------------------------------------
		; RETRIEVE VIEWING GEOMETRIES

    IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ' - RETRIEVING VIEWING GEOMETRIES'
    TEMP = GET_MODISA_VIEWING_GEOMETRIES(IFILES[IN_FNAME],VERBOSE=VERBOSE)
    TEMP_ANGLES = DIMITRI_ANGLE_CORRECTOR(TEMP.VZA,TEMP.VAA,TEMP.SZA,TEMP.SAA,VERBOSE=VERBOSE)

		;------------------------------------------
		; RETRIEVE SUNGLINT ANGLES FOR SUNGLINT OR OCEAN SITES

		IF (INGEST_SUNGLINT EQ 1) OR STRCMP(DB_DATA.SITE_TYPE[IN_FNAME], 'OCEAN', /FOLD_CASE) THEN BEGIN   
			RES = GET_SUNGLINT_ANGLES( TEMP_ANGLES.SZA, TEMP_ANGLES.VZA, TEMP_ANGLES.SAA, TEMP_ANGLES.VAA, THETA_N=THETA_N, THETA_R=THETA_R)      

			DB_DATA.THETA_N_MEAN[IN_FNAME] = MEAN(THETA_N)
			DB_DATA.THETA_R_MEAN[IN_FNAME] = MEAN(THETA_R)                

		ENDIF

		;------------------------------------------
		; PROCESS SELECTION FOR SUNGLINT DETECTION/INGESTION OR NOT

    IF (INGEST_SUNGLINT EQ 1) THEN BEGIN

      ; SUNGLINT DETECTION
      LATI=IFILE_GEO.LAT
      LONGI=IFILE_GEO.LON

			; FIND SUNGLINT SPOT
      ROI_INDEX=WHERE(THETA_N GT SG_THETA_N_MIN AND $
                      THETA_N LE SG_THETA_N_MAX AND $ 
                      TEMP_ANGLES.SZA GT 0 AND $
                      LATI NE 0 , $
                      NB_PIX, COMPLEMENT=IDNOSG, NCOMPLEMENT=COUNT_NOSG) 
                      
			IF NB_PIX EQ 0 THEN BEGIN
			  IFILE_VIEW[*,IN_FNAME]= MISSING_VALUE_FLT
				IFILE_AUX[*,IN_FNAME] = MISSING_VALUE_FLT
				ROI_AVG_TOA_REF(*,IN_FNAME) = MISSING_VALUE_FLT
				ROI_STD_TOA_REF(*,IN_FNAME) = MISSING_VALUE_FLT
				
				GOTO, NO_ROI ; NEXT FILE     
		  ENDIF
      
      IF KEYWORD_SET(VERBOSE) THEN BEGIN
        PRINT, ' SUNGLINT AREA FOUND >> RAW PIXELS NB = ' + STRTRIM(STRING(NB_PIX),1)
      ENDIF
      
      ; OTHERWISE ROI IN SUNGLINT SPOT
      DB_DATA.ROI_PIX_NUM[IN_FNAME] = NB_PIX 
      
      ; NORTH HEMISPHERE 
      ICOORDS[0]=MAX(LATI(ROI_INDEX))
      ICOORDS[1]=MIN(LATI(ROI_INDEX))
      ; WEST HEMISPHERE  
      ICOORDS[2]=MAX(LONGI(ROI_INDEX))
      ICOORDS[3]=MIN(LONGI(ROI_INDEX))

			; UPDATE OF NETCDF FILES WITH SUNGLINT SPOT COORDINATES
			COORDINATES = STRJOIN(STRTRIM(STRING(ICOORDS),2),' ') ; NORTH SOUTH EAST WEST      
			DB_DATA.SITE_COORDINATES[IN_FNAME] = COORDINATES
			NCDF_OUT.ATT_SITEC  = COORDINATES

		ENDIF ELSE BEGIN
   		; CLASSICAL INGEST / NOT FOR SUNGLINT
   	
	    ; RETRIEVE INDEX OF NOMINAL DATA WITHIN ROI
			IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ' - RETRIEVING INDEX OF PIXELS WITHIN ROI (PROD GEO: LAT=',IFILE_GEO.LAT[1], ' / LON=',IFILE_GEO.LON[1], ')'
			ROI_INDEX = WHERE($
						IFILE_GEO.LAT LT ICOORDS[0] AND $
						IFILE_GEO.LAT GT ICOORDS[1] AND $
						IFILE_GEO.LON LT ICOORDS[2] AND $
						IFILE_GEO.LON GT ICOORDS[3] AND $
						TOA_REF_1KM[*,*,0] GT 0.0  , $
						NB_PIX $
						)

			; IF NO PIXELS IN ROI THEN DO NOT RETRIEVE TOA REFLECTANCE
			IF NB_PIX EQ 0 THEN BEGIN
			  IFILE_VIEW[*,IN_FNAME]= MISSING_VALUE_FLT
				IFILE_AUX[*,IN_FNAME] = MISSING_VALUE_FLT
				ROI_AVG_TOA_REF(*,IN_FNAME) = MISSING_VALUE_FLT
				ROI_STD_TOA_REF(*,IN_FNAME) = MISSING_VALUE_FLT
				
				GOTO, NO_ROI ; NEXT FILE     
		  ENDIF

    	IF KEYWORD_SET(VERBOSE) THEN BEGIN
      	PRINT, ' SITE AREA FOUND >> RAW PIXELS NB = ' + STRTRIM(STRING(NB_PIX),1)
    	ENDIF
    	
    	DB_DATA.ROI_PIX_NUM[IN_FNAME] = NB_PIX	
			DB_DATA.SITE_COORDINATES[IN_FNAME] = NCDF_OUT.ATT_SITEC      

  	ENDELSE

		;-----------------------------------------
		; CHECK ROI COVERAGE

		IF NB_PIX GT MIN_PIXEL_NB_INGEST_PROCESS THEN BEGIN
			DB_DATA.ROI_STATUS[IN_FNAME] = 1
			IF INGEST_SUNGLINT EQ 0 THEN DB_DATA.ROI_STATUS[IN_FNAME] = CHECK_ROI_COVERAGE(IFILE_GEO.LAT,IFILE_GEO.LON,ROI_INDEX,ICOORDS,VERBOSE=VERBOSE)
		ENDIF ELSE BEGIN
			DB_DATA.ROI_STATUS[IN_FNAME] = 0
			GOTO, NO_ROI
		ENDELSE  
		
		GOOD_RECORD[IN_FNAME]=1

    ; GET NCDF INGESTION OUTPUT STRUCTURE
    ;------------------------------------

    NCDF_INGEST_STRUCT = GET_NCDF_INGEST_STRUCT( NB_PIX, NB_DIRECTIONS, NB_BANDS, VERBOSE=VERBOSE)
    NCDF_INGEST_STRUCT.GLOBAL_ATT.SITE_NAME = DB_DATA.SITE_NAME[IN_FNAME]
    NCDF_INGEST_STRUCT.GLOBAL_ATT.SITE_TYPE = DB_DATA.SITE_TYPE[IN_FNAME]
    NCDF_INGEST_STRUCT.GLOBAL_ATT.SENSOR = DB_DATA.SENSOR[IN_FNAME]
    NCDF_INGEST_STRUCT.GLOBAL_ATT.PROCESSING_VERSION = DB_DATA.PROCESSING_VERSION[IN_FNAME]
    NCDF_INGEST_STRUCT.GLOBAL_ATT.ACQUISITION_DATE = ACQ_YEAR + '-' + ACQ_MONTH + '-' + ACQ_DAY + ' ' + DATE_HR + ':' + DATE_MIN
    NCDF_INGEST_STRUCT.GLOBAL_ATT.L1_FILENAME = DB_DATA.L1_FILENAME[IN_FNAME] 


		;------------------------------------------
		; GENERATE A QUICKLOOK WITH THE ROI OVERLAID

		IF N_ELEMENTS(NO_QUICKLOOK) EQ 0 THEN BEGIN

			OUTPUT_QL_FOLDER   = OUTPUT_FOLDER+'Site_'+IREGION+DL+SENSOR+DL+'Proc_'+IPROC+DL+ ACQ_YEAR + DL
			OUTPUT_QL_FILENAME = OUTPUT_QL_FOLDER + IREGION + '_' + SENSOR + '_' + IPROC +  '_' + ACQ_YEAR + ACQ_MONTH + ACQ_DAY + '_' + DATE_HR + DATE_MIN

			OUT_FOLDER_INFO = FILE_INFO(OUTPUT_QL_FOLDER)
			IF OUT_FOLDER_INFO.DIRECTORY EQ 0 THEN BEGIN
				FILE_MKDIR, OUTPUT_QL_FOLDER
				IF KEYWORD_SET(VERBOSE) THEN BEGIN      
					PRINT, FCT_NAME + ' - WARNING, OUTPUT YEAR FOLDER ''' + OUTPUT_QL_FOLDER + ''' NOT FOUND >> CREATED'
				ENDIF
			ENDIF

			IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ' - GENERATE QUICKLOOK OF PRODUCT'
			OUTPUT_QL_FILENAME = OUTPUT_QL_FILENAME + '.jpg'
			IF FIX(CFIG_DATA.(1)[3]) EQ 1 THEN QL_STATUS =  GET_MODISA_QUICKLOOK(IFILES[IN_FNAME],OUTPUT_QL_FILENAME,/ROI,/RGB,ICOORDS=ICOORDS,VERBOSE=VERBOSE) $
         ELSE QL_STATUS =  GET_MODISA_QUICKLOOK_LINUX(IFILES[IN_FNAME],/ROI,ICOORDS=ICOORDS,QL_QUALITY=QL_QUALITY,VERBOSE=VERBOSE)

			IF KEYWORD_SET(VERBOSE) THEN $
				IF QL_STATUS EQ STATUS_ERROR THEN PRINT, FCT_NAME + ' - QUICKLOOK GENERATION FAILED - ',IFILES[IN_FNAME] $
					ELSE PRINT, FCT_NAME + ' - QUICKLOOK GENERATION SUCCESS' 
		ENDIF   


		;--------------------------------
		; INDEX OF ROW/COLUM IN THE IMAGE 
		s = SIZE(IFILE_GEO.LAT)
		NCOL = s(1)
		CS_COL = ROI_INDEX MOD NCOL
		CS_ROW = ROI_INDEX / NCOL

		;------------------------------------------
		; DEFINE ARRAY TO HOLD CS RHO
		ADDBANDS=4
		
		CS_RHO = MAKE_ARRAY(NB_PIX,NB_BANDS+ADDBANDS,/FLOAT,VALUE=MISSING_VALUE_FLT)

		;------------------------------------------
		; DEFINE ARRAY TO HOLD LAT/LON
		ADDANG=6  ; LAT/LON + 4 ANGLES (SZA, SAA, VZA, VAA)
  	NBCOL_CS_LATLON = ADDANG + NB_BANDS + ADDBANDS
  
		CS_LATLON = FLTARR(NB_PIX,NBCOL_CS_LATLON)

		CS_LATLON[*,0]=IFILE_GEO.LAT(ROI_INDEX)
		CS_LATLON[*,1]=IFILE_GEO.LON(ROI_INDEX)

;------------------------------------------
; RETRIEVE VIEWING GEOMETRIES
        
    IFILE_VIEW[0,IN_FNAME]=MEAN(TEMP_ANGLES.VZA[ROI_INDEX])
    IFILE_VIEW[1,IN_FNAME]=MEAN(TEMP_ANGLES.VAA[ROI_INDEX])
    IFILE_VIEW[2,IN_FNAME]=MEAN(TEMP_ANGLES.SZA[ROI_INDEX])
    IFILE_VIEW[3,IN_FNAME]=MEAN(TEMP_ANGLES.SAA[ROI_INDEX])

		;----------------------------------   

		CS_LATLON[*,2]=TEMP_ANGLES.SZA[ROI_INDEX] ; SZA  
		CS_LATLON[*,3]=TEMP_ANGLES.SAA[ROI_INDEX] ; SAA   
		CS_LATLON[*,4]=TEMP_ANGLES.VZA[ROI_INDEX] ; VZA   
		CS_LATLON[*,5]=TEMP_ANGLES.VAA[ROI_INDEX] ; VAA  

		TEMP_SZA = TEMP_ANGLES.SZA
    
		;------------------------------------- 
		;  SUNGLINT DETECTION ON MEAN VALUES (USED FOR CLOUD SCREENING CRITERIA)

		SUNGLINT_STATUS = 0                
		IF (INGEST_SUNGLINT EQ 1) OR STRCMP(DB_DATA.SITE_TYPE[IN_FNAME], 'OCEAN', /FOLD_CASE) THEN BEGIN

			THETA_N = MEAN(THETA_N[ROI_INDEX])
			THETA_R = MEAN(THETA_R[ROI_INDEX])

			IF (THETA_R LE SG_THETA_R_MAX) THEN SUNGLINT_STATUS = 1
			IF (THETA_N LE SG_THETA_N_MAX) THEN SUNGLINT_STATUS = 2

			IF (SUNGLINT_STATUS EQ 1) AND (INGEST_SUNGLINT EQ 1) THEN DB_DATA.ROI_STATUS[IN_FNAME] = 1

			DB_DATA.THETA_N_MEAN[IN_FNAME]=DOUBLE(THETA_N)
			DB_DATA.THETA_R_MEAN[IN_FNAME]=DOUBLE(THETA_R)

		ENDIF

		TEMP=0
		TEMP_ANGLES=0
		

;----------------------------------------
; SET AUX INFORMATION AS MISSING

    IFILE_AUX[*,IN_FNAME] = MISSING_VALUE_FLT

;---------------------------------------
; AVERAGE 1KM TOA_REF OVER ROI
    
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: AVERAGING 1KM REFLECTANCES'
    FOR IN_BAND=0,NB_BANDS_1KM-1 DO BEGIN
      TOA_REF_TEMP = TOA_REF_1KM[*,*,IN_BAND]
			TOA_REF_TEMP = TOA_REF_TEMP/COS(TEMP_SZA*!DTOR)

			VALID     = WHERE(TOA_REF_TEMP(ROI_INDEX) GT 0.0 AND TOA_REF_TEMP(ROI_INDEX) LT 1.0,COUNTV)

			IF COUNTV EQ 0 THEN CONTINUE
			CS_RHO[VALID,IN_BAND] = TOA_REF_TEMP(ROI_INDEX(VALID))

			ROI_AVG_TOA_REF(IN_BAND,IN_FNAME) = MEAN(TOA_REF_TEMP(ROI_INDEX[VALID]))    
			IF COUNTV GE 2 THEN ROI_STD_TOA_REF(IN_BAND,IN_FNAME) = STDDEV(TOA_REF_TEMP(ROI_INDEX[VALID]))
			NCDF_OUT.VAR_PIX[IN_BAND,IN_FNAME,0] = COUNTV
    ENDFOR
    TOA_REF_1KM = 0
 
;---------------------------------------
; AVERAGE 500M TOA_REF OVER ROI

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: AVERAGING 500M REFLECTANCES'
    
    TOA_REF_500M = GET_MODISA_L1B_REFLECTANCE_LINUX(IFILES[IN_FNAME],/RES_500M)
    FOR IN_BAND=0,NB_BANDS_500-1 DO BEGIN
      TOA_REF_TEMP = TOA_REF_500M[*,*,IN_BAND]
      TOA_REF_TEMP = TOA_REF_TEMP/COS(TEMP_SZA*!DTOR)
     
      VALID     = WHERE(TOA_REF_TEMP(ROI_INDEX) GT 0.0 AND TOA_REF_TEMP(ROI_INDEX) LT 1.0,COUNTV)
      
      IF COUNTV EQ 0 THEN CONTINUE
      CS_RHO[VALID,NB_BANDS_1KM+IN_BAND] = TOA_REF_TEMP(ROI_INDEX(VALID))
      
      ROI_AVG_TOA_REF(IN_BAND+NB_BANDS_1KM,IN_FNAME) = MEAN(TOA_REF_TEMP(ROI_INDEX[VALID]))
      IF COUNTV GE 2 THEN ROI_STD_TOA_REF(IN_BAND+NB_BANDS_1KM,IN_FNAME) = STDDEV(TOA_REF_TEMP(ROI_INDEX[VALID]))
      NCDF_OUT.VAR_PIX[IN_BAND+NB_BANDS_1KM,IN_FNAME,0] = COUNTV
    ENDFOR 
    TOA_REF_500M=0
 
;---------------------------------------
; AVERAGE 250M TOA_REF OVER ROI

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: AVERAGING 250M REFLECTANCES'

    TOA_REF_250M = GET_MODISA_L1B_REFLECTANCE_LINUX(IFILES[IN_FNAME],/RES_250M)    
    FOR IN_BAND=0,NB_BANDS_250-1 DO BEGIN
      TOA_REF_TEMP = TOA_REF_250M[*,*,IN_BAND]
      TOA_REF_TEMP = TOA_REF_TEMP/COS(TEMP_SZA*!DTOR)

      VALID     = WHERE(TOA_REF_TEMP(ROI_INDEX) GT 0.0 AND TOA_REF_TEMP(ROI_INDEX) LT 1.0,COUNTV)

      IF COUNTV EQ 0 THEN CONTINUE
      CS_RHO[VALID,NB_BANDS_1KM+NB_BANDS_500+IN_BAND] = TOA_REF_TEMP(ROI_INDEX(VALID))
      
      ROI_AVG_TOA_REF(IN_BAND+NB_BANDS_1KM+NB_BANDS_500,IN_FNAME) = MEAN(TOA_REF_TEMP(ROI_INDEX[valid]))
      IF COUNTV GE 2 THEN ROI_STD_TOA_REF(IN_BAND+NB_BANDS_1KM+NB_BANDS_500,IN_FNAME) = STDDEV(TOA_REF_TEMP(ROI_INDEX[valid]))
      NCDF_OUT.VAR_PIX[IN_BAND+NB_BANDS_1KM+NB_BANDS_500,IN_FNAME,0] = COUNTV
    ENDFOR 
    TOA_REF_250M=0
 
;---------------------------------- 
; GET ADDITIONAL 12 MICRON BAND
    
    TEMP_REF            = GET_MODISA_L1B_EMISSIVE(IFILES[IN_FNAME],11)
    TEMP_BTEMP          = CONVERT_EMISSIVE_TO_BTEMP(TEMP_REF(ROI_INDEX),11)
    CS_RHO[*,NB_BANDS]  = TEMP_BTEMP
 
		;---------------------------------- 
		; GET ADDITIONAL 11 MICRON BAND
    
		TEMP_REF            = GET_MODISA_L1B_EMISSIVE(IFILES[IN_FNAME],10)
		TEMP_BTEMP          = CONVERT_EMISSIVE_TO_BTEMP(TEMP_REF(ROI_INDEX),10)
		CS_RHO[*,NB_BANDS+1]  = TEMP_BTEMP

		;-----------------------------------------
		; STORE DATA IN NETCDF STRUCTURE
    
    NCDF_OUT.VAR_VZA[0,IN_FNAME]      = IFILE_VIEW[0,IN_FNAME]
    NCDF_OUT.VAR_VAA[0,IN_FNAME]      = IFILE_VIEW[1,IN_FNAME]
    NCDF_OUT.VAR_SZA[0,IN_FNAME]      = IFILE_VIEW[2,IN_FNAME]
    NCDF_OUT.VAR_SAA[0,IN_FNAME]      = IFILE_VIEW[3,IN_FNAME]
    
    NCDF_OUT.VAR_RHOMU[*,IN_FNAME,0]  = ROI_AVG_TOA_REF(*,IN_FNAME)
    NCDF_OUT.VAR_RHOSD[*,IN_FNAME,0]  = ROI_STD_TOA_REF(*,IN_FNAME)
    NCDF_OUT.VAR_OZONEMU[IN_FNAME]    = IFILE_AUX[0,IN_FNAME]
    NCDF_OUT.VAR_OZONESD[IN_FNAME]    = IFILE_AUX[1,IN_FNAME]
    NCDF_OUT.VAR_PRESSMU[IN_FNAME]    = IFILE_AUX[2,IN_FNAME]
    NCDF_OUT.VAR_PRESSSD[IN_FNAME]    = IFILE_AUX[3,IN_FNAME]
    NCDF_OUT.VAR_RHUMMU[IN_FNAME]     = IFILE_AUX[4,IN_FNAME]
    NCDF_OUT.VAR_RHUMSD[IN_FNAME]     = IFILE_AUX[5,IN_FNAME]
    NCDF_OUT.VAR_ZONALMU[IN_FNAME]    = IFILE_AUX[6,IN_FNAME]
    NCDF_OUT.VAR_ZONALSD[IN_FNAME]    = IFILE_AUX[7,IN_FNAME]
    NCDF_OUT.VAR_MERIDMU[IN_FNAME]    = IFILE_AUX[8,IN_FNAME]
    NCDF_OUT.VAR_MERIDSD[IN_FNAME]    = IFILE_AUX[9,IN_FNAME]
    NCDF_OUT.VAR_WVAPMU[IN_FNAME]     = IFILE_AUX[10,IN_FNAME]
    NCDF_OUT.VAR_WVAPSD[IN_FNAME]     = IFILE_AUX[11,IN_FNAME]

    ; ADD LAT/LON INDICES
		CS_RHO[*,NB_BANDS+2]  = CS_COL
		CS_RHO[*,NB_BANDS+3]  = CS_ROW

		CS_LATLON[*,6:NBCOL_CS_LATLON-1]=CS_RHO

		;----------------------------------
		; APPLY ARGANS CLOUD SCREENING
		CS_METHOD_ARG = 'LCCA'
		CS_MODISA_ARG = DIMITRI_CLOUD_SCREENING(SENSOR, SITE_TYPE, CS_RHO, 0, CS_METHOD_ARG, $
																						SUNGLINT_STATUS=SUNGLINT_STATUS, CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX_ARG, VERBOSE=VERBOSE)
    ;----------------------------------
    ; APPLY MAGELLIUM CLOUD SCREENING
		IF STRCMP(SITE_TYPE,'OCEAN', /FOLD_CASE) THEN BEGIN
			CS_METHOD_MAG = 'MODIS_OCEAN'
			CS_MODISA_MAG = DIMITRI_CLOUD_SCREENING(SENSOR, SITE_TYPE, CS_RHO, CS_LATLON[*,2:5], CS_METHOD_MAG, $
																						SUNGLINT_STATUS=SUNGLINT_STATUS,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX_MAG,VERBOSE=VERBOSE)
		ENDIF ELSE IF STRCMP(SITE_TYPE,'DESERT', /FOLD_CASE) THEN BEGIN
				CS_METHOD_MAG = 'MODIS_DESERT'
				CS_MODISA_MAG = DIMITRI_CLOUD_SCREENING(SENSOR, SITE_TYPE, CS_RHO, CS_LATLON[*,0:5], CS_METHOD_MAG, $
																						SUNGLINT_STATUS=SUNGLINT_STATUS,CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX_MAG,VERBOSE=VERBOSE, $
																						SITE_NAME=IREGION)
	  ENDIF ELSE BEGIN
				CS_METHOD_MAG = 'LCCA'
				CS_MODISA_MAG = CS_MODISA_ARG
				CS_CLASSIF_MATRIX_MAG = CS_CLASSIF_MATRIX_ARG				
		ENDELSE
  
    ; DETERMINATE PIXEL NUMBER DECLARED AS CS_VALID :: 'cloud screening valid indexes'
    INDX_CS_VALID_PIX_ARG = WHERE(CS_CLASSIF_MATRIX_ARG(*,0) NE MISSING_VALUE_LONG, COUNT_CS_VALID_PIX_ARG)
    INDX_CS_VALID_PIX_MAG = WHERE(CS_CLASSIF_MATRIX_MAG(*,0) NE MISSING_VALUE_LONG, COUNT_CS_VALID_PIX_MAG)
    ; DETERMINATE PIXEL NUMBER DECLARED AS CS_CLEAR (NO CLOUD)
    ; IN CS_TOTAL_PIXEL_CLASSIF : cloud =1 / clear =0 :: 'final cloud screening classification'
    INDX_CS_CLEAR_PIX_ARG = WHERE(CS_CLASSIF_MATRIX_ARG(*,1) EQ 0, COUNT_CS_CLEAR_PIX_ARG)    
    INDX_CS_CLEAR_PIX_MAG = WHERE(CS_CLASSIF_MATRIX_MAG(*,1) EQ 0, COUNT_CS_CLEAR_PIX_MAG)    

    IF KEYWORD_SET(VERBOSE) THEN BEGIN
      PRINT, ' CS ARGANS    - NB CLEAR PIXELS = ' + STRTRIM(STRING(COUNT_CS_CLEAR_PIX_ARG),1) + '/' + STRTRIM(STRING(COUNT_CS_VALID_PIX_ARG),1)
      PRINT, ' CS MAGELLIUM - NB CLEAR PIXELS = ' + STRTRIM(STRING(COUNT_CS_CLEAR_PIX_MAG),1) + '/' + STRTRIM(STRING(COUNT_CS_VALID_PIX_MAG),1)
    ENDIF

    ;----------------------------------
    ; DATABASE STRUCTURE COMPLETION
    
    DB_DATA.AUTO_CS_1_NAME[IN_FNAME] = DB_DATA.AUTO_CS_1_NAME[IN_FNAME] + ' - ' + CS_METHOD_ARG
    DB_DATA.AUTO_CS_2_NAME[IN_FNAME] = DB_DATA.AUTO_CS_2_NAME[IN_FNAME] + ' - ' + CS_METHOD_MAG
    DB_DATA.AUTO_CS_1_MEAN[IN_FNAME] = CS_MODISA_ARG
    DB_DATA.AUTO_CS_2_MEAN[IN_FNAME] = CS_MODISA_MAG
    DB_DATA.ROI_CS_1_CLEAR_PIX_NUM[IN_FNAME] = COUNT_CS_CLEAR_PIX_ARG
    DB_DATA.ROI_CS_2_CLEAR_PIX_NUM[IN_FNAME] = COUNT_CS_CLEAR_PIX_MAG
 
    ;----------------------------------
    ; NCDF INGESTION OUTPUT STRUCTURE COMPLETION
    
    NCDF_INGEST_STRUCT.GLOBAL_ATT.SITE_COORDINATES = DB_DATA.SITE_COORDINATES[IN_FNAME]
    NCDF_INGEST_STRUCT.GLOBAL_ATT.ROI_PIX_NUM = NB_PIX
    NCDF_INGEST_STRUCT.GLOBAL_ATT.AUTO_CS_1_NAME = DB_DATA.AUTO_CS_1_NAME[IN_FNAME]
    NCDF_INGEST_STRUCT.GLOBAL_ATT.AUTO_CS_1_MEAN = DB_DATA.AUTO_CS_1_MEAN[IN_FNAME]
    NCDF_INGEST_STRUCT.GLOBAL_ATT.ROI_CS_1_CLEAR_PIX_NUM = DB_DATA.ROI_CS_1_CLEAR_PIX_NUM[IN_FNAME]
    NCDF_INGEST_STRUCT.GLOBAL_ATT.AUTO_CS_2_NAME = DB_DATA.AUTO_CS_2_NAME[IN_FNAME]
    NCDF_INGEST_STRUCT.GLOBAL_ATT.AUTO_CS_2_MEAN = DB_DATA.AUTO_CS_2_MEAN[IN_FNAME]
    NCDF_INGEST_STRUCT.GLOBAL_ATT.ROI_CS_2_CLEAR_PIX_NUM = DB_DATA.ROI_CS_2_CLEAR_PIX_NUM[IN_FNAME]
    
    NCDF_INGEST_STRUCT.VARIABLES.ROI_STATUS[0] = 1
    NCDF_INGEST_STRUCT.VARIABLES.ROI_PIXEL_NUMBER[0] = NB_PIX
    
    NCDF_INGEST_STRUCT.VARIABLES.LAT(*, 0) = CS_LATLON[*,0]
    NCDF_INGEST_STRUCT.VARIABLES.LON(*, 0) = CS_LATLON[*,1]
    NCDF_INGEST_STRUCT.VARIABLES.SZA(*, 0) = CS_LATLON[*,2]
    NCDF_INGEST_STRUCT.VARIABLES.SAA(*, 0) = CS_LATLON[*,3]
    NCDF_INGEST_STRUCT.VARIABLES.VZA(*, 0) = CS_LATLON[*,4]
    NCDF_INGEST_STRUCT.VARIABLES.VAA(*, 0) = CS_LATLON[*,5]
    FOR BAND=0, NB_BANDS-1 DO BEGIN
      NCDF_INGEST_STRUCT.VARIABLES.REFL_BAND(*, 0, BAND) = CS_LATLON[*,6+BAND]
    ENDFOR
    NCDF_INGEST_STRUCT.VARIABLES.PIXEL_COLUMN_INDICE(*, 0) = CS_LATLON[*,6+2+NB_BANDS]
    NCDF_INGEST_STRUCT.VARIABLES.PIXEL_ROW_INDICE(*, 0)    = CS_LATLON[*,6+2+NB_BANDS+1]
    NCDF_INGEST_STRUCT.VARIABLES.AUTO_CS_1_VALID_INDEX(*, 0) = CS_CLASSIF_MATRIX_ARG(*,0)
    NCDF_INGEST_STRUCT.VARIABLES.AUTO_CS_1_MASK(*, 0)        = CS_CLASSIF_MATRIX_ARG(*,1)
    NCDF_INGEST_STRUCT.VARIABLES.AUTO_CS_2_VALID_INDEX(*, 0) = CS_CLASSIF_MATRIX_MAG(*,0)
    NCDF_INGEST_STRUCT.VARIABLES.AUTO_CS_2_MASK(*, 0)        = CS_CLASSIF_MATRIX_MAG(*,1)
    
    NCDF_INGEST_STRUCT.VARIABLES_ATT.THETA_N_MEAN = DB_DATA.THETA_N_MEAN[IN_FNAME]
    NCDF_INGEST_STRUCT.VARIABLES_ATT.THETA_R_MEAN = DB_DATA.THETA_R_MEAN[IN_FNAME]

    ;----------------------------------
    ; METEO AUXILIARY DATA RETREIVING
       
    ACQUI_DATE = JULDAY(ACQ_MONTH,ACQ_DAY,ACQ_YEAR,DATE_HR,DATE_MIN,0)
    STATUS = GET_ALL_METEO_AUX_DATA( ACQUI_DATE, CS_LATLON[*,0], CS_LATLON[*,1], AUX_DATA_STRUCT=AUX_DATA_STRUCT, VERBOSE=VERBOSE)
    IF STATUS NE STATUS_OK THEN BEGIN
      ; IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ' - ERROR WHEN RETRIEVING METEO AUX DATA, DIRECTION SKIPPED'
      ; GOTO, NO_ROI
      IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ' - ERROR WHEN RETRIEVING METEO AUX DATA >> RETURNING'
      RETURN, STATUS_ERROR
    ENDIF    
    WIND_SPEED     = GET_CHANNEL_STRUCT(AUX_DATA_STRUCT,'WIND_SPEED')
 		WIND_DIRECTION = GET_CHANNEL_STRUCT(AUX_DATA_STRUCT,'WIND_DIRECTION')
	  OZONE          = GET_CHANNEL_STRUCT(AUX_DATA_STRUCT,'OZONE')
	  PRESSURE       = GET_CHANNEL_STRUCT(AUX_DATA_STRUCT,'PRESSURE')
	  WATERVAPOUR    = GET_CHANNEL_STRUCT(AUX_DATA_STRUCT,'WATERVAPOUR')
	  CHLOROPHYLL    = GET_CHANNEL_STRUCT(AUX_DATA_STRUCT,'CHLOROPHYLL')
	  
    NCDF_INGEST_STRUCT.VARIABLES.ERA_WIND_SPEED(*, 0) = WIND_SPEED
    NCDF_INGEST_STRUCT.VARIABLES.ERA_WIND_DIR(*, 0) = WIND_DIRECTION
    NCDF_INGEST_STRUCT.VARIABLES.ERA_OZONE(*, 0) = OZONE
    NCDF_INGEST_STRUCT.VARIABLES.ERA_PRESSURE(*, 0) = PRESSURE
    NCDF_INGEST_STRUCT.VARIABLES.ERA_WATERVAPOUR(*, 0) = WATERVAPOUR
    NCDF_INGEST_STRUCT.VARIABLES.ESA_CHLOROPHYLL(*, 0) = CHLOROPHYLL
    
		DB_DATA.ERA_WIND_SPEED_MEAN[IN_FNAME]  = MEAN(WIND_SPEED)
		DB_DATA.ERA_WIND_DIR_MEAN[IN_FNAME]    = MEAN(WIND_DIRECTION)
		DB_DATA.ERA_OZONE_MEAN[IN_FNAME]       = MEAN(OZONE)
		DB_DATA.ERA_PRESSURE_MEAN[IN_FNAME]    = MEAN(PRESSURE)
		DB_DATA.ERA_WATERVAPOUR_MEAN[IN_FNAME] = MEAN(WATERVAPOUR)
		DB_DATA.ESA_CHLOROPHYLL_MEAN[IN_FNAME] = MEAN(CHLOROPHYLL)

    ;----------------------------------
    ; NCDF INGESTION OUTPUT FILE WRITING

		STATUS = NETCDFWRITE_INGEST_OUTPUT(NCDF_INGEST_STRUCT, NCDF_FILENAME=NCDF_FILENAME, VERBOSE=VERBOSE)
		IF STATUS NE STATUS_OK THEN BEGIN
			IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ' - ISSUE DURING NCDF INGESTION OUTPUT WRITING'
			RETURN, STATUS_ERROR
		ENDIF     

		DB_DATA.L1_INGESTED_FILENAME[IN_FNAME] = NCDF_FILENAME

		NCDF_OUT.VAR_CLOUD_AUT_1[IN_FNAME] = DB_DATA.AUTO_CS_1_MEAN[IN_FNAME]
		NCDF_OUT.VAR_CLOUD_AUT_2[IN_FNAME] = DB_DATA.AUTO_CS_2_MEAN[IN_FNAME]
		NCDF_OUT.VAR_CLOUD_MAN[IN_FNAME] = -1
		NCDF_OUT.VAR_ROI[IN_FNAME] = DB_DATA.ROI_STATUS[IN_FNAME]

	NO_ROI:; IF ROI IS NOT WITHIN THE PRODUCT OR THERE ARE TOO FEW PIXELS
	IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: END OF LOOP ON PRODUCT'
	ENDFOR; END OF FILE ANALYSIS

	;------------------------
	; DEFINE REPORT OUTPUT FOLDER

  OUTPUT_DIR_REPORT = STRING(OUTPUT_FOLDER+'Site_'+IREGION+DL+SENSOR+DL+'Proc_'+IPROC+DL+'REPORT'+DL)
  OUT_FOLDER_INFO = FILE_INFO(OUTPUT_DIR_REPORT)
  IF OUT_FOLDER_INFO.DIRECTORY EQ 0 THEN BEGIN
    FILE_MKDIR, OUTPUT_DIR_REPORT
    IF KEYWORD_SET(VERBOSE) THEN BEGIN      
      PRINT, FCT_NAME + ' - WARNING, OUTPUT REPORT FOLDER ''' + OUTPUT_DIR_REPORT + ''' NOT FOUND >> CREATED'
    ENDIF
  ENDIF


;------------------------------------
; GENERATE PLOTS WITH NEW TIME SERIES DATA

  RES = GET_INGESTION_TIMESERIES_PLOTS(NCDF_MULTIFILE_FILENAME,SENSOR,COLOUR_TABLE=COLOUR_TABLE,PLOT_XSIZE=PLOT_XSIZE,PLOT_YSIZE=PLOT_YSIZE,VERBOSE=VERBOSE)

;------------------------------------
; SAVE DATA TO NETCDF FILE

  NCDF_MULTIFILE_FILENAME = OUTPUT_DIR_REPORT + IREGION + '_' + SENSOR + '_Proc_' + IPROC + '.nc'
  RES = DIMITRI_INTERFACE_EXTRACT_TOA_NCDF(NCDF_OUT,NCDF_MULTIFILE_FILENAME) 

;------------------------------------
; AMEND DATA TO DATABASE

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: SENDING DATA TO UPDATE DATABASE'
  RES = UPDATE_DIMITRI_DATABASE(DB_DATA,/SORT_DB,VERBOSE=VERBOSE)  
 
	RETURN,1 
END
