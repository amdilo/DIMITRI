;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      GET_SMAC_COEFFICIENTS
;*
;* PURPOSE:
;*      RETURNS THE SMAC COEFFICIENTS ACCORDING SENSOR NAME
;*
;* CALLING SEQUENCE:
;*      GET_SMAC_COEFFICIENTS
;*
;* INPUTS:
;*      SENSOR = A STRING CONTAINING THE NAME OF THE REQUIRED SENSOR
;
;* KEYWORDS:
;*      SMAC_FILE_STRUCT = RETURN SMAC STRUCTURE: { SMAC_FILE_EXIST , SMAC_FILE_LABEL , SMAC_COEFFS }
;*      VERBOSE  - VERBOSE STATUS
;*
;* OUTPUTS:
;       SEE KEYWORDS USED AS OUTPUTS
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      29 NOV 2013 - PML / MAGELLIUM - CREATION
;*      20 FEB 2015 - NCG / MAGELLIUM - MODIFICATION TO READ ALL SMAC FILES OF A SENSOR (DIMITRI V4.0)
;*
;* VALIDATION HISTORY:
;*      17 APR 2014 - PML / MAGELLIUM   - WINDOWS 64-BIT MACHINE IDL 8.2.3 : COMPILATION AND CALLING SUCCESSFUL
;*      20 JAN 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************


FUNCTION READ_SMAC_FILE, SMAC_FILENAME, VERBOSE=VERBOSE

    STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')

    SMAC_FINFOS = FILE_INFO(SMAC_FILENAME)
    IF SMAC_FINFOS.EXISTS EQ 0 OR STRUPCASE(SMAC_FILENAME) EQ 'NONE' THEN BEGIN
     PRINT, 'READ_SMAC_FILE: ERROR, SMAC FILE ' + SMAC_FILENAME + ' DOES NOT EXIST'
     RETURN, STATUS_ERROR
    ENDIF
 
    FILE_STRUCT = READ_ASCII(SMAC_FILENAME)
    SMAC_COEFFS = FILE_STRUCT.FIELD1        
    NB_SMAC_COEFFS = N_ELEMENTS(SMAC_COEFFS)

    IF NB_SMAC_COEFFS NE 49 THEN BEGIN
      PRINT, 'READ_SMAC_FILE: ERROR, SMAC FILE ' + SMAC_FILENAME + ' IS NOT A VALID SMAC FILE (', NB_SMAC_COEFFS, ' COEFFS AVAILABLE INSTEAD OF 49)'
      RETURN, STATUS_ERROR
    ENDIF
 
    RETURN, SMAC_COEFFS
 END
 
 
FUNCTION GET_SMAC_COEFFICIENTS, SENSOR, SMAC_FILE_STRUCT=SMAC_FILE_STRUCT, VERBOSE=VERBOSE
 
  FCT_NAME = 'GET_SMAC_COEFFICIENTS'
  
  STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
  STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')

  SENSOR_CONFIG = GET_SENSOR_BAND_CONFIG(SENSOR) ; GET  CHANNELS / STD LABELS / SMAC FILENAME / LUT FILENAME
  IF SIZE(SENSOR_CONFIG,/TYPE) NE 8 THEN BEGIN ; IF NOT A STRUCTURE
    PRINT, FCT_NAME + ': ERROR GET SENSOR BAND CONFIGURATION'
    RETURN, STATUS_ERROR
  ENDIF

  SMAC_PATH = SENSOR_CONFIG.PATH_SMAC
  SMAC_FILENAME = SENSOR_CONFIG.SMAC_FILE
  SMAC_FILE_LABEL = SENSOR_CONFIG.BAND_LABEL_STD
  
  NB_SMAC_FILE = N_ELEMENTS(SMAC_FILENAME)
  IDX_SMAC_FILE = WHERE( STRUPCASE(SMAC_FILENAME) NE 'NONE', COUNT_VALID_SMAC_FILE)
  
  SMAC_FILE_EXIST = INTARR( N_ELEMENTS(SMAC_FILENAME) ) 
  SMAC_FILE_EXIST(IDX_SMAC_FILE) = 1
  
  NB_SMAC_COEFFS = 49
  SMAC_COEFFS = FLTARR(NB_SMAC_COEFFS, NB_SMAC_FILE)
  
  ; READING OF EACH SMAC FILE
  FOR NUM=0, COUNT_VALID_SMAC_FILE-1 DO BEGIN  
    
    RES = READ_SMAC_FILE(SMAC_PATH+SMAC_FILENAME[IDX_SMAC_FILE[NUM]])  
    IF N_ELEMENTS(RES) EQ 1 AND RES[0] EQ -1 THEN BEGIN
      PRINT, FCT_NAME + ': ERROR DURING SMAC FILE READING >> RETURNING'
      RETURN, STATUS_ERROR
    ENDIF
    
    SMAC_COEFFS(*,IDX_SMAC_FILE[NUM]) = RES
    
  ENDFOR
  
  SMAC_FILE_STRUCT = { SMAC_FILE_EXIST: SMAC_FILE_EXIST, SMAC_FILE_LABEL: SMAC_FILE_LABEL, SMAC_COEFFS: SMAC_COEFFS }

  RETURN, STATUS_OK
  
 END
 
