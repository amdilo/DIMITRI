;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      PLOT_DIMITRI_SENSOR_RSR       
;* 
;* PURPOSE:
;*      THIS FILE CONTAINS AND NUMBER OF ROUTINES WHICH CREATE AN INTERACTIVE OBJECT 
;*      GRAPHICS WINDOW ALLOWING USERS TO OVERLPLOT THE SPECTRAL RESPONSE FOR ANY SELECTED 
;*      DIMITRI SENSOR OVER DIMITRI AND USER DEFINED SITES, ADD/REMOVE A LEGEND, AND 
;*      OUTPUT PNG/JPG AND CSV FILES. 
;*
;* CALLING SEQUENCE:
;*      PLOT_DIMITRI_SENSOR_RSR,RANGE     
;* 
;* INPUTS:
;*      RANGE    - A 2-ELEMENT INTEGER ARRAY CONTAINING THE MIN AND MAX WAVELENGTHS OF INTEREST
;*                 E.G. [400,1000]
;*
;* KEYWORDS:
;*      GROUP_LEADER  - THE ID OF A WIDGET TO BE USED AS THE GROUP LEADER
;*      VERBOSE       - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      NONE
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      28 JAN 2011 - C KENT   - DIMITRI-2 V1.0
;*      21 FEB 2011 - C KENT   - ADDED CATCH FOR WIDGET RESIZE, UPDATE EGEND TO UPDATE IF ON
;*      21 MAR 2011 - C KENT   - MODIFIED FILE DEFINITION TO USE GET_DIMITRI_LOCATION
;*      29 MAR 2011 - C KENT   - MAJOR CHANGE TO INCORPORATE SITE SPECTRA AND CONVOLUTION 
;*                               OF SPECTRA TO SENSOR RSR
;*
;* VALIDATION HISTORY:
;*      14 APR 2011 - C KENT   - WINDOWS 32-BIT IDL 7.1 AND LINUX 64-BIT IDL 8.0 NOMINAL
;*                               COMPILATION AND OPERATION
;*
;**************************************************************************************
;**************************************************************************************

PRO RSR_OBJECT_EVENT, EVENT

;----------------------------
; RETRIEVE WIDGET INFORMATION

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE = RSR_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE = ACTION
  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->EVENT: REGISTERED EVENT, RETURNING TO WIDGET'

;----------------------------
; REDRAW WIDGET

  RSR_INFO.RSR_WINDOW->DRAW, RSR_INFO.RSR_VIEW 
  WIDGET_CONTROL, EVENT.TOP,  SET_UVALUE = RSR_INFO,/NO_COPY

END

;**************************************************************************************
;**************************************************************************************

PRO RSR_OBJECT_EXIT, EVENT
  
;------------------------------------
; CLEANUP POINTERS AND OBJECTS FROM MEMORY  
  
  WIDGET_CONTROL, EVENT.TOP, GET_UVALUE = RSR_INFO, /NO_COPY
  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->EXIT: DESTROYING OBJECTS'
  OBJ_DESTROY,    RSR_INFO.RSR_OBJ 
  OBJ_DESTROY,    RSR_INFO.RHO_OBJ 
  OBJ_DESTROY,    RSR_INFO.SPC_OBJ 
  OBJ_DESTROY,    RSR_INFO.RSR_FONT
  OBJ_DESTROY,    RSR_INFO.RSR_YTITLE_RHO
  OBJ_DESTROY,    RSR_INFO.RSR_MODEL
  OBJ_DESTROY,    RSR_INFO.RSR_XTITLE
  OBJ_DESTROY,    RSR_INFO.RSR_XAXIS
  OBJ_DESTROY,    RSR_INFO.RSR_YAXIS
  OBJ_DESTROY,    RSR_INFO.RSR_LEGEND
  OBJ_DESTROY,    RSR_INFO.RSR_LEGENDMODEL
  OBJ_DESTROY,    RSR_INFO.RSR_PALETTE
  OBJ_DESTROY,    RSR_INFO.RSR_VIEW
  OBJ_DESTROY,    RSR_INFO.RSR_WINDOW

;----------------------------
; DESTROY THE WIDGET

  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->EXIT: DESTROYING THE WIDGET'
  WIDGET_CONTROL, EVENT.TOP, /DESTROY

END

;**************************************************************************************
;**************************************************************************************

PRO RSR_OBJECT_PLOT,EVENT

;----------------------------
; RETRIEVE WIDGET INFORMATION

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE = RSR_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE = ACTION

;----------------------------
; FIND OUT WHICH ACITON IS REQUESTED

  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->PLOT: DETERMINING ACTION REQUESTED'
  ACTION_TYPE = STRMID(ACTION,0,3)

;----------------------------
; PLOT DATA FOR SENSOR RSR

  IF ACTION_TYPE EQ RSR_INFO.TEXT_RSR THEN BEGIN
  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->PLOT: UPDATING PLOT FOR RSR ACTION'
    
    IF RSR_INFO.PLOT_TYPE NE RSR_INFO.TEXT_RSR THEN RSR_INFO = RSR_PLOT_RESET(RSR_INFO)
    RES = WHERE(RSR_INFO.DATA_ON_LIST EQ ACTION)
    IF RSR_INFO.DATA_ON[RES] EQ 1 THEN GOTO,NO_RSR ELSE RSR_INFO.DATA_ON[RES] = 1

;----------------------------
; FIND SENSOR ID FROM ACTION

    IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->PLOT: RETRIEVING SENSOR ID'
    SENS_ID = WHERE(RSR_INFO.SENSOR_ID EQ STRMID(ACTION,4,STRLEN(ACTION)-4))
    RSR_INFO.PLOT_TYPE = RSR_INFO.TEXT_RSR
    TEMP = RSR_INFO.SENSOR_BANDS[SENS_ID]

;----------------------------
; DESTROY THE CURRENT PLOT/MODEL 
; AND CREATE NEW OBJECTS FOR SENSOR

    IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->PLOT: DESTORYING THE PLOT OBJECT AND CREATING A NEW ONE'
    FOR I=0,TEMP[0]-1 DO BEGIN
      OBJ_DESTROY,RSR_INFO.RSR_OBJ[I,SENS_ID,0]
      OBJ_DESTROY,RSR_INFO.RSR_OBJ[I,SENS_ID,1]
      RSR_INFO.RSR_OBJ[I,SENS_ID,0]  = OBJ_NEW('IDLGRPLOT',RSR_INFO.WAVELENGTHS,RSR_INFO.RSR_DATA[*,I,SENS_ID]      ,$
                                                    LINESTYLE=0, COLOR=RSR_INFO.SENSOR_COLOURS[*,SENS_ID],THICK=1   ,$
                                                    XCOORD_CONV = NORM_COORD(RSR_INFO.RSR_XRANGE)                   ,$
                                                    YCOORD_CONV = NORM_COORD(RSR_INFO.RSR_YRANGE)                    $
                                                    )
    
      RSR_INFO.RSR_OBJ[I,SENS_ID,1]  = OBJ_NEW('IDLGRMODEL')
      RSR_INFO.RSR_OBJ[I,SENS_ID,1]  ->ADD,  RSR_INFO.RSR_OBJ[I,SENS_ID,0]
      RSR_INFO.RSR_VIEW              ->ADD,  RSR_INFO.RSR_OBJ[I,SENS_ID,1]
    ENDFOR

    NO_RSR:
  ENDIF

;----------------------------
; PLOT DATA FOR SENSOR SPECTRA OVER SITES

  IF ACTION_TYPE EQ RSR_INFO.TEXT_SEN THEN BEGIN 
  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->PLOT: UPDATING PLOT FOR SENSOR SPECTRA OVER SITE ACTION'
    IF RSR_INFO.PLOT_TYPE NE RSR_INFO.TEXT_RHO THEN RSR_INFO = RSR_PLOT_RESET(RSR_INFO)
    RSR_INFO.PLOT_TYPE = RSR_INFO.TEXT_RHO

    RES = WHERE(RSR_INFO.DATA_ON_LIST EQ ACTION)
    IF RSR_INFO.DATA_ON[RES] EQ 1 THEN GOTO,NO_SEN ELSE RSR_INFO.DATA_ON[RES] =1

;----------------------------
; FIND OUT SENSOR AND SITE ID

    IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->PLOT: RETRIEVING SENSOR AND SITE ID'
    TEMP_SENS = STRSPLIT(STRMID(ACTION,4,STRLEN(ACTION)-4),'_',/EXTRACT)
    TEMP_SITE = STRJOIN(TEMP_SENS[0:N_ELEMENTS(TEMP_SENS)-2],'_')
    TEMP_SENS = TEMP_SENS[N_ELEMENTS(TEMP_SENS)-1]
 
    SENS_ID   = WHERE(RSR_INFO.SENSOR_ID EQ TEMP_SENS)
    SITE_ID   = WHERE(RSR_INFO.SPECTRA_NAMES EQ TEMP_SITE)

;----------------------------
; DESTROY CURRENT PLOTS/MODEL 
; FOR SENSOR SPECTRA

    IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->PLOT: DESTROYING THE OLD OBJECTS AND CREATING NEW ONES'
    OBJ_DESTROY,RSR_INFO.RHO_OBJ[SENS_ID,SITE_ID,0]
    OBJ_DESTROY,RSR_INFO.RHO_OBJ[SENS_ID,SITE_ID,1]

;----------------------------
; FIND THE NEW GOOD DATA AND SORT IT NUMERICALLY

    TEMP = WHERE(RSR_INFO.RHO_DATA[*,SENS_ID,0,SITE_ID] GT 0.0)
    IF TEMP[0] EQ -1 THEN GOTO,NO_SEN
    IDX = SORT(RSR_INFO.RHO_DATA[temp,SENS_ID,0,SITE_ID])

    NEW_X = RSR_INFO.RHO_DATA[TEMP[IDX],SENS_ID,0,SITE_ID]
    NEW_Y = RSR_INFO.RHO_DATA[TEMP[IDX],SENS_ID,1,SITE_ID]

    RSR_INFO.RHO_OBJ[SENS_ID,SITE_ID,0]  = OBJ_NEW('IDLGRPLOT',NEW_X,NEW_Y ,$
                                                    LINESTYLE=0, COLOR=RSR_INFO.SENSOR_COLOURS[*,SENS_ID],THICK=1   ,$
                                                    XCOORD_CONV = NORM_COORD(RSR_INFO.RSR_XRANGE)                   ,$
                                                    YCOORD_CONV = NORM_COORD(RSR_INFO.RSR_YRANGE)                    $
                                                    )

    RSR_INFO.RHO_OBJ[SENS_ID,SITE_ID,1]  = OBJ_NEW('IDLGRMODEL')
    RSR_INFO.RHO_OBJ[SENS_ID,SITE_ID,1]  ->ADD,  RSR_INFO.RHO_OBJ[SENS_ID,SITE_ID,0]
    RSR_INFO.RSR_VIEW  ->ADD,  RSR_INFO.RHO_OBJ[SENS_ID,SITE_ID,1]

    NO_SEN:
  ENDIF

;----------------------------
; PLOT DATA FOR SITE SPECTRA

  IF ACTION_TYPE EQ RSR_INFO.TEXT_SIT THEN BEGIN 
  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->PLOT: UPDATING PLOT FOR SITE SPECTRA ACTION'
    
    IF RSR_INFO.PLOT_TYPE NE RSR_INFO.TEXT_RHO THEN RSR_INFO = RSR_PLOT_RESET(RSR_INFO)
    RSR_INFO.PLOT_TYPE = RSR_INFO.TEXT_RHO
    
    RES = WHERE(RSR_INFO.DATA_ON_LIST EQ ACTION)
    IF RSR_INFO.DATA_ON[RES] EQ 1 THEN GOTO,NO_SIT ELSE RSR_INFO.DATA_ON[RES] =1

;----------------------------
; FIND SITE ID, DESTROY OLD PLOT 
; OBJECTS AND CREATE NEW PLOT AND MODEL 

    IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->PLOT: RETRIEVING SITE ID'    
    SITE_ID = WHERE(RSR_INFO.SPECTRA_NAMES EQ STRMID(ACTION,4,STRLEN(ACTION)-4))
    IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->PLOT: DESTROYING SITE OBJECT AND CREATING A NEW ONE'
    OBJ_DESTROY,RSR_INFO.SPC_OBJ[SITE_ID,0]
    OBJ_DESTROY,RSR_INFO.SPC_OBJ[SITE_ID,1]
    RSR_INFO.SPC_OBJ[SITE_ID,0]  = OBJ_NEW('IDLGRPLOT',RSR_INFO.WAVELENGTHS,RSR_INFO.SPECTRA_ARRAY[*,SITE_ID]       ,$
                                                    LINESTYLE=0, COLOR=RSR_INFO.SITE_COLOURS[*,SITE_ID],THICK=1     ,$
                                                    XCOORD_CONV = NORM_COORD(RSR_INFO.RSR_XRANGE)                   ,$
                                                    YCOORD_CONV = NORM_COORD(RSR_INFO.RSR_YRANGE)                    $
                                                    )

    RSR_INFO.SPC_OBJ[SITE_ID,1]  = OBJ_NEW('IDLGRMODEL')
    RSR_INFO.SPC_OBJ[SITE_ID,1]  ->ADD,  RSR_INFO.SPC_OBJ[SITE_ID,0]
    RSR_INFO.RSR_VIEW            ->ADD,  RSR_INFO.SPC_OBJ[SITE_ID,1]

    NO_SIT:
  ENDIF

;----------------------------
; UPDATE LEGEND IF VISIBLE

  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->PLOT: CHECKING LEGEND VISIBILITY'
  RSR_INFO.RSR_LEGEND->GETPROPERTY,HIDE=TEMP
  IF TEMP EQ 0 THEN RSR_INFO = RSR_LEGEND_UPDATE(RSR_INFO)

;----------------------------
; REDRAW THE WIDGET PLOT

  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->PLOT: REDRAWING THE WIDGET'
  RSR_INFO.RSR_WINDOW->DRAW, RSR_INFO.RSR_VIEW 
  WIDGET_CONTROL, EVENT.TOP, SET_UVALUE = RSR_INFO,/NO_COPY

END

;**************************************************************************************
;**************************************************************************************

PRO RSR_OBJECT_OPTION,EVENT

;----------------------------
; RETRIEVE WIDGET INFORMATION
  
  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE = RSR_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE = ACTION

;----------------------------
; IF RESET ACTION REQUESTED THE CALL RESET FUNCTION

  IF ACTION EQ 'RESET' THEN BEGIN
  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->OPTION: RESETTING THE PLOT'
    RES = RSR_PLOT_RESET(RSR_INFO)
    RSR_INFO.RSR_LEGEND->SETPROPERTY,HIDE=1,ITEM_NAME='' 
  ENDIF

;----------------------------
; IF LEGEND FUNCTION REQUESTED THE CALL LEGEND FUNCTION

  IF ACTION EQ 'LEGEND' THEN BEGIN
  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->OPTION: UPDATING THE LEGEND VISIBILITY'
    RSR_LEG:
    RSR_INFO.RSR_LEGEND->GETPROPERTY,HIDE=TEMP
    IF TEMP EQ 0 THEN RSR_INFO.RSR_LEGEND->SETPROPERTY,HIDE=1 $ 
      ELSE BEGIN
        RSR_INFO = RSR_LEGEND_UPDATE(RSR_INFO)
        RSR_INFO.RSR_LEGEND->SETPROPERTY,HIDE=0
      ENDELSE
  ENDIF

;----------------------------
; REDRAW THE WIDGET PLOT  

  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->OPTION: REDRAWING THE PLOT'  
  RSR_INFO.RSR_WINDOW->DRAW, RSR_INFO.RSR_VIEW 
  WIDGET_CONTROL, EVENT.TOP, SET_UVALUE = RSR_INFO,/NO_COPY

END

;**************************************************************************************
;**************************************************************************************

PRO RSR_OBJECT_EXPORT, EVENT

;----------------------------
; RETRIEVE WIDGET INFORMATION
  
  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE = RSR_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE = ACTION
 
;---------------------------- 
; STORE THE IMAGE WITHIN THE 
; CURRENT RSR_WINDOW

  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->EXPORT: RETRIEVING THE PLOT VIEW'
  RSR_INFO.RSR_WINDOW->GETPROPERTY, IMAGE_DATA = RSR_IMAGE   
  RSR_IMAGE2 = COLOR_QUAN(RSR_IMAGE,1,R,G,B)

;---------------------------- 
; SAVE THE DATA AS REQUESTED
  
  CASE ACTION OF
    'PNG':  BEGIN
              IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->EXPORT: SAVING DATA AS PNG'
              FILENAME = DIALOG_PICKFILE(/WRITE,FILE='UNTITLED_1.PNG',/OVERWRITE_PROMPT)
              IF FILENAME NE '' THEN WRITE_PNG,FILENAME,RSR_IMAGE2,R,G,B
            END
    'JPG':  BEGIN
              IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->EXPORT: SAVING DATA AS JPG'
              FILENAME = DIALOG_PICKFILE(/WRITE,FILE='UNTITLED_1.JPG',/OVERWRITE_PROMPT)
              IF FILENAME NE '' THEN WRITE_JPEG,FILENAME,RSR_IMAGE,TRUE=1
            END
    'CSV':  BEGIN
              IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->EXPORT: SAVING DATA AS CSV'
              FILENAME = DIALOG_PICKFILE(/WRITE,FILE='UNTITLED_1.CSV',/OVERWRITE_PROMPT)
              IF FILENAME NE '' THEN BEGIN

;----------------------------
; OPEN THE CSV FILE

                IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->EXPORT: OPENING OUTPUT FILE' 
                OPENW,OUTF,FILENAME,/GET_LUN
                PRINTF,OUTF,'PARAMETER',STRTRIM(STRING(RSR_INFO.WAVELENGTHS),2),$
                       FORMAT = STRING('('+STRTRIM(STRING(FIX(RSR_INFO.N_WL)),2)+'(A,1H;),1(A))')
;----------------------------
; FIND WHICH DATA IS ON
                RES = WHERE(RSR_INFO.DATA_ON EQ 1)
                IF RES[0] EQ -1 THEN GOTO, NO_CSV_OUTPUT                       

;----------------------------
; LOOP OVER EACH DATA_ON VALUE AND PRINT 
; CORRESPONDING INFORMATION DEPENDING 
; ON IT'S ACTION TYPE

                IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->EXPORT: LOOPING OVER EACH DATA PLOTTED AND PRINTING TO CSV FILE'
                FOR I=0,N_ELEMENTS(RES)-1 DO BEGIN
                  
                  TEMP      = RSR_INFO.DATA_ON_LIST[RES[I]]
                  ACT_TYPE  = STRMID(TEMP,0,3)
                  OPARAM    = STRMID(TEMP,4,STRLEN(TEMP)-4)

;----------------------------
; IF SENSOR RSR DATA 
                  
                  IF ACT_TYPE EQ RSR_INFO.TEXT_RSR THEN BEGIN
                  
                    TEMP    = STRSPLIT(TEMP,'_',/EXTRACT)
                    SENS_ID = WHERE(RSR_INFO.SENSOR_ID EQ TEMP[N_ELEMENTS(TEMP)-1])
                    SENSOR  = RSR_INFO.SENSOR_ID[SENS_ID]
                    NUM_BDS = RSR_INFO.SENSOR_BANDS[SENS_ID]
                    FORMAT  = STRING('(1(A,1H;),'+STRTRIM(STRING(FIX(RSR_INFO.N_WL)-1),2)+'(F15.6,1H;),1(F15.6))')
                    
                    FOR J=0,NUM_BDS[0]-1 DO BEGIN 
                      IBAND = CONVERT_INDEX_TO_WAVELENGTH(J,SENSOR[0])
                      PRINTF,OUTF,FORMAT=FORMAT,$
                      OPARAM+'_BAND_'+STRTRIM(STRING(IBAND),2)+'_NM',RSR_INFO.RSR_DATA[*,J,SENS_ID]
                    ENDFOR
                  
                  ENDIF

;----------------------------
; IF SENSOR SPECTRA OVER A SITE

                  IF ACT_TYPE EQ RSR_INFO.TEXT_SEN THEN BEGIN
                    
                    TEMP_SENS = STRSPLIT(STRMID(TEMP,4,STRLEN(TEMP)-4),'_',/EXTRACT)
                    TEMP_SITE = STRJOIN(TEMP_SENS[0:N_ELEMENTS(TEMP_SENS)-2],'_')
                    TEMP_SENS = TEMP_SENS[N_ELEMENTS(TEMP_SENS)-1]
                    
                    SENS_ID   = WHERE(RSR_INFO.SENSOR_ID EQ TEMP_SENS)
                    SITE_ID   = WHERE(RSR_INFO.SPECTRA_NAMES EQ TEMP_SITE)
                    NUM_DAT   = N_ELEMENTS(RSR_INFO.RHO_DATA[*,SENS_ID,0,SITE_ID])
                    
                    FORMAT = STRING('(1(A,1H;),'+STRTRIM(STRING(NUM_DAT-1),2)+'(F15.6,1H;),1(F15.6))')
                    PRINTF,OUTF,FORMAT=FORMAT,OPARAM+'_LAMBDA', RSR_INFO.RHO_DATA[*,SENS_ID,0,SITE_ID]
                    PRINTF,OUTF,FORMAT=FORMAT,OPARAM+'_RHO',    RSR_INFO.RHO_DATA[*,SENS_ID,1,SITE_ID]
                  
                  ENDIF

;----------------------------
; SITE SPECTRA DATA

                  IF ACT_TYPE EQ RSR_INFO.TEXT_SIT THEN BEGIN
                    
                    SITE_ID   = WHERE(RSR_INFO.SPECTRA_NAMES EQ STRMID(TEMP,4,STRLEN(TEMP)-4))
                    FORMAT = STRING('(1(A,1H;),'+STRTRIM(STRING(FIX(RSR_INFO.N_WL)-1),2)+'(F15.6,1H;),1(F15.6))')
                    PRINTF,OUTF,FORMAT=FORMAT,OPARAM,RSR_INFO.SPECTRA_ARRAY[*,SITE_ID]
                  
                  ENDIF

                ENDFOR
                
;----------------------------                
; CLOSE THE OUTPUT FILE

                IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->EXPORT: CLOSING THE OUTPUT FILE'
                NO_CSV_OUTPUT:
                FREE_LUN,OUTF
              
              ENDIF
            END
  ENDCASE

;----------------------------
; REDRAW THE WIDGET PLOT  

  IF RSR_INFO.IVERBOSE EQ 1 THEN PRINT,'RSR PLOT MODULE->EXPORT: REDRAWING THE PLOT'
  RSR_INFO.RSR_WINDOW->DRAW,RSR_INFO.RSR_VIEW
  WIDGET_CONTROL, EVENT.TOP, SET_UVALUE=RSR_INFO,/NO_COPY 

END

;**************************************************************************************
;**************************************************************************************

PRO PLOT_DIMITRI_SENSOR_RSR,RANGE,VERBOSE=VERBOSE,GROUP_LEADER=GROUP_LEADER

;------------------------------------
; FIND LOCATION OF MAIN DIMITRI FOLDER
  
  IF KEYWORD_SET(VERBOSE) THEN BEGIN
    PRINT,'RSR PLOT MODULE: RETRIEVEING FOLDER AND FILE LOCATIONS'
    IVERBOSE = 1 
  ENDIF ELSE IVERBOSE = 0
  
  DL = GET_DIMITRI_LOCATION('DL')
  SR_FOLDER   = GET_DIMITRI_LOCATION('RSR')
  SBI_FILE    = GET_DIMITRI_LOCATION('SENSOR_DATA')
  DIM_FOLDER  = GET_DIMITRI_LOCATION('RSR_DIM')
  USR_FOLDER  = GET_DIMITRI_LOCATION('RSR_USR')

  RES = FILE_INFO(SBI_FILE)
  IF RES.EXISTS EQ 0 THEN BEGIN
    PRINT, 'RSR PLOT MODULE: ERROR, SENSOR INFORMATION FILE NOT FOUND'
    RETURN
  ENDIF

;------------------------------------
; GET A LIST OF ALL SENSORS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: RETRIEVEING LIST OF SENSORS'
  TEMP        = GET_DIMITRI_SENSOR_DATA_TEMPLATE()
  RES         = READ_ASCII(SBI_FILE,TEMPLATE=TEMP)
  SENSOR_ID   = RES.SENSOR_ID
  NUM_SENSORS = N_ELEMENTS(SENSOR_ID)
  SENSOR_BANDS= RES.NUM_BANDS
  
;------------------------------------
; DEFINE AN ARRAY CORREPOSNDING TO 
; WL RANGE IN 0.5NM STEPS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: DEFINING WAVELENGTH RANGE'
  WL_RANGE    = FLOAT(RANGE)
  N_WL        = (WL_RANGE[1]-WL_RANGE[0])/0.5
  WAVELENGTHS = 0.5*FINDGEN(N_WL)+WL_RANGE[0]
  
;------------------------------------
; GET A LIST OF ALL SITE SPECTRA 

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: RETRIEVING LIST OF ALL SITE SPECTRA DATA'
  DIM_FILES     = FILE_SEARCH(DIM_FOLDER,'TOA*.txt')
  USR_FILES     = FILE_SEARCH(USR_FOLDER,'TOA*.txt')
  SPECTRA_FILES = [DIM_FILES,USR_FILES]
  RES           = WHERE(SPECTRA_FILES NE '')
  SPECTRA_FILES = SPECTRA_FILES[RES]
  NUM_SPECTRA   = N_ELEMENTS(SPECTRA_FILES)
  SPECTRA_ARRAY = FLTARR(N_WL,NUM_SPECTRA)
  IF NUM_SPECTRA GT NUM_SENSORS THEN MAX_ITER = NUM_SPECTRA ELSE MAX_ITER = NUM_SENSORS

;------------------------------------
; CREATE LIST OF SITE SPECTRA NAMES

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: CREATING LIST OF ALL SITE SPECTRA NAMES'
  SPECTRA_NAMES = STRARR(NUM_SPECTRA)
  FOR I=0,NUM_SPECTRA-1 DO BEGIN
    TEMP = STRSPLIT(SPECTRA_FILES[I],DL,/EXTRACT)
    TEMP = TEMP(N_ELEMENTS(TEMP)-1)
    SPECTRA_NAMES[I] = STRMID(TEMP,0,STRLEN(TEMP)-4)  
  ENDFOR

;------------------------------------
; CREATE ARRAYS TO HOLD ALL BAND DATA 
; FOR EACH SENSOR AND WAVELENGTH VALUES

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: DEFINING ARRAYS TO HOLD RSR DATA'
  RSR_DATA      = FLTARR(N_WL,MAX(SENSOR_BANDS),NUM_SENSORS)
  RSR_TEMPLATE  = GET_DIMITRI_RSR_TEMPLATE()

;------------------------------------
; LOOP OVER EACH SENSOR AND READ RSR DATA 
; AS WELL AS SITE SPECTRA DATA
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: STARTING LOOP TO READ RSR AND SITE SPECTRA DATA'  
  FOR RSR_I=0,MAX_ITER-1 DO BEGIN
   IF RSR_I LT NUM_SENSORS THEN BEGIN
      FOR RSR_BD=0,SENSOR_BANDS[RSR_I]-1 DO BEGIN
        RES = FILE_SEARCH(SR_FOLDER+SENSOR_ID[RSR_I]+DL+'RSR_'+SENSOR_ID[RSR_I]+'_BAND_'+STRTRIM(STRING(RSR_BD),2)+'.txt')
        IF STRCMP(RES[0],'') NE 1 THEN BEGIN
          TEMP = READ_ASCII(RES[0],TEMPLATE = RSR_TEMPLATE)
          RSR_DATA[*,RSR_BD,RSR_I] = EXTRACT_DIMITRI_RSR(TEMP,WAVELENGTHS)
        ENDIF
      ENDFOR
   ENDIF
   IF RSR_I LT NUM_SPECTRA THEN BEGIN
        TEMP = READ_ASCII(SPECTRA_FILES[RSR_I],TEMPLATE = RSR_TEMPLATE)
        SPECTRA_ARRAY[*,RSR_I] = EXTRACT_DIMITRI_RSR(TEMP,WAVELENGTHS)   
   ENDIF
  ENDFOR


;------------------------------------
; CONVOLUTE SITE SPECTRA TO SENSOR RSR

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: STARTING LOOP TO CONVOLUTE SITE SPECTRA TO SENSOR RSR'   
  RHO_DATA = MAKE_ARRAY(/FLOAT,MAX(SENSOR_BANDS),NUM_SENSORS,2,NUM_SPECTRA)

  FOR I=0,NUM_SPECTRA-1 DO BEGIN
    FOR J=0,NUM_SENSORS-1 DO BEGIN
      FOR K=0,SENSOR_BANDS[J]-1 DO BEGIN
        RES = WHERE(RSR_DATA[*,K,J] GT 0.0)
        IF RES[0] GT -1 THEN BEGIN
          SLOC = RES[0]
          ELOC = RES[N_ELEMENTS(RES)-1]
          RHO_DATA[K,J,0,I] = (WAVELENGTHS[SLOC]+WAVELENGTHS[ELOC])/2.0
          RHO_DATA[K,J,1,I] = TOTAL(SPECTRA_ARRAY[SLOC:ELOC,I]*RSR_DATA[SLOC:ELOC,K,J])/TOTAL(RSR_DATA[SLOC:ELOC,K,J])
        ENDIF
      ENDFOR
    ENDFOR
  ENDFOR

;------------------------------------
; DEFINE PARAMETERS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: DEFINING BASE PARAMETERS' 
  SML_SPEC = STRMID(SPECTRA_NAMES,4,3)
  SML_SENS = ['ATS','AT2','MER','AQA','PAR','VGT']
  TEXT_RSR = 'RSR'
  TEXT_RHO = 'RHO'
  TEXT_SEN = 'SEN'
  TEXT_SIT = 'SIT'

;------------------------------------
; DEFINE ARRAYS TO INDICATE WHICH DATA IS CURRENTLY PLOTTED

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: DEFINING DATA ON ARRAY FOR PLOT'   
  DATA_ON_LIST = MAKE_ARRAY(/STRING,NUM_SENSORS+NUM_SPECTRA+(NUM_SENSORS*NUM_SPECTRA))
  DATA_ON_LIST[0:NUM_SENSORS-1] = TEXT_RSR+'_'+SENSOR_ID
  DATA_ON_LIST[NUM_SENSORS:NUM_SENSORS+NUM_SPECTRA-1] = TEXT_SIT+'_'+SPECTRA_NAMES
  DATA_ON = MAKE_ARRAY(N_ELEMENTS(DATA_ON_LIST),/INTEGER)

;------------------------------------
; DEFINE THE LEGEND NAMES

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: DEFINING LEGEND NAMES' 
  LEGEND_NAMES = MAKE_ARRAY(/STRING,NUM_SENSORS+NUM_SPECTRA+(NUM_SENSORS*NUM_SPECTRA))
  LEGEND_NAMES[0:NUM_SENSORS-1] = TEXT_RSR+'_'+SML_SENS
  LEGEND_NAMES[NUM_SENSORS:NUM_SENSORS+NUM_SPECTRA-1] = SML_SPEC

  FOR I=0,NUM_SPECTRA-1 DO BEGIN
    FOR J=0,NUM_SENSORS-1 DO BEGIN
      DATA_ON_LIST[(NUM_SENSORS+NUM_SPECTRA)+I*NUM_SENSORS+J]= TEXT_SEN+'_'+SPECTRA_NAMES[I]+'_'+SENSOR_ID[J]
      LEGEND_NAMES[(NUM_SENSORS+NUM_SPECTRA)+I*NUM_SENSORS+J]= SML_SPEC[I]+'_'+SML_SENS[J]
    ENDFOR
  ENDFOR

;------------------------------------
; RETRIEVE COLOURS FOR SITES AND SENSORS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: RETRIEVING COLOURS FOR PLOT' 
  TEMP = GET_DIMITRI_VISUALISATION_COLOURS(NUM_SENSORS+NUM_SPECTRA)
  SENSOR_COLOURS  = MAKE_ARRAY(3,NUM_SENSORS,/BYTE)
  SITE_COLOURS    = MAKE_ARRAY(3,NUM_SPECTRA,/BYTE)
  SENSOR_COLOURS[*,0:NUM_SENSORS-1] = TEMP[*,0:NUM_SENSORS-1]
  SITE_COLOURS[*,0:NUM_SPECTRA-1]   = TEMP[*,NUM_SENSORS:NUM_SENSORS+NUM_SPECTRA-1]

;------------------------------------
; CREATE AN ARRAY OF OBJECTS TO HOLD 
; THE OBJECT PLOTS AND MODELS FOR EACH 
; BAND OF EACH SENSOR

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: CREATING OBJECT ARRAY FOR ALL DATA'
  RSR_OBJ = OBJARR(MAX(SENSOR_BANDS),NUM_SENSORS,2) 
  RHO_OBJ = OBJARR(NUM_SENSORS,NUM_SPECTRA,2) 
  SPC_OBJ = OBJARR(NUM_SPECTRA,2) 

;------------------------------------ 
; SET THE PLOT PARAMETERS  
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: SETTING PLOT PARAMETERS'
  RSR_XRANGE  = [RANGE[0],RANGE[1]]
  RSR_YRANGE  = [0.0,1.]
  XMAJTICKS   = (1+(RANGE[1]-RANGE[0])*0.05)<11
  YMAJTICKS   = RSR_YRANGE[1]-RSR_YRANGE[0]

;------------------------------------ 
; CREATE THE PALETTE OBJECT
  
  COLORTABLE  = 39
  RSR_PALETTE = OBJ_NEW('IDLGRPALETTE')
  RSR_PALETTE->LOADCT, COLORTABLE
  
;------------------------------------  
; CREATE X AND Y TITLE OBJECTS

  IF STRCMP(STRUPCASE(!VERSION.OS_FAMILY),'WINDOWS') EQ 1 THEN   RSR_FONT  = OBJ_NEW('IDLGRFONT',SIZE=11.0) $
    ELSE RSR_FONT = OBJ_NEW('IDLGRFONT',SIZE=9.0)
  RSR_YTITLE_rho  = OBJ_NEW('IDLGRTEXT',"Reflectance (dl)",RECOMPUTE_DIMENSION=1,FONT=RSR_FONT)
  RSR_XTITLE      = OBJ_NEW('IDLGRTEXT',"Wavelength (nm)",RECOMPUTE_DIMENSION=1,FONT=RSR_FONT)  
  
;------------------------------------ 
; CREATE THE AXIS OBJECTS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: CREATING THE PLOT AXIS' 
  RSR_XAXIS = OBJ_NEW('IDLGRAXIS', 0, TICKLEN=0.025, MAJOR=XMAJTICKS, TITLE=RSR_XTITLE, $
                      RANGE=RSR_XRANGE, /EXACT, XCOORD_CONV=NORM_COORD(RSR_XRANGE))
  RSR_YAXIS = OBJ_NEW('IDLGRAXIS', 1, TICKLEN=0.025, MINOR=4, TITLE=RSR_YTITLE_rho, $
                      RANGE=RSR_YRANGE, /EXACT, YCOORD_CONV=NORM_COORD(RSR_YRANGE))
  RSR_XAXIS->GETPROPERTY,TICKTEXT=TEMP_TETX
  TEMP_TETX->SETPROPERTY,FONT=RSR_FONT
  RSR_YAXIS->GETPROPERTY,TICKTEXT=TEMP_TETY
  TEMP_TETY->SETPROPERTY,FONT=RSR_FONT  
  RSR_LEGEND = OBJ_NEW('IDLGRLEGEND',/SHOW_OUTLINE,/HIDE,BORDER_GAP=0.2,FONT=RSR_FONT)  
  
;------------------------------------  
; CREATE THE PLOT MODEL
 
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: CREATING THE PLOT AND LEGEND MODELS'
  RSR_MODEL = OBJ_NEW('IDLGRMODEL')
  RSR_MODEL->ADD,RSR_XAXIS
  RSR_MODEL->ADD,RSR_YAXIS
  RSR_LEGENDMODEL = OBJ_NEW('IDLGRMODEL')
  RSR_LEGENDMODEL->ADD,RSR_LEGEND

;------------------------------------ 
; CREATE THE PLOT VIEW

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: CREATING THE RSR_VIEW'
  RSR_VIEW = OBJ_NEW('IDLGRVIEW',/DOUBLE)
  RSR_VIEW->ADD,RSR_MODEL
  RSR_VIEW->ADD,RSR_LEGENDMODEL
  RSR_VIEW->SETPROPERTY, VIEWPLANE_RECT = [-0.14, -0.12, 1.3, 1.2]  
  
;------------------------------------ 
; GET THE SCREEN DIMENSIONS

  DIMS  = GET_SCREEN_SIZE()
  XSIZE = 700
  YSIZE = 450
  XLOC  = (DIMS[0]/2)-(XSIZE/2)
  YLOC  = (DIMS[1]/2)-(YSIZE/2)  
  
;------------------------------------ 
; DEFINE THE BASE WIDGET FOR THE PLOT

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: DEFINING THE WIDGET AND BUTTONS'
  RSR_WD_TLB  = WIDGET_BASE(TITLE='DIMITRI: RELATIVE SPECTRAL RESPONSE',MBAR=MENUBASE,TLB_SIZE_EVENTS=1,$
                            COLUMN=1, BASE_ALIGN_CENTER=1,XOFFSET=XLOC, YOFFSET=YLOC)
  RSR_WD_DRAW = WIDGET_DRAW(RSR_WD_TLB, XSIZE=XSIZE, YSIZE=YSIZE, GRAPHICS_LEVEL=2, RETAIN=2)

;------------------------------------ 
; CREATE THE FILE MENU AND BUTTONS

  RSR_WD_DLIM = WIDGET_BUTTON(MENUBASE,     VALUE='||', SENSITIVE=0)
  RSR_WD_FILE = WIDGET_BUTTON(MENUBASE,     VALUE='File'      ,/MENU)
  RSR_WD_DLIM = WIDGET_BUTTON(MENUBASE,     VALUE='||', SENSITIVE=0)
  RSR_WD_OPTS = WIDGET_BUTTON(MENUBASE,     VALUE='Options'   ,/MENU)
  RSR_WD_DLIM = WIDGET_BUTTON(MENUBASE,     VALUE='||', SENSITIVE=0)
  RSR_WD_RSR  = WIDGET_BUTTON(MENUBASE,     VALUE='Sensor_RSR'   ,/MENU)
  RSR_WD_DLIM = WIDGET_BUTTON(MENUBASE,     VALUE='||', SENSITIVE=0)
  RSR_WD_SENS = WIDGET_BUTTON(MENUBASE,     VALUE='Sensor_Spectra'   ,/MENU)
  RSR_WD_DLIM = WIDGET_BUTTON(MENUBASE,     VALUE='||', SENSITIVE=0)
  RSR_WD_SITE = WIDGET_BUTTON(MENUBASE,     VALUE='Site_Spectra'   ,/MENU)
  RSR_WD_DLIM = WIDGET_BUTTON(MENUBASE,     VALUE='||', SENSITIVE=0)
  RSR_WD_EXPT = WIDGET_BUTTON(RSR_WD_FILE,  VALUE='Save as...',/MENU)
  RSR_WD_OUPT = WIDGET_BUTTON(RSR_WD_EXPT,  VALUE='JPG'       ,UVALUE='JPG'   ,EVENT_PRO='RSR_OBJECT_EXPORT')
  RSR_WD_OUPT = WIDGET_BUTTON(RSR_WD_EXPT,  VALUE='PNG'       ,UVALUE='PNG'   ,EVENT_PRO='RSR_OBJECT_EXPORT')
  RSR_WD_OUPT = WIDGET_BUTTON(RSR_WD_EXPT,  VALUE='CSV'       ,UVALUE='CSV'   ,EVENT_PRO='RSR_OBJECT_EXPORT')
  RSR_WD_EXIT = WIDGET_BUTTON(RSR_WD_FILE, /SEPARATOR         ,VALUE ='Exit'  ,EVENT_PRO='RSR_OBJECT_EXIT')

;------------------------------------ 
; CREATE THE LEGEND AND RESET BUTTON

  RSR_WD_REFS = WIDGET_BUTTON(RSR_WD_OPTS,  VALUE='Legend'  ,UVALUE='LEGEND', EVENT_PRO='RSR_OBJECT_OPTION')
  RSR_WD_REFS = WIDGET_BUTTON(RSR_WD_OPTS,  VALUE='Reset'   ,UVALUE='RESET' , EVENT_PRO='RSR_OBJECT_OPTION')

;------------------------------------ 
; LOOP OVER EACH SENSOR AND CREATE BUTTON FOR RSR, 
; SENSOR SPECTRA DATA AND SITE SPECTRA DATA
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: STARTING LOOP TO DEFINE BUTTONS FOR SENSOR AND SITE COMBO'
  FOR RSR_SENS=0,NUM_SENSORS-1 DO BEGIN
    RSR_WD_RSR_BTN = WIDGET_BUTTON(RSR_WD_RSR, VALUE=SENSOR_ID[RSR_SENS],$
                                UVALUE=TEXT_RSR+'_'+SENSOR_ID[RSR_SENS], EVENT_PRO='RSR_OBJECT_PLOT')
  ENDFOR
  
  FOR I=0,NUM_SPECTRA-1 DO BEGIN
    RSR_WD_SITE_BTN = WIDGET_BUTTON(RSR_WD_SITE, VALUE=SPECTRA_NAMES[I],$
                                UVALUE=TEXT_SIT+'_'+SPECTRA_NAMES[I], EVENT_PRO='RSR_OBJECT_PLOT')
    RES = WHERE(RHO_DATA[*,*,1,I] GT 0.0)
    IF RES[0] GT -1 THEN BEGIN
      RSR_WD_SENS_BTN = WIDGET_BUTTON(RSR_WD_SENS,  VALUE=SPECTRA_NAMES[I],/MENU)
      
      for j=0,NUM_SENSORS-1 do begin
      tt = WHERE(RHO_DATA[*,j,1,I] GT 0.0)
      if tt[0] gt -1 then RSR_WD_SENS_BTN2 = WIDGET_BUTTON(RSR_WD_SENS_BTN, VALUE=SENSOR_ID[J],$
                                UVALUE=TEXT_SEN+'_'+SPECTRA_NAMES[I]+'_'+SENSOR_ID[J], EVENT_PRO='RSR_OBJECT_PLOT')
      endfor
      
;      FOR J=0,N_ELEMENTS(RES)-1 DO BEGIN
;        RSR_WD_SENS_BTN2 = WIDGET_BUTTON(RSR_WD_SENS_BTN, VALUE=SENSOR_ID[RES[J]],$
;                                UVALUE=TEXT_SEN+'_'+SPECTRA_NAMES[I]+'_'+SENSOR_ID[RES[J]], EVENT_PRO='RSR_OBJECT_PLOT')    
;    
;      ENDFOR
    ENDIF
  ENDFOR
  
;------------------------------------  
; REALIZE THE WIDGET

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: REALISING THE WIDGET'
  WIDGET_CONTROL, RSR_WD_TLB, /REALIZE
  WIDGET_CONTROL, RSR_WD_DRAW, GET_VALUE=RSR_WINDOW
 
;------------------------------------  
; CREATE THE BLANK PLOT AND MOVE THE LEGEND
 
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: ADDING THE BLANK PLOT AND MOVING THE LEGEND'
  RSR_WINDOW->DRAW, RSR_VIEW
  DIMS = RSR_LEGEND->COMPUTEDIMENSIONS(RSR_WINDOW) 
  RSR_LEGENDMODEL->TRANSLATE, 1.0, .78, 0 
  RSR_WINDOW->SETPROPERTY, PALETTE=RSR_PALETTE
  RSR_WINDOW->DRAW, RSR_VIEW
  IF NOT KEYWORD_SET(GROUP_LEADER) THEN GROUP_LEADER = RSR_WD_TLB
  
;------------------------------------  
; DEFINE THE INFO STRUCTURE TO CONTAIN 
; ALL DATA AND OBJECTS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: DEFINING SUPER STRUCTURE TO CONTAIN ALL DATA'
  RSR_INFO = {                                  $
              IVERBOSE        : IVERBOSE        ,$
              RSR_WINDOW      : RSR_WINDOW      ,$
              SENSOR_ID       : SENSOR_ID       ,$
              NUM_SENSORS     : NUM_SENSORS     ,$
              SENSOR_BANDS    : SENSOR_BANDS    ,$
              N_WL            : N_WL            ,$
              WAVELENGTHS     : WAVELENGTHS     ,$
              SPECTRA_FILES   : SPECTRA_FILES   ,$
              NUM_SPECTRA     : NUM_SPECTRA     ,$
              SPECTRA_ARRAY   : SPECTRA_ARRAY   ,$
              SPECTRA_NAMES   : SPECTRA_NAMES   ,$
              RSR_DATA        : RSR_DATA        ,$
              RHO_DATA        : RHO_DATA        ,$
              RSR_OBJ         : RSR_OBJ         ,$
              RHO_OBJ         : RHO_OBJ         ,$
              SPC_OBJ         : SPC_OBJ         ,$
              DATA_ON         : DATA_ON         ,$
              DATA_ON_LIST    : DATA_ON_LIST    ,$
              SENSOR_COLOURS  : SENSOR_COLOURS  ,$
              SITE_COLOURS    : SITE_COLOURS    ,$
              RSR_XRANGE      : RSR_XRANGE      ,$
              LEGEND_NAMES    : LEGEND_NAMES    ,$
              RSR_YRANGE      : RSR_YRANGE      ,$
              XMAJTICKS       : XMAJTICKS       ,$
              YMAJTICKS       : YMAJTICKS       ,$
              RSR_PALETTE     : RSR_PALETTE     ,$
              RSR_FONT        : RSR_FONT        ,$
              PLOT_TYPE       : 'NON'           ,$
              RSR_YTITLE_RHO  : RSR_YTITLE_RHO  ,$
              RSR_XTITLE      : RSR_XTITLE      ,$
              RSR_XAXIS       : RSR_XAXIS       ,$
              RSR_YAXIS       : RSR_YAXIS       ,$
              RSR_LEGEND      : RSR_LEGEND      ,$
              RSR_MODEL       : RSR_MODEL       ,$
              RSR_LEGENDMODEL : RSR_LEGENDMODEL ,$
              RSR_VIEW        : RSR_VIEW        ,$     
              TEXT_RSR        : TEXT_RSR        ,$
              TEXT_RHO        : TEXT_RHO        ,$
              TEXT_SEN        : TEXT_SEN        ,$
              TEXT_SIT        : TEXT_SIT        $
              }

;------------------------------------  
; ADD INFO STRUCTURE TO WIDGET AND REGISTER WITH THE XMANAGER

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RSR PLOT MODULE: REGISTERING WITH THE XMANAGER' 
  WIDGET_CONTROL,RSR_WD_TLB,SET_UVALUE=RSR_INFO,/NO_COPY,GROUP_LEADER=GROUP_LEADER
  XMANAGER,'RSR_OBJECT', RSR_WD_TLB

END