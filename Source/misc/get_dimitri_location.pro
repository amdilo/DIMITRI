;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      GET_DIMITRI_LOCATION 
;* 
;* PURPOSE:
;*      PROVIDES THE HARD CODED LOCATION OF DIMITRI FOLDERS AND FILES RELATIVE TO 
;*      THE MAIN DIMITRI FOLDER.
;* 
;* CALLING SEQUENCE:
;*      RES = GET_DIMITRI_LOCATION(LOCATION)      
;* 
;* INPUTS:
;*      LOCATION - A STRING OF THE LOCATION CASE REQUIRED (E.G. 'INPUT' FOR THE INPUT FOLDER)     
;*
;* KEYWORDS:
;*      VERBOSE  - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      RESULT   - THE FULL PATH OF THE LOCATIONS PATH, OR IF NOT FOUND THEN 'ERROR' 
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*        21 MAR 2011 - C KENT    - DIMITRI-2 V1.0
;*        23 AUG 2011 - C KENT    - ADDED TOOL NAME VARIABLE
;*        29 NOV 2013 - PML / MAGELLIUM  - ADD NEW CONTENTS (AUX_DATA...) FOR DIMITRI MAG VERSION
;*        29 JAN 2015 - NCG / MAGELLIUM  - UPDATE FOR DIMITRI 4.0 VERSION
;*
;* VALIDATION HISTORY:
;*        14 APR 2011 - C KENT    - WINDOWS 32-BIT IDL 7.1 AND LINUX 64-BIT IDL 8.0 NOMINAL
;*                                  COMPILATION AND OPERATION       
;*        17 APR 2014 - PML / MAGELLIUM       - WINDOWS 64-BIT MACHINE / IDL 8.2.3 : COMPILATION AND 
;*                                  CALLING SUCCESSFUL
;*      20 JAN 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION GET_DIMITRI_LOCATION,LOCATION,VERBOSE=VERBOSE

;----------------------
; IDENTIFIY CURRENT DIRECTORY AND INPUT FOLDER

  CD, CURRENT=CURRENT_DIR
  POS = STRPOS(CURRENT_DIR,'DIMITRI_',/REVERSE_SEARCH)  
  IF POS EQ -1 THEN BEGIN
    PRINT, 'ERROR, INPUT DIMITRI FOLDER NOT FOUND : Start IDL from Folder Containing File "DIMITRI_V4.0.sav"' 
    PRINT, 'IDL Current Folder must contents at least "DIMITRI_" string'
    RETURN,'ERROR'
  ENDIF
  
  DL = PATH_SEP();STRMID(CURRENT_DIR,POS-1,1)
  
  ; >> use current folder (CURRENT_DIR) as CENTRAL_FOLDER  
  CENTRAL_FOLDER = CURRENT_DIR+DL
  
  CASE STRUPCASE(LOCATION) OF
  
;----------------------
; ERROR STATUS
  'STATUS_OK'     : RESULT = 1 
  'STATUS_ERROR'  : RESULT = -1 
  'STATUS_NODATA' : RESULT = 0
   
;----------------------
; FOLDERS
  
  'DL'            : RESULT = DL ; DELIMITER 
  'DIMITRI'       : RESULT = CENTRAL_FOLDER ; DIMITRI ROOT FOLDER
  'OUTPUT'        : RESULT = CENTRAL_FOLDER+'Output'+DL ; DIMITRI OUTPUT FOLDER
  'AUX'           : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL ; DIMITRI AUX FOLDER
  'RSR'           : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'spectral_response'+DL
  'RSR_DIM'       : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'spectral_response'+DL+'DIMITRI_Sites'+DL  
  'RSR_USR'       : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'spectral_response'+DL+'USER_Sites'+DL
  'MARINE'        : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'marine'+DL
  'RTM'           : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'RTM'+DL
  'BIN'           : RESULT = CENTRAL_FOLDER+'Bin'+DL
  'DB_BACKUP'     : RESULT = CENTRAL_FOLDER+'Bin'+DL+'DB_backup'+DL
  'SOURCE'        : RESULT = CENTRAL_FOLDER+'Source'+DL
  'BITMAPS'       : RESULT = CENTRAL_FOLDER+'Source'+DL+'bitmaps'+DL
  'PNG_IMAGES'    : RESULT = CENTRAL_FOLDER+'Source'+DL+'png'+DL
  'ECMWF_ERA'     : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'ECMWF_ERA_Interim'+DL
  'LIBRAD'        : RESULT = CENTRAL_FOLDER+'libRadtran-1.7'+DL
  'LIBRAD_DATA'   : RESULT = CENTRAL_FOLDER+'libRadtran-1.7'+DL+'data'+DL

; DATA BASES

  ; L1B PRODUCTS / SITE BASED
  'DATABASE'      : RESULT = CENTRAL_FOLDER+'Bin'+DL+'DIMITRI_DATABASE.CSV'

  'INPUT'         : RESULT = CENTRAL_FOLDER+'Input'+DL ; INPUT PRODUCT FOLDER
  'INGESTION_OUTPUT'   : RESULT = GET_DIMITRI_LOCATION('OUTPUT')+DL+'INGESTION'+DL
  
  ; AUX_DATA
  'INPUT_METEO'        : RESULT = CENTRAL_FOLDER+'InputMeteo'+DL  ; DIMITRI METEO DATA
  'INPUT_AUX_SMAC'     : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'Smac'+DL  ; DIMITRI AUX SMAC COEFFS FILES
  'INPUT_AUX_LUT'      : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'Luts'+DL  ; DIMITRI AUX LUT FILES
  'INPUT_AUX_CLIM_REF' : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'Desert_Clim_Ref'+DL

 
  ; CLOUD SCREENING
  'AUTO_CS_1_NAME'   : RESULT = 'ARGANS Automatic Cloud Screening'
  'AUTO_CS_2_NAME'   : RESULT = 'MAGELLIUM Automatic Cloud Screening'


;----------------------
; FILES
  
  'AATSR_DRIFT'   : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'AATSR_VIS_DRIFT_V02-09.DAT'
  'MERIS_IM2004'  : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'MERIS_Irradiances_Model2004.txt'

  'CONFIG'        : RESULT = CENTRAL_FOLDER+'Bin'+DL+'DIMITRI_CONFIGURATION.txt'

  'BAND_INDEX'    : RESULT = CENTRAL_FOLDER+'Bin'+DL+'DIMITRI_Band_Centre_Index.txt'
  'BAND_NAME'     : RESULT = CENTRAL_FOLDER+'Bin'+DL+'DIMITRI_Band_Names.txt'
  'BAND_CONFIG'     : RESULT = CENTRAL_FOLDER+'Bin'+DL+'DIMITRI_Band_Configuration.csv'
  
  'AUX_DATA'      : RESULT = CENTRAL_FOLDER+'Bin'+DL+'DIMITRI_AUX_DATA.txt'
  'SENSOR_DATA'   : RESULT = CENTRAL_FOLDER+'Bin'+DL+'DIMITRI_SENSOR_DATA.txt'
  'SITE_DATA'     : RESULT = CENTRAL_FOLDER+'Bin'+DL+'DIMITRI_SITE_DATA.txt'
  'SITE_TYPES'    : RESULT = CENTRAL_FOLDER+'Bin'+DL+'DIMITRI_SITE_TYPES.txt'

  'SG_BAND_DATA' : RESULT = CENTRAL_FOLDER+'Bin'+DL+'DIMITRI_SUNGLINT_BANDS.txt'
  
  'TITLE_PNG'     : RESULT = GET_DIMITRI_LOCATION('PNG_IMAGES')+'dimitri_title.png'
  'INGEST_PNG'    : RESULT = GET_DIMITRI_LOCATION('PNG_IMAGES')+'DataIngestion.png'
  'CLOUD_SCREENING_PNG'   : RESULT = GET_DIMITRI_LOCATION('PNG_IMAGES')+'CloudScreening.png'
  'SENSOR_TO_SENSOR_COMP_PNG'   : RESULT = GET_DIMITRI_LOCATION('PNG_IMAGES')+'SensorToSensorComparison.png'
  'SENSOR_TO_SIMU_COMP_PNG'   : RESULT = GET_DIMITRI_LOCATION('PNG_IMAGES')+'SensorToSimuComparison.png'
  
  'BRIGHT_LUT'    : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'CLOUD_SCREENING_Bright_Threshold_LUT.dat'
  'OZONE_TRANS'   : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'transmission'+dl+'Transmission_O3.txt'
  'WVAP_TRANS'    : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'transmission'+dl+'Transmission_H2O.txt'
  'GAS_TRANS'     : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'transmission'+dl+'Transmission_O2_trace_gases.txt'
  'VGT_CORRECTION': RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'VGT2_CNES_Earth_Sun_correction.txt'
  'MM01_ECHI'     : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'marine'+dl+'Morel-e-chi-coef-2001.txt'
  'MOREL_MUD'     : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'marine'+dl+'Morel-mud.txt'
  'WATER_COEF'    : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'marine'+dl+'water_coef.txt'
  'REFRACT_INDEX' : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'marine'+dl+'water_refractive_index.txt'
  'SUM'           : RESULT = CENTRAL_FOLDER+'User_Manual.pdf'
  
  'SOLAR_IRRADIANCE'    : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'SOLAR_IRRADIANCES_6S.txt'
  'DESERT_BRDF_COEFFS'  : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'Brdf_Coefficients'+DL
  'EOS_SENSOR_AND_6S'   : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'EOS_Sensor_and_6S.txt'

  ; DESERT ARG
  'SOLAR_SPECTRUM'    : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'solar_spectrum'+DL+'Thuillier_2003_solar_irradiance.txt'
  'PICS_BRDF_DATA'    : RESULT = CENTRAL_FOLDER+'AUX_DATA'+DL+'PICS_BRDF_data'+DL
  
;----------------------
; SYSTEM VALUES

  ; TOOL VERSION
  'TOOL'                      : RESULT = 'DIMITRI V4.0'
  
  ; YEAR TO FIND
  'YEAR_LIST'                 : RESULT = [ STRING(INDGEN(15)+2000,FORMAT='(I4)') , '1998-2012'] ; ADD SPECIFIC CASE OF CHLOROPHYLL SOURCE (MEAN OVER YEARS 1998-2012)
  
  ; AUXDATA PROCESSING
  'AUXDATA_FILE_EXT'          : RESULT = '*.{CDF,NC,NCDF,cdf,nc,ncdf}' 
  'AUXDATA_INTERP_BORDER'     : RESULT = 3   ; in [Pixel Nb]

  ; NCDF CONFIGURATION VALUES
  'NCDF_MISSING_VALUE'       : RESULT = -999.0

  ; INGESTION PROCESS VALUES
  'MIN_PIXEL_NB_INGEST_PROCESS' : RESULT = 50    ; MINIMUM NUMBER OF PIXELS TO ALLOW INGESTION PROCESS (default = 50)
  'MIN_PIXEL_NB_CALIB_PROCESS'  : RESULT = 50    ; MINIMUM NUMBER OF PIXELS TO ALLOW SUNGLINT/DESERT/RAYLEIGH ANALYSIS IN A PRODUCT

  ; SUNGLINT_PROCESS VALUES
  'MIN_THETA_N_SG_PROCESS'      : RESULT = 0.0   ; MINIMUM THETA_N ANGLE FOR SUNGLINT DETECTION (default = 0.0)
  'MAX_THETA_N_SG_PROCESS'      : RESULT = 4.0   ; MAXIMUM THETA_N ANGLE FOR SUNGLINT DETECTION (default = 4.0)
  'MAX_THETA_R_SG_PROCESS'      : RESULT = 36.0  ; MAXIMUM THETA_R ANGLE FOR SUNGLINT DETECTION (default = 36.0)
  'MIN_NIR_SG_CS_PROCESS'       : RESULT = 0.045  ; MINIMUM NIR REFLECTANCE VALUE FOR CLOUD SCREENING IN SUNGLINT DETECTION

  ; SUNGLINT_PROCESS VALUES
  'MAX_WAVELENGTH_VALUE_FOR_SUNGLINT'    : RESULT = 670   ; MAXIMAL WAVELENGTH OF THE BANDS PROCESSED FOR SUNGLINT CALIBRATION(IN NM)
  'MIN_NIR_SG_CALIBRATION'               : RESULT = 0.15  ; MINIMUM NIR REFLECTANCE VALUE FOR SUNGLINT DETECTION 
  'MAX_WS_SG_CALIBRATION'                : RESULT = 5     ; MAXIMUM WIND SPEED VALUE (FROM AUX_DATA) FOR SUNGLINT CALIBRATION
  'MAX_WS_ESTIM_SG_CALIBRATION'          : RESULT = 5     ; MAXIMUM WIND SPEED VALUE (WS ESTIMATION) FOR SUNGLINT CALIBRATION

  ; RAYLEIGH PROCESS VALUES 
  'MAX_WAVELENGTH_VALUE_FOR_RAYLEIGH'     : RESULT = 670   ; MAXIMAL WAVELENGTH OF THE BANDS PROCESSED FOR RAYLEIGH CALIBRATION(IN NM)
  'MIN_NIR_RAY_CALIBRATION'               : RESULT = 0.045 ; MINIMUM NIR REFLECTANCE VALUE FOR RAYLEIGH CALIBRAION
  'MAX_WS_RAY_CALIBRATION'                : RESULT = 5     ; MAXIMUM WIND SPEED VALUE (FROM AUX_DATA) FOR RAYLEIGH CALIBRAION
  'MAX_TAU_RAY_CALIBRATION'               : RESULT = 0.1     ; MAXIMUM TAU VALUE (TAU ESTIMATION) FOR RAYLEIGH CALIBRAION

  ; DESERT CALIBRATION SPECIFICITIES
  'PRESSURE_CSTE'                           : RESULT = 1013.25;  ; PRESSURE AS CONSTANTE VALUE / USED IN SMAC CALC
  'TAUP_550'                                : RESULT = 0.2 ; AEROSOL OPTICAL THICKNESS
  
  ELSE            : BEGIN
                      PRINT, 'ERROR, LOCATION CASE NOT FOUND (', LOCATION, ')'
                      RETURN,'ERROR'
                    END
  ENDCASE

;----------------------
; RETURN PATH FOUND

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'RETRIEVED LOCATION : ',RESULT
  RETURN, RESULT

END