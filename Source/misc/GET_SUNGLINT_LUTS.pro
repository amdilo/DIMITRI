;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      GET_SUNGLINT_LUTS
;*
;* PURPOSE:
;*      RETURNS THE LUT VALUES ACCORDING SENSOR NAME AND SUNGLINT METHOD
;*
;* CALLING SEQUENCE:
;*      GET_SUNGLINT_LUTS, SENSOR, SUNGLINT_LUT_FILE_STRUCT=SUNGLINT_LUT_FILE_STRUCT, VERBOSE=VERBOSE
;* INPUTS:
;*      SENSOR = A STRING CONTAINING THE NAME OF THE REQUIRED SENSOR (AATSR/ATSR2/MODISA/MERIS/PARASOL)
;
;* KEYWORDS:
;*      SUNGLINT_LUT_FILE_STRUCT - STRUTURE WHICH CONTAINS ALL LUTS INFORMATION
;*      VERBOSE  - VERBOSE KEYWORD
;*
;* OUTPUTS:
;*      STATUS  - = -1 / FAILED - = 1 / SUCCEED
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      29 NOV 2013 - PML / MAGELLIUM - CREATION
;*      29 NOV 2013 - PML / MAGELLIUM - ADD METHOD KEYWORD
;*      26 FEB 2015 - NCG / MAGELLIUM - UPDATE FOR DIMITRI V4
;*
;* VALIDATION HISTORY:
;*      17 APR 2014 - PML / MAGELLIUM   - WINDOWS 64-BIT MACHINE IDL 8.2.3 : COMPILATION AND CALLING SUCCESSFUL
;*      20 JAN 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION GET_SUNGLINT_LUT_TEMPLATE, VERBOSE=VERBOSE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'GET_SUNGLINT_LUT_TEMPLATE: RETRIEVING TEMPLATE'

  TEMP_NAME     = ['THETA_S','THETA_V','DPHI','WS','RO','REFL_TOA']
  TEMP_TYPE     = [4,4,4,4,4,4]
  LUT_TEMPLATE = {VERSION        : 1.0                       , $
                   DATASTART      : 0 , $
                   DELIMITER      : ' ' , $
                   MISSINGVALUE   : !values.f_NaN, $
                   COMMENTSYMBOL  : ''          , $
                   FIELDCOUNT     : N_ELEMENTS(TEMP_NAME), $
                   FIELDTYPES     : TEMP_TYPE, $
                   FIELDNAMES     : TEMP_NAME, $
                   FIELDLOCATIONS : INDGEN(N_ELEMENTS(TEMP_NAME)), $
                   FIELDGROUPS    : [INDGEN(N_ELEMENTS(TEMP_NAME))]}
    
  RETURN, LUT_TEMPLATE
  
END


FUNCTION READ_SUNGLINT_LUT_FILE, LUT_FILENAME, SUNGLINT_LUT_STRUCT=SUNGLINT_LUT_STRUCT, VERBOSE=VERBOSE

	STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
	STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')

  ; TEST IF LUT FILE EXISTS
  LUT_FINFOS = FILE_INFO(LUT_FILENAME)
  IF LUT_FINFOS.EXISTS EQ 0 THEN BEGIN
    PRINT, 'READ_SUNGLINT_LUT_FILE: ERROR, LUT FILE ' + LUT_FILENAME + ' DOES NOT EXIST'
    RETURN, STATUS_ERROR
  ENDIF
  ; GET LUT ASCII TEMPLATE AND READ ASCII FILE
  LUT_TEMPLATE = GET_SUNGLINT_LUT_TEMPLATE(VERBOSE=VERBOSE)
  LUT_VALUES = READ_ASCII(LUT_FILENAME,TEMPLATE=LUT_TEMPLATE)
    
  SUNGLINT_LUT_STRUCT = { REFL_TOA: LUT_VALUES.REFL_TOA / LUT_VALUES.RO, $
                          THETA_S: LUT_VALUES.THETA_S, $
                          THETA_V: LUT_VALUES.THETA_V, $
                          DPHI:    LUT_VALUES.DPHI, $
                          WS:      LUT_VALUES.WS }

  IDX = WHERE( SUNGLINT_LUT_STRUCT.REFL_TOA EQ !VALUES.F_NAN , COUNT)
  IF COUNT NE 0 THEN SUNGLINT_LUT_STRUCT.REFL_TOA(IDX) = 0.2
                          
  RETURN, STATUS_OK 
  
END


FUNCTION GET_SUNGLINT_LUTS, SENSOR, SUNGLINT_LUT_FILE_STRUCT=SUNGLINT_LUT_FILE_STRUCT, VERBOSE=VERBOSE

  FCT_NAME = 'GET_SUNGLINT_LUTS'
  
	STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
	STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')

  SENSOR_CONFIG = GET_SENSOR_BAND_CONFIG(SENSOR) ; GET  CHANNELS / STD LABELS / LUT FILENAME / LUT FILENAME
  IF SIZE(SENSOR_CONFIG,/TYPE) NE 8 THEN BEGIN ; IF NOT A STRUCTURE
    PRINT, FCT_NAME + ': ERROR GET SENSOR BAND CONFIGURATION FOR SENSOR ', SENSOR
    RETURN, STATUS_ERROR
  ENDIF

  LUT_PATH = SENSOR_CONFIG.PATH_LUT
  LUT_FILENAME = SENSOR_CONFIG.SUNGLINT_LUT_FILE
  LUT_FILE_LABEL = SENSOR_CONFIG.BAND_LABEL_STD
  
  NB_LUT_FILE = N_ELEMENTS(LUT_FILENAME)
  IDX_VALID_LUT_FILE = WHERE( STRUPCASE(LUT_FILENAME) NE 'NONE', COUNT_VALID_LUT_FILE)
  
  LUT_FILE_EXIST = INTARR( N_ELEMENTS(LUT_FILENAME) ) 
  LUT_FILE_EXIST(IDX_VALID_LUT_FILE) = 1
     
  ; READING OF EACH LUT FILE
  FOR NUM=0, COUNT_VALID_LUT_FILE-1 DO BEGIN  
    
    STATUS = READ_SUNGLINT_LUT_FILE(LUT_PATH+LUT_FILENAME[IDX_VALID_LUT_FILE[NUM]], SUNGLINT_LUT_STRUCT=ONE_SUNGLINT_LUT_STRUCT)  
    IF STATUS NE STATUS_OK THEN BEGIN
      PRINT, FCT_NAME + ': ERROR DURING SUNGLINT LUT FILE READING >> RETURNING'
      RETURN, STATUS_ERROR
    ENDIF
    
    IF NUM EQ 0 THEN BEGIN
    
      NB_LINES = N_ELEMENTS(ONE_SUNGLINT_LUT_STRUCT.REFL_TOA)    
      
      SUNGLINT_LUT_ALL_STRUCT = { REFL_TOA: MAKE_ARRAY(NB_LINES, COUNT_VALID_LUT_FILE, /FLOAT), $
                                  THETA_S : ONE_SUNGLINT_LUT_STRUCT.THETA_S, $
                                  THETA_V : ONE_SUNGLINT_LUT_STRUCT.THETA_V, $
                                  DPHI    : ONE_SUNGLINT_LUT_STRUCT.DPHI, $
                                  WS      : ONE_SUNGLINT_LUT_STRUCT.WS }
                                  
    ENDIF ELSE BEGIN
    
        ; CHECK FOR IDENTICAL THETA_S / THETA_V / DPHI & WS VALUES IN EVERY LUT FILE
        CHECK_THETA_S = WHERE(SUNGLINT_LUT_ALL_STRUCT.THETA_S[*,0] EQ ONE_SUNGLINT_LUT_STRUCT.THETA_S, COUNT_EQ_TS)
        CHECK_THETA_V = WHERE(SUNGLINT_LUT_ALL_STRUCT.THETA_V[*,0] EQ ONE_SUNGLINT_LUT_STRUCT.THETA_V, COUNT_EQ_TV)
        CHECK_DPHI = WHERE(SUNGLINT_LUT_ALL_STRUCT.DPHI[*,0] EQ ONE_SUNGLINT_LUT_STRUCT.DPHI, COUNT_EQ_DPHI)
        CHECK_WS = WHERE(SUNGLINT_LUT_ALL_STRUCT.WS[*,0] EQ ONE_SUNGLINT_LUT_STRUCT.WS, COUNT_EQ_WS)
        
        IF (NB_LINES NE COUNT_EQ_TS) OR (NB_LINES NE COUNT_EQ_TV) OR (NB_LINES NE COUNT_EQ_DPHI) $
              OR (NB_LINES NE COUNT_EQ_WS) THEN BEGIN
          PRINT, FCT_NAME + ': ERROR LUT VALUES HAVE DIFFERENT DIMENSIONS, PLEASE CHECK YOUR LUT FILES IN FOLDER ' + LUT_PATH
          RETURN, STATUS_ERROR
        ENDIF

    ENDELSE
    
    SUNGLINT_LUT_ALL_STRUCT.REFL_TOA(*,NUM) = ONE_SUNGLINT_LUT_STRUCT.REFL_TOA

    NEXT_LUT:
    
  ENDFOR
  
  SUNGLINT_LUT_FILE_STRUCT = { IDX_VALID_LUT_FILE: IDX_VALID_LUT_FILE, LUT_FILE_LABEL: LUT_FILE_LABEL, SUNGLINT_LUT_STRUCT: SUNGLINT_LUT_ALL_STRUCT }

  RETURN, STATUS_OK
  
 END
 
 