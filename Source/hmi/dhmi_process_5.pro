;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      DHMI_PROCESS_5    
;* 
;* PURPOSE:
;*      THIS PROGRAM DISPLAYS A WIDGET ALLOWING SPECIFICATION OF THE REQUIRED PARAMETERS 
;*      TO PERFORM THE TOA SIMULATION USING Hyperspectral-BRDF METHODOLOGY 
;*
;*
;* CALLING SEQUENCE:
;*      DHMI_PROCESS_5
;*
;* INPUTS:
;*      NONE
;*
;* KEYWORDS:
;*      GROUP_LEADER - THE ID OF ANOTHER WIDGET TO BE USED AS THE GROUP LEADER
;*      VERBOSE      - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      NONE
;*
;* COMMON BLOCKS:
;*      DHMI_DATABASE - CONTAINS THE DATABASE DATA FOR THE DIMITRI HMI
;*
;* MODIFICATION HISTORY:
;*      15 JAN 2015 - B ALHAMMOUD - DIMITRI-3 V1.0
;*      21 JAN 2015 - B ALHAMMOUD    - UPDATED TO DIMITRI-3.1.1
;*      16 FEB 2015 - B ALHAMMOUD    - ADDED DIMITRI_VERSION AS VARIABLE
;*
;* VALIDATION HISTORY:
;*      15 JAN 2015 - B ALHAMMOUD - LINUX 64-BIT IDL 8.2 NOMINAL COMPILATION AND OPERATION       
;*
;**************************************************************************************
;**************************************************************************************

PRO DHMI_PROCESS_5_START,EVENT

 
COMMON DHMI_DATABASE 
 
 ;--------------------------
 ; RETRIEVE WIDGET INFORMATION
 
   WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=DHMI_P5_INFO, /NO_COPY

;---------------------------
; RETRIEVE ALL PARAMETERS

  IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESS_5->START: RETRIEVING PARAMETERS FROM WIDGET FIELDS' 
  DHMI_P5_INFO.FSCP5_REGION->GETPROPERTY, VALUE=P5_REGION
  DHMI_P5_INFO.FSCP5_SENSOR->GETPROPERTY,  VALUE=P5_SENSOR
  DHMI_P5_INFO.FSCP5_PROC->GETPROPERTY,  VALUE=P5_PROC
  DHMI_P5_INFO.FSCP5_YEAR->GETPROPERTY,  VALUE=P5_YEAR
  DHMI_P5_INFO.FSCP5_OFOLDER->GETPROPERTY,VALUE=P5_OFOLDER
  DHMI_P5_INFO.FSCP5_CPU_NB->GETPROPERTY,    VALUE=P5_CPU_NB
  DHMI_P5_INFO.FSCP5_PHOTON_NB->GETPROPERTY,    VALUE=P5_PHOTON_NB

;---------------------------
; CHECK USER VALUES

  IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESS_5->START: CHECKING USER PARAMETERS'
  ERR_CPU = 0
  ERR_PHOTON  = 0
  CPUMAX=!CPU.HW_NCPU     ; Retrive the number of core on the platform (for linux)

  
  IF (P5_PHOTON_NB LT 1) THEN ERR_PHOTON=1
  IF (P5_CPU_NB LT 1) THEN ERR_CPU=1
  IF (P5_CPU_NB GT CPUMAX) THEN ERR_CPU=1
  IF ERR_PHOTON OR ERR_CPU THEN BEGIN
    MSG = ['INPUT ERROR']
    IF ERR_PHOTON THEN MSG = [MSG, 'PHOTON_NB MUST BE > 0 ']
    IF ERR_CPU THEN MSG = [MSG, 'CPU_NB MUST BE WITHIN [1, '+strtrim(CPUMAX,1)+']']
    TEMP = DIALOG_MESSAGE(MSG,/INFORMATION,/CENTER)
    GOTO,P5_ERR
  ENDIF
;---------------------------
; SORT OUT OUTPUT FOLDER NAME
 
  IF P5_OFOLDER EQ 'AUTO' THEN BEGIN
  IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESS_5->START: CREATING OUTPUTFOLDER NAME'
    DATE        = SYSTIME(/UTC)
    MNTHS       = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC']
    RES         = WHERE(MNTHS EQ STRUPCASE(STRMID(DATE,4,3)))+1
    IF RES LE 9 THEN RES = '0'+STRTRIM(STRING(RES),2) ELSE RES = STRTRIM(STRING(RES),2)
    DD = FIX(STRMID(DATE,8,2)) LE 9 ?  '0'+STRMID(DATE,9,1):STRMID(DATE,8,2)
    DATE        = STRMID(DATE,20,4)+RES+DD
    P5_OFOLDER  = DHMI_P5_INFO.MAIN_OUTPUT+P5_REGION+'_'+DATE+'_DESERT_'+P5_SENSOR+'_'+P5_PROC
  ENDIF ELSE P5_OFOLDER = DHMI_P5_INFO.MAIN_OUTPUT+STRJOIN(STRSPLIT(P5_OFOLDER,' ',/EXTRACT),'_')

;---------------------------
; CHECK OUTPUT FOLDER 

  IF FILE_TEST(P5_OFOLDER,/DIRECTORY) EQ 1 THEN BEGIN
    MSG = ['OUTPUT FOLDER ALREADY EXISTS','OVERWRITE DATA?']
    MSG = DIALOG_MESSAGE(MSG,/QUESTION,/CENTER)
    IF STRCMP(STRUPCASE(MSG),'NO') EQ 1 THEN BEGIN
      P5_OFOLDER  = P5_OFOLDER+'_1'
      I = 2
      SCHECK = 0
      WHILE SCHECK EQ 0 DO BEGIN
        
        P5_OFOLDER = STRSPLIT(P5_OFOLDER,'_',/EXTRACT)
        P5_OFOLDER[N_ELEMENTS(P5_OFOLDER)-1] = STRTRIM(STRING(I),2)
        P5_OFOLDER = STRJOIN(P5_OFOLDER,'_')
        
        IF FILE_TEST(P5_OFOLDER,/DIRECTORY) EQ 0 THEN SCHECK = 1
        I++
      ENDWHILE
    ENDIF
  ENDIF

;--------------------------
; GET SCREEN DIMENSIONS FOR 
; CENTERING INFO WIDGET

  DIMS  = GET_SCREEN_SIZE()
  XSIZE = 200
  YSIZE = 60
  XLOC  = (DIMS[0]/2)-(XSIZE/2)
  YLOC  = (DIMS[1]/2)-(YSIZE/2)

  IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESS_5->START: CREATING AN INFO WIDGET'
  INFO_WD = WIDGET_BASE(COLUMN=1, XSIZE=XSIZE, YSIZE=YSIZE, TITLE='Please Wait...',XOFFSET=XLOC,YOFFSET=YLOC)
  LBLTXT  = WIDGET_LABEL(INFO_WD,VALUE=' ')
  LBLTXT  = WIDGET_LABEL(INFO_WD,VALUE='Please wait,')
  LBLTXT  = WIDGET_LABEL(INFO_WD,VALUE='Processing...')
  WIDGET_CONTROL, INFO_WD, /REALIZE
  WIDGET_CONTROL, /HOURGLASS

;--------------------------
; DESERT CALIBRATION (HsBRDF Methodology)

  IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESS_5->START: RUNNING DESERT CALIBRATION'  
  RES = SIMULATE_TOA_TIME_SERIES(P5_OFOLDER,P5_REGION,P5_SENSOR,P5_PROC,P5_YEAR,P5_PHOTON_NB,P5_CPU_NB, /consolidated)
;BAH  RES = SIMULATE_TOA_TIME_SERIES(P5_OFOLDER,P5_REGION,P5_SENSOR,P5_PROC)
  
  IF RES NE 1 THEN BEGIN
   MSG = ['DIMITRI PROCESS 5:','ERROR DURING DESERT CALIBRATION']
   TMP = DIALOG_MESSAGE(MSG,/INFORMATION,/CENTER)
   GOTO,P5_ERR
  ENDIF

;--------------------------
; DESTROY INFO WIDGET AND RETURN 
; TO PROCESS_5 WIDGET

  P5_ERR:
  IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESS_5->START: DESTROYING INFO WIDGET AND RETURNING'
  IF N_ELEMENTS(INFO_WD) GT 0 THEN WIDGET_CONTROL,INFO_WD,/DESTROY
  NO_SELECTION:
  WIDGET_CONTROL, EVENT.TOP, SET_UVALUE=DHMI_P5_INFO, /NO_COPY

END 

;**************************************************************************************
;**************************************************************************************

PRO DHMI_PROCESS_5_EXIT,EVENT

;--------------------------
; RETRIEVE WIDGET INFORMATION

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=DHMI_P5_INFO, /NO_COPY
  IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESS_5->EXIT: DESTROYING OBJECTS'

;--------------------------
; DESTROY OBJECTS

  OBJ_DESTROY,DHMI_P5_INFO.FSCP5_OFOLDER
  OBJ_DESTROY,DHMI_P5_INFO.FSCP5_REGION
  OBJ_DESTROY,DHMI_P5_INFO.FSCP5_SENSOR
  OBJ_DESTROY,DHMI_P5_INFO.FSCP5_PROC
  OBJ_DESTROY,DHMI_P5_INFO.FSCP5_YEAR
  OBJ_DESTROY,DHMI_P5_INFO.FSCP5_CPU_NB
  OBJ_DESTROY,DHMI_P5_INFO.FSCP5_PHOTON_NB

;--------------------------
; DESTROY THE WIDGET

  IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESS_5->EXIT: DESTROYING PROCESS 5 WIDGET'
  WIDGET_CONTROL,EVENT.TOP,/DESTROY

END 

;**************************************************************************************
;**************************************************************************************


PRO DHMI_PROCESS_5_SETUP_CHANGE,EVENT

COMMON DHMI_DATABASE
  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=DHMI_P5_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE=ACTION

;--------------------------
; GET THE ACTION TYPE

  ACTION_TYPE = STRMID(ACTION,0,1)

;--------------------------
; UPDATE SENSOR VALUE

  IF ACTION_TYPE EQ 'V' THEN BEGIN
    IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESS_5_SETUP->CHANGE: UPDATING THE SITE FIELD AND INDEX'
    CASE ACTION OF
      'VSITE<':DHMI_P5_INFO.ISITE = DHMI_P5_INFO.ISITE-1
      'VSITE>':DHMI_P5_INFO.ISITE = DHMI_P5_INFO.ISITE+1
    ENDCASE
    IF DHMI_P5_INFO.ISITE LT 0 THEN DHMI_P5_INFO.ISITE = DHMI_P5_INFO.NASITE-1
    IF DHMI_P5_INFO.ISITE EQ DHMI_P5_INFO.NASITE THEN DHMI_P5_INFO.ISITE = 0

    DHMI_P5_INFO.FSCP5_REGION->SETPROPERTY, VALUE=DHMI_P5_INFO.ASITE[DHMI_P5_INFO.ISITE]

;--------------------------
; GET AVAILABLE SENSORS WITHIN REGION

    IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESS_5_SETUP->CHANGE: UPDATING THE SENSOR FIELD AND INDEX'
    CSITE=DHMI_P5_INFO.ASITE[DHMI_P5_INFO.ISITE]

    TEMP = DHMI_DB_DATA.SENSOR[WHERE(STRMATCH(DHMI_DB_DATA.REGION,CSITE))]
    TEMP = TEMP[UNIQ(TEMP,SORT(TEMP))]
    DHMI_P5_INFO.ASENS[0:N_ELEMENTS(TEMP)-1] = TEMP
    DHMI_P5_INFO.NASENS = N_ELEMENTS(TEMP)
    DHMI_P5_INFO.ISENS  = 0
    DHMI_P5_INFO.FSCP5_SENSOR->SETPROPERTY, VALUE=DHMI_P5_INFO.ASENS[DHMI_P5_INFO.ISENS]

    GOTO,UPDATE_PROC

  ENDIF

;--------------------------
; UPDATE SENSOR VALUE

  IF ACTION_TYPE EQ 'S' THEN BEGIN
    IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESSOR_5_SETUP->CHANGE: UPDATING THE SENSOR FIELD AND INDEX'
    CASE ACTION OF
      'SENS<':DHMI_P5_INFO.ISENS = DHMI_P5_INFO.ISENS-1
      'SENS>':DHMI_P5_INFO.ISENS = DHMI_P5_INFO.ISENS+1
    ENDCASE
    IF DHMI_P5_INFO.ISENS LT 0 THEN DHMI_P5_INFO.ISENS = DHMI_P5_INFO.NASENS-1
    IF DHMI_P5_INFO.ISENS EQ DHMI_P5_INFO.NASENS THEN DHMI_P5_INFO.ISENS = 0

    DHMI_P5_INFO.FSCP5_SENSOR->SETPROPERTY, VALUE=DHMI_P5_INFO.ASENS[DHMI_P5_INFO.ISENS]

 ENDIF 

;--------------------------
; GET AVAILABLE PROC_VERS 
; FOR SITE AND SENSOR

    UPDATE_PROC:
    IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESSOR_5_SETUP->CHANGE: UPDATING THE PROCESSING VERSION FIELD AND INDEX'
    CSITE = DHMI_P5_INFO.ASITE[DHMI_P5_INFO.ISITE]
    CSENS = DHMI_P5_INFO.ASENS[DHMI_P5_INFO.ISENS]

    TEMP = DHMI_DB_DATA.PROCESSING_VERSION[WHERE($
                                                 STRMATCH(DHMI_DB_DATA.REGION,CSITE) AND $
                                                 STRMATCH(DHMI_DB_DATA.SENSOR,CSENS))]
    TEMP = TEMP[UNIQ(TEMP,SORT(TEMP))]
    DHMI_P5_INFO.APROC[0:N_ELEMENTS(TEMP)-1] = TEMP
    DHMI_P5_INFO.NAPROC = N_ELEMENTS(TEMP)
    DHMI_P5_INFO.IPROC  = 0
    DHMI_P5_INFO.FSCP5_PROC->SETPROPERTY, VALUE=DHMI_P5_INFO.APROC[DHMI_P5_INFO.IPROC]

;--------------------------
; UPDATE PROC VALUE

  IF ACTION_TYPE EQ 'P' THEN BEGIN
    IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESSOR_5_SETUP->CHANGE: UPDATING THE PROCESSING VERSION FIELD AND INDEX'
    CASE ACTION OF
      'PROC<':DHMI_P5_INFO.IPROC = DHMI_P5_INFO.IPROC-1
      'PROC>':DHMI_P5_INFO.IPROC = DHMI_P5_INFO.IPROC+1
    ENDCASE
    IF DHMI_P5_INFO.IPROC LT 0 THEN DHMI_P5_INFO.IPROC = DHMI_P5_INFO.NAPROC-1
    IF DHMI_P5_INFO.IPROC EQ DHMI_P5_INFO.NAPROC THEN DHMI_P5_INFO.IPROC = 0

    DHMI_P5_INFO.FSCP5_PROC->SETPROPERTY, VALUE=DHMI_P5_INFO.APROC[DHMI_P5_INFO.IPROC]

;--------------------------
; GET AVAILABLE YEARS FOR SITE,
; SENSOR AND PROC VERSION

    UPDATE_YEAR:
    IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESSOR_5_SETUP->CHANGE: UPDATING THE YEAR FIELD AND INDEX'
    CSITE = DHMI_P5_INFO.ASITE[DHMI_P5_INFO.ISITE]
    CSENS = DHMI_P5_INFO.ASENS[DHMI_P5_INFO.ISENS]
    CPROC = DHMI_P5_INFO.APROC[DHMI_P5_INFO.IPROC]

    TEMP = STRTRIM(STRING(DHMI_DB_DATA.YEAR[WHERE($
                                                  STRMATCH(DHMI_DB_DATA.REGION,CSITE)       AND $
                                                  STRMATCH(DHMI_DB_DATA.SENSOR,CSENS)       AND $
                                                  STRMATCH(DHMI_DB_DATA.PROCESSING_VERSION,CPROC))]),2)
    TEMP = TEMP[UNIQ(TEMP,SORT(TEMP))]
    DHMI_P5_INFO.AYEAR[0:N_ELEMENTS(TEMP)] = [TEMP,'ALL']
    DHMI_P5_INFO.NAYEAR = N_ELEMENTS(TEMP)+1
    DHMI_P5_INFO.IYEAR=0
    DHMI_P5_INFO.FSCP5_YEAR->SETPROPERTY, VALUE=DHMI_P5_INFO.AYEAR[DHMI_P5_INFO.IYEAR]

 ENDIF 

;--------------------------
; UPDATE YEAR VALUE

  IF ACTION_TYPE EQ 'Y' THEN BEGIN
    IF DHMI_P5_INFO.IVERBOSE EQ 1 THEN PRINT,'DHMI_PROCESSOR_5_SETUP->CHANGE: UPDATING THE YEAR FIELD AND INDEX'
    CASE ACTION OF
      'YEAR<':DHMI_P5_INFO.IYEAR = DHMI_P5_INFO.IYEAR-1
      'YEAR>':DHMI_P5_INFO.IYEAR = DHMI_P5_INFO.IYEAR+1
    ENDCASE
    IF DHMI_P5_INFO.IYEAR LT 0 THEN DHMI_P5_INFO.IYEAR = DHMI_P5_INFO.NAYEAR-1
    IF DHMI_P5_INFO.IYEAR EQ DHMI_P5_INFO.NAYEAR THEN DHMI_P5_INFO.IYEAR = 0

    DHMI_P5_INFO.FSCP5_YEAR->SETPROPERTY, VALUE=DHMI_P5_INFO.AYEAR[DHMI_P5_INFO.IYEAR]
 ENDIF 


;--------------------------
; RETRUN TO THE WIDGET

  WIDGET_CONTROL, EVENT.TOP, SET_UVALUE=DHMI_P5_INFO, /NO_COPY

END 

;**************************************************************************************
;**************************************************************************************

PRO DHMI_PROCESS_5,GROUP_LEADER=GROUP_LEADER,VERBOSE=VERBOSE

COMMON DHMI_DATABASE

;--------------------------
; FIND MAIN DIMITRI FOLDER AND DELIMITER

  IF KEYWORD_SET(VERBOSE) THEN BEGIN
    PRINT,'DHMI_PROCESS_5: STARTING PROCESS 5 HMI ROUTINE'
    IVERBOSE=1
  ENDIF ELSE IVERBOSE=0
  IF STRUPCASE(!VERSION.OS_FAMILY) EQ 'WINDOWS' THEN WIN_FLAG = 1 ELSE WIN_FLAG = 0
 
  DL          = GET_DIMITRI_LOCATION('DL')
  MAIN_OUTPUT = GET_DIMITRI_LOCATION('OUTPUT')

;--------------------------
; DEFINE BASE PARAMETERS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_PROCESS_5: DEFINING BASE PARAMETERS'
  CFIG_DATA = GET_DIMITRI_CONFIGURATION() 

  BASE_CPU     = FIX(CFIG_DATA.(1)[23])
  BASE_PHOTON  = FIX(CFIG_DATA.(1)[24])
  
  OPT_BTN   = 60
  SML_BTNX  = 30
  SML_BTNY  = 10 
  SML_DEC   = 2
  SML_FSC_X = 7

;--------------------------
; GET LIST OF ALL OUTPUT FOLDERS, 
; SITES, SENSORS AND PROCESSING VERSIONS

  ASITES = DHMI_DB_DATA.REGION[UNIQ(DHMI_DB_DATA.REGION,SORT(DHMI_DB_DATA.REGION))]
  USENSS = DHMI_DB_DATA.SENSOR[UNIQ(DHMI_DB_DATA.SENSOR,SORT(DHMI_DB_DATA.SENSOR))]
  UPROCV = DHMI_DB_DATA.PROCESSING_VERSION[UNIQ(DHMI_DB_DATA.PROCESSING_VERSION,$
                                       SORT(DHMI_DB_DATA.PROCESSING_VERSION))]
  UYEARS = DHMI_DB_DATA.YEAR[UNIQ(DHMI_DB_DATA.YEAR,SORT(DHMI_DB_DATA.YEAR))]

;--------------------------  
; SELECT FIRST SITE AND GET 
; AVAILABLE SENSORS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_PROCESS_5: RETRIEVING AVAILABLE SITES AND SENSORS'
  ASENS = MAKE_ARRAY(N_ELEMENTS(USENSS),/STRING,VALUE='')
  APROC = MAKE_ARRAY(N_ELEMENTS(UPROCV),/STRING,VALUE='')
  AYEAR = MAKE_ARRAY(N_ELEMENTS(UYEARS)+1,/STRING,VALUE='')

  NASITE = N_ELEMENTS(ASITES)
  CSITE  = ASITES[0]
  TEMP   = DHMI_DB_DATA.SENSOR[WHERE(DHMI_DB_DATA.REGION EQ CSITE)]
  TEMP   = TEMP[UNIQ(TEMP,SORT(TEMP))]
  ASENS[0:N_ELEMENTS(TEMP)-1] = TEMP
  NASENS = N_ELEMENTS(TEMP)
  CSENS  = ASENS[0]

;--------------------------  
; GET AVAILABLE PROCESSING VERSIONS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_PROCESS_5: RETRIEVING AVAILABLE PROCESSING VERSIONS'
  TEMP    = DHMI_DB_DATA.PROCESSING_VERSION[WHERE(DHMI_DB_DATA.REGION EQ CSITE AND $
                                                  DHMI_DB_DATA.SENSOR EQ CSENS)]
  TEMP    = TEMP[UNIQ(TEMP,SORT(TEMP))]
  APROC[0:N_ELEMENTS(TEMP)-1] = TEMP
  NAPROC  = N_ELEMENTS(TEMP)
  CPROC   = APROC[0]

;--------------------------  
; GET AVAILABLE YEARS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_PROCESS_5: RETRIEVING AVAILABLE YEARS'
  TEMP    = STRTRIM(STRING(DHMI_DB_DATA.YEAR[WHERE(DHMI_DB_DATA.REGION EQ CSITE AND $
                                              DHMI_DB_DATA.SENSOR EQ CSENS AND $
                                              DHMI_DB_DATA.PROCESSING_VERSION EQ CPROC)]),2)
  TEMP    = TEMP[UNIQ(TEMP,SORT(TEMP))]
  AYEAR[0:N_ELEMENTS(TEMP)] = [TEMP,'ALL']
  CYEAR   = AYEAR[0]
  NAYEAR  = N_ELEMENTS(TEMP)+1


;--------------------------
; DEFINE THE MAIN WIDGET 

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_PROCESS_5: RETRIEVING SCREEN DIMENSIONS FOR WIDGET'
  DIMS  = GET_SCREEN_SIZE()
  IF WIN_FLAG THEN XSIZE = 425 ELSE XSIZE = 490
  YSIZE = 800
  XLOC  = (DIMS[0]/2)-(XSIZE/2)
  YLOC  = (DIMS[1]/2)-(YSIZE/2)

  DIMITRI_VERSION = GET_DIMITRI_LOCATION('D_VERSION') ;BAH
  DHMI_P5_TLB = WIDGET_BASE(COLUMN=1,TITLE='DIMITRI V'+DIMITRI_VERSION+': DESERT CALIBRATION SETUP',XSIZE=XSIZE,$
                                  XOFFSET=XLOC,YOFFSET=YLOC)
;--------------------------
; DEFINE WIDGET TO HOLD OUTPUTFOLDER,
; REGION, SENSOR AND CONFIGURATION

  DHMI_P5_TLB_1 = WIDGET_BASE(DHMI_P5_TLB,ROW=6, FRAME=1)
  DHMI_P5_TLB_1_LBL = WIDGET_LABEL(DHMI_P5_TLB_1,VALUE='CASE STUDY:')
  DHMI_P5_TLB_1_LBL = WIDGET_LABEL(DHMI_P5_TLB_1,VALUE='')
  DHMI_P5_TLB_1_LBL = WIDGET_LABEL(DHMI_P5_TLB_1,VALUE='')

  IF WIN_FLAG THEN DHMI_P5_TLB_1_OFID = FSC_FIELD(DHMI_P5_TLB_1,VALUE='AUTO',TITLE='FOLDER    :',OBJECT=FSCP5_OFOLDER) $
              ELSE DHMI_P5_TLB_1_OFID = FSC_FIELD(DHMI_P5_TLB_1,VALUE='AUTO',TITLE='FOLDER    :',OBJECT=FSCP5_OFOLDER) 
  DHMI_BLK      = WIDGET_LABEL(DHMI_P5_TLB_1,VALUE='')
  DHMI_BLK      = WIDGET_LABEL(DHMI_P5_TLB_1,VALUE='')

  IF WIN_FLAG THEN DHMI_P5_TLB_1_RID = FSC_FIELD(DHMI_P5_TLB_1,VALUE=CSITE,TITLE  ='REGION    :',OBJECT=FSCP5_REGION) $
              ELSE DHMI_P5_TLB_1_RID = FSC_FIELD(DHMI_P5_TLB_1,VALUE=CSITE,TITLE  ='REGION    :',OBJECT=FSCP5_REGION)
  DHMI_BLK      = WIDGET_BUTTON(DHMI_P5_TLB_1,VALUE='<',UVALUE='VSITE<',EVENT_PRO='DHMI_PROCESS_5_SETUP_CHANGE')
  DHMI_BLK      = WIDGET_BUTTON(DHMI_P5_TLB_1,VALUE='>',UVALUE='VSITE>',EVENT_PRO='DHMI_PROCESS_5_SETUP_CHANGE')  
  
  IF WIN_FLAG THEN DHMI_P5_TLB_1_SID = FSC_FIELD(DHMI_P5_TLB_1,VALUE=CSENS,TITLE  ='SENSOR    :',OBJECT=FSCP5_SENSOR) $
              ELSE DHMI_P5_TLB_1_SID = FSC_FIELD(DHMI_P5_TLB_1,VALUE=CSENS,TITLE  ='SENSOR    :',OBJECT=FSCP5_SENSOR)
  DHMI_BLK      = WIDGET_BUTTON(DHMI_P5_TLB_1,VALUE='<',UVALUE='SENS<',EVENT_PRO='DHMI_PROCESS_5_SETUP_CHANGE')
  DHMI_BLK      = WIDGET_BUTTON(DHMI_P5_TLB_1,VALUE='>',UVALUE='SENS>',EVENT_PRO='DHMI_PROCESS_5_SETUP_CHANGE')  

  IF WIN_FLAG THEN DHMI_P5_TLB_1_PID = FSC_FIELD(DHMI_P5_TLB_1,VALUE=CPROC,TITLE  ='PROCESSING:',OBJECT=FSCP5_PROC) $
              ELSE DHMI_P5_TLB_1_PID = FSC_FIELD(DHMI_P5_TLB_1,VALUE=CPROC,TITLE  ='PROCESSING:',OBJECT=FSCP5_PROC)
  DHMI_BLK      = WIDGET_BUTTON(DHMI_P5_TLB_1,VALUE='<',UVALUE='PROC<',EVENT_PRO='DHMI_PROCESS_5_SETUP_CHANGE')
  DHMI_BLK      = WIDGET_BUTTON(DHMI_P5_TLB_1,VALUE='>',UVALUE='PROC>',EVENT_PRO='DHMI_PROCESS_5_SETUP_CHANGE')  

  IF WIN_FLAG THEN DHMI_P5_TLB_1_YID = FSC_FIELD(DHMI_P5_TLB_1,VALUE=CYEAR,TITLE  ='YEAR      :',OBJECT=FSCP5_YEAR) $
              ELSE DHMI_P5_TLB_1_YID = FSC_FIELD(DHMI_P5_TLB_1,VALUE=CYEAR,TITLE  ='YEAR      :',OBJECT=FSCP5_YEAR)
  DHMI_BLK      = WIDGET_BUTTON(DHMI_P5_TLB_1,VALUE='<',UVALUE='YEAR<',EVENT_PRO='DHMI_PROCESS_5_SETUP_CHANGE')
  DHMI_BLK      = WIDGET_BUTTON(DHMI_P5_TLB_1,VALUE='>',UVALUE='YEAR>',EVENT_PRO='DHMI_PROCESS_5_SETUP_CHANGE')  

       
;--------------------------
; DEFINE WIDGET TO HOLD  
; DESERT CAL PARAMETERS

  DHMI_P5_TLB_2       = WIDGET_BASE(DHMI_P5_TLB,COLUMN=1,FRAME=1)
  DHMI_P5_TLB_2_LBL   = WIDGET_LABEL(DHMI_P5_TLB_2,VALUE=' DESERT CALIBRATION PARAMETERS:', /ALIGN_LEFT)

  IF WIN_FLAG THEN DHMI_P5_TLB_2_CPUID = FSC_FIELD(DHMI_P5_TLB_2,VALUE=BASE_CPU,TITLE        ='DEFINE THE NUMBER OF PARALLEL JOBS/CPUS '+STRING([10B])+'(THE HIGHER THE CPU_NB THE FASTER THE RUN)                    : ',OBJECT=FSCP5_CPU_NB,DECIMAL=SML_DEC,XSIZE=SML_FSC_X) $  
              ELSE DHMI_P5_TLB_2_CPUID = FSC_FIELD(DHMI_P5_TLB_2,VALUE=BASE_CPU,TITLE        ='DEFINE THE NUMBER OF PARALLEL JOBS/CPUS '+STRING([10B])+'(THE HIGHER THE CPU_NB THE FASTER THE RUN)                    : ',OBJECT=FSCP5_CPU_NB,DECIMAL=SML_DEC,XSIZE=SML_FSC_X)
 
  IF WIN_FLAG THEN DHMI_P5_TLB_2_PHOTNID = FSC_FIELD(DHMI_P5_TLB_2,VALUE=BASE_PHOTON,TITLE   ='DEFINE THE NUMBER OF PHOTONS            '+STRING([10B])+'(THE HIGHER THE PHOTON_NB THE BETTER THE STATISTICAL RESULTS) : ',OBJECT=FSCP5_PHOTON_NB,DECIMAL=SML_DEC,XSIZE=SML_FSC_X) $  
              ELSE DHMI_P5_TLB_2_PHOTNID = FSC_FIELD(DHMI_P5_TLB_2,VALUE=BASE_PHOTON,TITLE   ='DEFINE THE NUMBER OF PHOTONS            '+STRING([10B])+'(THE HIGHER THE PHOTON_NB THE BETTER THE STATISTICAL RESULTS) : ',OBJECT=FSCP5_PHOTON_NB,DECIMAL=SML_DEC,XSIZE=SML_FSC_X)

 ;--------------------------
; DEFINE WIDGET TO HOLD START  
; AND EXIT BUTTONS
  
  DHMI_P5_TLB_3       = WIDGET_BASE(DHMI_P5_TLB,ROW=1,/ALIGN_RIGHT)
  DHMI_P5_TLB_3_BTN   = WIDGET_BUTTON(DHMI_P5_TLB_3,VALUE='Start',XSIZE=OPT_BTN,EVENT_PRO='DHMI_PROCESS_5_START')
  DHMI_P5_TLB_3_BTN   = WIDGET_BUTTON(DHMI_P5_TLB_3,VALUE='Exit',XSIZE=OPT_BTN, EVENT_PRO='DHMI_PROCESS_5_EXIT')

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_PROCESS_5: COMPLETED DEFINING WIDGET'
  IF NOT KEYWORD_SET(GROUP_LEADER) THEN GROUP_LEADER = DHMI_P5_TLB
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_PROCESS_5: STORING WIDGET INFO INTO STRUCTURE'
  DHMI_P5_INFO = {$
                  IVERBOSE              : IVERBOSE,$
                  GROUP_LEADER          : GROUP_LEADER,$
                  MAIN_OUTPUT           : MAIN_OUTPUT,$
                  FSCP5_OFOLDER         : FSCP5_OFOLDER,$
                  FSCP5_REGION          : FSCP5_REGION,$
                  ASITE                 : ASITES,$
                  NASITE                : NASITE,$
                  ISITE                 : 0,$
                  FSCP5_SENSOR          : FSCP5_SENSOR,$
                  ASENS                 : ASENS,$
                  NASENS                : NASENS,$
                  ISENS                 : 0,$
                  FSCP5_PROC            : FSCP5_PROC,$
                  APROC                 : APROC,$
                  NAPROC                : NAPROC,$
                  IPROC                 : 0,$
                  FSCP5_YEAR            : FSCP5_YEAR,$
                  AYEAR                 : AYEAR,$
                  NAYEAR                : NAYEAR,$
                  IYEAR                 : 0, $
                  FSCP5_CPU_NB         : FSCP5_CPU_NB, $
                  FSCP5_PHOTON_NB      : FSCP5_PHOTON_NB $
                  }
                  
;--------------------------
; REALISE THE WIDGET AND REGISTER WITH THE XMANAGER

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DHMI_PROCESS_5: REALISING THE WIDGET AND REGISTERING WITH THE XMANAGER'
  WIDGET_CONTROL,DHMI_P5_TLB,/REALIZE,SET_UVALUE=DHMI_P5_INFO,/NO_COPY,GROUP_LEADER=GROUP_LEADER
  XMANAGER,'DHMI_PROCESS_5',DHMI_P5_TLB

END
