;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      DHMI_SENSOR_TO_SIMULATION_REPORT    
;* 
;* PURPOSE:
;*      THIS PROGRAM MANAGE THE HMI (HUMAN/MAN INTERFACE) FOR THE STATISTICAL REPORT 
;*      PROCESS OF THE VICARIOUS SENSOR TO SIMULATION METHOD
;*
;* CALLING SEQUENCE:
;*      DHMI_SENSOR_TO_SIMULATION_REPORT      
;*
;* INPUTS:
;*      NONE
;*
;* KEYWORDS:
;*      GROUP_LEADER - THE ID OF ANOTHER WIDGET TO BE USED AS THE GROUP LEADER
;*      VERBOSE      - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      NONE
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      03 MAR 2015 - NCG / MAGELLIUM - CREATION
;*
;* VALIDATION HISTORY:
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION DHMI_SENSOR_TO_SIMULATION_REPORT_SEARCH_METHOD_LIST, METHOD, SITE, SENSOR, PROC
  
  CD, CURRENT=CDIR
  DL = GET_DIMITRI_LOCATION('DL')
  INPUT_FOLDER  = GET_DIMITRI_LOCATION('OUTPUT')  
  CD,INPUT_FOLDER

  SEARCH = FILE_SEARCH(METHOD+'*'+DL+'Site_'+SITE+DL+SENSOR+DL+'Proc_*'+PROC,/TEST_DIRECTORY, COUNT=NB_COUNT)

  SEP = DL
  LIST = STRMID(SEARCH[0],0,STRPOS(SEARCH[0], SEP, 0))
  FOR NUM=1, NB_COUNT-1 DO BEGIN
    ELT = STRMID(SEARCH[NUM],0,STRPOS(SEARCH[NUM], SEP, 0))
    IDX = WHERE(STRCMP(LIST, ELT) EQ 1,NB_MATCH)
    IF NB_MATCH EQ 0 THEN LIST = [ LIST, ELT ]
  ENDFOR
  
  CD, CDIR
  
  RETURN, LIST

END

FUNCTION DHMI_SENSOR_TO_SIMULATION_REPORT_SEARCH_PROC_LIST, METHOD, SITE, SENSOR
  
  CD, CURRENT=CDIR
  DL = GET_DIMITRI_LOCATION('DL')
  INPUT_FOLDER  = GET_DIMITRI_LOCATION('OUTPUT')  
  CD,INPUT_FOLDER
  
  SEARCH = FILE_SEARCH(METHOD+'*'+DL+'Site_'+SITE+DL+SENSOR+DL+'Proc_*',/TEST_DIRECTORY, COUNT=NB_COUNT)

  SEP = 'Proc_'
  LIST = (STRSPLIT(SEARCH[0], SEP, /REGEX, /EXTRACT))[1]
  FOR NUM=1, NB_COUNT-1 DO BEGIN
    ELT = (STRSPLIT(SEARCH[NUM], SEP, /REGEX, /EXTRACT))[1]
    IDX = WHERE(STRCMP(LIST, ELT) EQ 1,NB_MATCH)
    IF NB_MATCH EQ 0 THEN LIST = [ LIST, ELT ]
  ENDFOR

  CD, CDIR

  RETURN, LIST
  
END

FUNCTION DHMI_SENSOR_TO_SIMULATION_REPORT_SEARCH_SENSOR_LIST, METHOD, SITE
  
  CD, CURRENT=CDIR
  DL = GET_DIMITRI_LOCATION('DL')
  INPUT_FOLDER  = GET_DIMITRI_LOCATION('OUTPUT')  
  CD,INPUT_FOLDER

  SEARCH = FILE_SEARCH(METHOD+'*'+DL+'Site_'+SITE+DL+'*',/TEST_DIRECTORY, COUNT=NB_COUNT)
  
  SEP = DL
  LIST = STRMID(SEARCH[0],STRPOS(SEARCH[0], SEP, STRLEN(SEARCH[0])-1, /REVERSE_SEARCH)+1,STRLEN(SEARCH[0]))
  FOR NUM=1, NB_COUNT-1 DO BEGIN
    ELT = STRMID(SEARCH[NUM],STRPOS(SEARCH[NUM], SEP, STRLEN(SEARCH[NUM])-1, /REVERSE_SEARCH)+1,STRLEN(SEARCH[NUM]))
    IDX = WHERE(STRCMP(LIST, ELT) EQ 1,NB_MATCH)
    IF NB_MATCH EQ 0 THEN LIST = [ LIST, ELT ]
  ENDFOR
  
  CD, CDIR

  RETURN, LIST
  
END


PRO DHMI_SENSOR_TO_SIMULATION_REPORT_EXIT,EVENT

;--------------------------
; GET EVENT AND WIDGET INFO

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE=ACTION

;--------------------------
; CLEAN UP OBJECTS

  IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->EXIT: DESTROYING OBJECTS'
  OBJ_DESTROY,DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROCV
  OBJ_DESTROY,DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SNAME
  OBJ_DESTROY,DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VSITE
  OBJ_DESTROY,DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.YEARV
  
;--------------------------
; DESTROY THE WIDGET

  IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->EXIT: DESTROYING THE WIDGET'
  WIDGET_CONTROL,EVENT.TOP,/DESTROY

END

;**************************************************************************************
;**************************************************************************************

PRO DHMI_SENSOR_TO_SIMULATION_REPORT_PROCESS,EVENT

COMMON DHMI_DATABASE

;--------------------------
; GET EVENT AND WIDGET INFO

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE=ACTION

;--------------------------
; GET THE REQUIRED DATA VALUES

  IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->PROCESS: RETRIEVING THE REQUIRED VARIABLES FOR INGESTION'
  DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VSITE->GETPROPERTY,VALUE=INGEST_REGION
  DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SNAME->GETPROPERTY,VALUE=INGEST_SENSOR 
  DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROCV->GETPROPERTY,VALUE=INGEST_PROC_VER
  DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.YEARV->GETPROPERTY,VALUE=INGEST_YEAR
  ;DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.CLTAB->GETPROPERTY,VALUE=COLOUR_TABLE
  ;DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PLTX->GETPROPERTY,VALUE=PLOT_XSIZE
  ;DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PLTY->GETPROPERTY,VALUE=PLOT_YSIZE
  IF INGEST_YEAR NE 'ALL' THEN IYEAR = INGEST_YEAR ELSE ACTION='ALL'

;--------------------------
;CREATE NEW POP DISPLAY WIDGET

  IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->PROCESS: CREATING A POP DISPLAY'
  XSIZE = 200
  YSIZE = 60
  XLOC  = (DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.DIMS[0]/2)-(XSIZE/2)
  YLOC  = (DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.DIMS[1]/2)-(YSIZE/2)

  INFO_WD = WIDGET_BASE(COLUMN=1, XSIZE=XSIZE, YSIZE=YSIZE, TITLE='DESERT VIEW...',XOFFSET=XLOC,YOFFSET=YLOC)
  LBLTXT = WIDGET_LABEL(INFO_WD,VALUE=' ')
  LBLTXT = WIDGET_LABEL(INFO_WD,VALUE='Please wait while')
  LBLTXT = WIDGET_LABEL(INFO_WD,VALUE='files process in progress...')
  WIDGET_CONTROL, INFO_WD, /REALIZE
  WIDGET_CONTROL, /HOURGLASS

;--------------------------
; CALL INGEST INTERFACE

  IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->PROCESS: CALLING THE INGESTION INTERFACE ROUTINE'
  CASE ACTION OF
    'PROCESS':  RES = DIMITRI_INTERFACE_CALIB_REPORT(INGEST_REGION,INGEST_SENSOR,INGEST_PROC_VER,CALIB_INPUT,YEAR=IYEAR,VERBOSE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE)

    'ALL':      RES = DIMITRI_INTERFACE_CALIB_REPORT(INGEST_REGION,INGEST_SENSOR,INGEST_PROC_VER,CALIB_INPUT,/ALL,YEAR=IYEAR,VERBOSE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE)    
  ENDCASE

;--------------------------
; CLOSE DISPLAY WIDGET AND REPORT STATUS

  IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->PROCESS: DESTROYING THE POP DISPLAY'
  WIDGET_CONTROL,INFO_WD,/DESTROY
  WAIT,0.5

  IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->PROCESS: USE OUTPUT TO IDENTIFY CLOSING MESSAGE'
  CASE RES OF
    -1: MSG = ['One or more errors encountered','Please check database file and output plots']
     0: MSG = ['No Desert products found']
     1: MSG = ['Successful']
  ENDCASE
  TMP = DIALOG_MESSAGE(['Desert Results View : ','',MSG],/INFORMATION,/CENTER)


;--------------------------
; RETURN TO INGEST WIDGET 

  IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->PROCESS: RETURNING TO THE INGEST WIDGET'  
  WIDGET_CONTROL, EVENT.TOP, SET_UVALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO, /NO_COPY

END

;**************************************************************************************
;**************************************************************************************

PRO DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE,EVENT

;--------------------------
; GET EVENT AND WIDGET INFO

  WIDGET_CONTROL, EVENT.TOP,  GET_UVALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO, /NO_COPY
  WIDGET_CONTROL, EVENT.ID,   GET_UVALUE=ACTION

;--------------------------
; GET ACTION TYPE, M,P,N,S,Y

  IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->CHANGE: RETRIEVING ACTION TYPE'
  ACTION_TYPE = STRMID(ACTION,0,1)
  CASE ACTION_TYPE OF

;--------------------------
; UPDATE METHOD FIELD

  'M':  BEGIN
          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->CHANGE: METHOD ACTION TYPE, UPDATING FIELDS'
          CASE ACTION OF
            'METHOD<':DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX-1
            'METHOD>':DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX+1
          ENDCASE
     
          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX LT 0 THEN DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NMETHOD-1
          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX EQ DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NMETHOD THEN DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX = 0
   ;       DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHODV->SETPROPERTY, VALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX]
        END

;--------------------------
; UPDATE PROCESSING VERSION FIELD

  'P':  BEGIN
          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->CHANGE: PROC_VER ACTION TYPE, UPDATING FIELDS'
          CASE ACTION OF
            'PROC<':DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX-1
            'PROC>':DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX+1
          ENDCASE
     
          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX LT 0 THEN DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NPROC-1
          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX EQ DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NPROC THEN DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX = 0
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROCV->SETPROPERTY, VALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROC_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX]

          ; UPDATE METHOD
          SEARCH = DHMI_SENSOR_TO_SIMULATION_REPORT_SEARCH_METHOD_LIST(DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD, $
                                                          'Site_'+DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SITE_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX], $
                                                          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SENS_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX], $
                                                          'Proc_'+DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROC_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX] )
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NMETHOD = N_ELEMENTS(SEARCH)
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD_SEARCH[0:DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NMETHOD-1] = SEARCH
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX = 0
  ;        DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHODV->SETPROPERTY, VALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX]

        END
        
;--------------------------
; UPDATE SENSOR NAME FIELD

  'N':  BEGIN
          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->CHANGE: SENSOR ACTION TYPE, UPDATING FIELDS'
          CASE ACTION OF
            'NAME<':DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX-1
            'NAME>':DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX+1
          ENDCASE

          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX LT 0 THEN DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NSENS-1
          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX EQ DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NSENS THEN DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX = 0
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SNAME->SETPROPERTY, VALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SENS_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX]
          
          ; UPDATE PROC
          SEARCH = DHMI_SENSOR_TO_SIMULATION_REPORT_SEARCH_PROC_LIST(DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD, $
                                                          'Site_'+DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SITE_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX], $
                                                          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SENS_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX] )
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NPROC = N_ELEMENTS(SEARCH)
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROC_SEARCH[0:DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NPROC-1] = SEARCH
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX = 0
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROCV->SETPROPERTY, VALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROC_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX]

          ; UPDATE METHOD
          SEARCH = DHMI_SENSOR_TO_SIMULATION_REPORT_SEARCH_METHOD_LIST(DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD, $
                                                          'Site_'+DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SITE_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX], $
                                                          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SENS_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX], $
                                                          'Proc_'+DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROC_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX] )
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NMETHOD = N_ELEMENTS(SEARCH)
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD_SEARCH[0:DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NMETHOD-1] = SEARCH
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX = 0
   ;       DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHODV->SETPROPERTY, VALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX]
        END

;--------------------------
; UPDATE SITE FIELD

  'S':  BEGIN
          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->CHANGE: SITE ACTION TYPE, UPDATING FIELDS'
          CASE ACTION OF
            'SITE<':DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX-1
            'SITE>':DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX+1
          ENDCASE
          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX LT 0 THEN DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX = N_ELEMENTS(DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SITE_SEARCH)-1
          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX EQ N_ELEMENTS(DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SITE_SEARCH) THEN DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX = 0
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VSITE->SETPROPERTY, VALUE=STRMID(DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SITE_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX],5,STRLEN(DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SITE_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX])-5)

          ; UPDATE SENSOR
          SEARCH = DHMI_SENSOR_TO_SIMULATION_REPORT_SEARCH_SENSOR_LIST(DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD, $
                                                          'Site_'+DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SITE_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX] )
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NSENS = N_ELEMENTS(SEARCH)
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SENS_SEARCH[0:DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NSENS-1] = SEARCH
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX = 0
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SNAME->SETPROPERTY, VALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SENS_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX]

          ; UPDATE PROC
          SEARCH = DHMI_SENSOR_TO_SIMULATION_REPORT_SEARCH_PROC_LIST(DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD, $
                                                          'Site_'+DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SITE_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX], $
                                                          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SENS_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX] )
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NPROC = N_ELEMENTS(SEARCH)
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROC_SEARCH[0:DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NPROC-1] = SEARCH
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX = 0
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROCV->SETPROPERTY, VALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROC_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX]

          ; UPDATE METHOD
          SEARCH = DHMI_SENSOR_TO_SIMULATION_REPORT_SEARCH_METHOD_LIST(DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD, $
                                                          'Site_'+DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SITE_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.VIDX], $
                                                          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SENS_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.SIDX], $
                                                          'Proc_'+DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PROC_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.PIDX] )
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NMETHOD = N_ELEMENTS(SEARCH)
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD_SEARCH[0:DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NMETHOD-1] = SEARCH
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX = 0
    ;      DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHODV->SETPROPERTY, VALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.METHOD_SEARCH[DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.MIDX]
        END

;--------------------------
; UPDATE YEAR FIELD

  'Y':  BEGIN
          IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->CHANGE: YEAR ACTION TYPE, UPDATING FIELDS'
          IYEAR = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.YIDX
          CASE ACTION OF
            'YEAR<':IYEAR = IYEAR-1
            'YEAR>':IYEAR = IYEAR+1
          ENDCASE
          IF IYEAR LT 0 THEN IYEAR = DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NYEAR-1
          IF IYEAR GT DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.NYEAR-1 THEN IYEAR = 0
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.YEARV->SETPROPERTY, VALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.YEAR_SEARCH[IYEAR]
          DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.YIDX = IYEAR
        END

  ENDCASE

;--------------------------
; MAKE SURE WE'RE IN THE CORRECT 
; DIRECTORY AND RETURN TO WIDGET

  IF DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.IVERBOSE EQ 1 THEN PRINT, 'DHMI_SENSOR_TO_SIMULATION_REPORT->CHANGE: RESETTING CURRENT DIRECTORY AND RETURNING TO THE WIDGET'
  CD,DHMI_SENSOR_TO_SIMULATION_REPORT_INFO.CDIR
  WIDGET_CONTROL, EVENT.TOP, SET_UVALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO, /NO_COPY

END

;**************************************************************************************
;**************************************************************************************

PRO DHMI_SENSOR_TO_SIMULATION_REPORT,GROUP_LEADER=GROUP_LEADER,VERBOSE=VERBOSE, METHOD=METHOD

  FCT_NAME = 'DHMI_SENSOR_TO_SIMULATION_REPORT'
  
  IF KEYWORD_SET(VERBOSE) THEN BEGIN
    IVERBOSE=1
    PRINT,FCT_NAME + ': STARTING DESERT WIDGET ROUTINE'
  ENDIF ELSE IVERBOSE=0
  

  IF KEYWORD_SET(VERBOSE) THEN BEGIN
    IVERBOSE=1
    PRINT,FCT_NAME + ': STARTING INGEST WIDGET ROUTINE'
  ENDIF ELSE IVERBOSE=0
  
  IF STRUPCASE(!VERSION.OS_FAMILY) EQ 'WINDOWS' THEN WIN_FLAG = 1 ELSE WIN_FLAG = 0

;--------------------------
; FIND MAIN DIMITRI FOLDER AND DELIMITER

  CD, CURRENT=CDIR
  DL = GET_DIMITRI_LOCATION('DL')
  INPUT_FOLDER  = GET_DIMITRI_LOCATION('OUTPUT')
  
  CD,INPUT_FOLDER
  
;--------------------------
; CHECK IIF METHOD FOLDER EXIST
  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME + ': SEARCHING FOR METHOD FOLDERS'  
  METHOD_SEARCH = FILE_SEARCH(METHOD+'*',/TEST_DIRECTORY, COUNT=NB_METHOD_FOLDER)

  IF NB_METHOD_FOLDER  EQ 0 THEN BEGIN
    MSG = FCT_NAME + ': ERROR, NO METHOD FOUND IN INPUT FOLDER, PLEASE APPLY METHOD FIRST!'
    TMP = DIALOG_MESSAGE(MSG,/ERROR,/CENTER)
    RETURN
  ENDIF  

;--------------------------
; GET LIST OF ALL (UNIQ) SITE NAMES ACROSS METHOD FOLDERS (WITHOUT 'Site_' PREFIXE)

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME + ': SEARCHING FOR SITE FOLDERS'  
  SEARCH = FILE_SEARCH(METHOD+'*'+DL+'Site_*',/TEST_DIRECTORY, COUNT=NB_COUNT)
  
  SEP = '_'
  LIST = STRMID(SEARCH[0],STRPOS(SEARCH[0], SEP, STRLEN(SEARCH[0])-1, /REVERSE_SEARCH)+1,STRLEN(SEARCH[0]))
  FOR NUM=1, NB_COUNT-1 DO BEGIN
    ELT = STRMID(SEARCH[NUM],STRPOS(SEARCH[NUM], SEP, STRLEN(SEARCH[NUM])-1, /REVERSE_SEARCH)+1,STRLEN(SEARCH[NUM]))
    IDX = WHERE(STRCMP(LIST, ELT) EQ 1,NB_MATCH)
    IF NB_MATCH EQ 0 THEN LIST = [ LIST, ELT ]
  ENDFOR
  
  ; SET THE FIRST SITE FOUND AS DEFAULT
  SITE_SEARCH = LIST
  NSITE = N_ELEMENTS(SITE_SEARCH)
  FIRST_SITE = SITE_SEARCH[0]
  
;--------------------------
; RETURN TO ORIGNAL DIRECTORY
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME + ': RESETTING THE CURRENT DIRECTORY'
  CD, CDIR

;--------------------------
; GET AVAILABLE SENSORS IN FIRST SITE 

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME + ': SEARCHING FOR SENSORS WITHIN FIRST SITE' 
  
  SENS_SEARCH = DHMI_SENSOR_TO_SIMULATION_REPORT_SEARCH_SENSOR_LIST(METHOD, FIRST_SITE)
  NSENS = N_ELEMENTS(SENS_SEARCH)
  ; SET THE FIRST SENSOR FOUND AS DEFAULT
  FIRST_SENSOR = SENS_SEARCH[0]

;--------------------------
; GET AVAILABLE PROC VERSION IN FIRST SITE FOR FIRST SENSOR

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME + ': SEARCHING FOR PROCESSING VERSIONS WITHIN FIRST SENSOR'   

  PROC_SEARCH = DHMI_SENSOR_TO_SIMULATION_REPORT_SEARCH_PROC_LIST(METHOD, FIRST_SITE, FIRST_SENSOR)
  NPROC = N_ELEMENTS(PROC_SEARCH)
  ; SET THE FIRST PROC VERSION FOUND AS DEFAULT
  FIRST_PROC = PROC_SEARCH[0]
  
;--------------------------
; GET AVAILABLE METHOD NAMES IN FIRST SITE FOR FIRST SENSOR AND FIRST PROC VERSION

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME + ': SEARCHING FOR METHOD FOLDERS'  

  METHOD_SEARCH = DHMI_SENSOR_TO_SIMULATION_REPORT_SEARCH_METHOD_LIST(METHOD, FIRST_SITE, FIRST_SENSOR, FIRST_PROC)
  NMETHOD = N_ELEMENTS(METHOD_SEARCH)
  ; SET THE FIRST METHOD FOUND AS DEFAULT
  FIRST_METHOD = METHOD_SEARCH[0]


;--------------------------
; GET AVAILABLE YEARS
  CALDAT, SYSTIME(/UTC,/JULIAN),TMM,TDD,YEARCUR,THR,TMN,TSS
  YEAR_SEARCH = STRING(INDGEN(YEARCUR-2000)+2000,FORMAT='(I4)')
  YEAR_SEARCH = ['ALL',YEAR_SEARCH]
  NYEAR = N_ELEMENTS(YEAR_SEARCH)
  FIRST_YEAR = YEAR_SEARCH[0]

;;--------------------------
;; GET AVAILABLE AUX DATA
;IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME + ': SEARCHING FOR AUX DATA'
;  AUX_DATA_FILE  = GET_DIMITRI_LOCATION('AUX_DATA')
;  AUX_DATA_FULL  = STRING(READ_BINARY(AUX_DATA_FILE))
;  AUX_DATA_CHANNELS  = STRSPLIT(AUX_DATA_FULL,STRING(STRING(10B)+STRING(13B)),/EXTRACT)
;  AUX_DATA_CHANNELS_NB = N_ELEMENTS(AUX_DATA_CHANNELS)         ; DATA from CONFIGURATION FILE
;  
;  IF AUX_DATA_CHANNELS_NB EQ 0 THEN BEGIN
;    MSG=FCT_NAME + ': ERROR, NO AUXDAT FOUND IN FILE AUX_DATA !'
;    TMP = DIALOG_MESSAGE(MSG,/ERROR,/CENTER)
;    RETURN
;  ENDIF

;------------------------------------ 
; GET THE DISPLAY RESOLUTION FOR WIDGET POSITIONING

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME + ': RETRIEVING SCREEN DIMENSIONS FOR WIDGET' 
  DIMS  = GET_SCREEN_SIZE()
  XSIZE = 340
  YSIZE = 300
  XLOC  = (DIMS[0]/2)-(XSIZE/2)
  YLOC  = (DIMS[1]/2)-(YSIZE/2)
  CFIG_DATA = GET_DIMITRI_CONFIGURATION()

;--------------------------
; BUILD UP THE WIDGET

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME + ': DEFINING THE WIDGET BUTTONS AND FSC FIELDS'

  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB     = WIDGET_BASE(COLUMN=1,TITLE=GET_DIMITRI_LOCATION('TOOL')+': ' + METHOD + ' RESULT VIEW ',XSIZE=XSIZE,XOFFSET=XLOC,YOFFSET=YLOC)
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_FRM = WIDGET_BASE(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB, COLUMN=1,FRAME=1)
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR = WIDGET_BASE(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_FRM, ROW=6,/ALIGN_LEFT)

  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_LBL = WIDGET_LABEL(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='SELECTION PARAMETERS : ')
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_TMP   = WIDGET_LABEL(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='')
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_TMP   = WIDGET_LABEL(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='')

  IF WIN_FLAG THEN DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_VSID  = FSC_FIELD(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR, TITLE='SITE NAME                : ', LABEL_SIZE=300, VALUE=FIRST_SITE, OBJECT=VSITE,/NOEDIT) $
    ELSE DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_VSID  = FSC_FIELD(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR, TITLE='SITE NAME        : ', VALUE=FIRST_SITE, OBJECT=VSITE,/NOEDIT)
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='<',UVALUE= 'SITE<',EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE')
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='>',UVALUE= 'SITE>',EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE')  
  
  IF WIN_FLAG THEN DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_SNID  = FSC_FIELD(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR, TITLE='SENSOR NAME         : ', VALUE=FIRST_SENSOR, OBJECT=SNAME,/NOEDIT) $
    ELSE DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_SNID  = FSC_FIELD(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR, TITLE='SENSOR NAME      : ', VALUE=FIRST_SENSOR, OBJECT=SNAME,/NOEDIT)
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='<',UVALUE= 'NAME<',EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE')
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='>',UVALUE= 'NAME>',EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE')    

  IF WIN_FLAG THEN DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_PVID  = FSC_FIELD(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR, TITLE='PROC VERSION        : ', VALUE=FIRST_PROC, OBJECT=PROCV,/NOEDIT) $
    ELSE DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_PVID  = FSC_FIELD(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR, TITLE='PROC VERSION : ', VALUE=FIRST_PROC, OBJECT=PROCV,/NOEDIT)
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='<',UVALUE= 'PROC<',EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE')
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='>',UVALUE= 'PROC>',EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE')      

  IF WIN_FLAG THEN DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_YEAR  = FSC_FIELD(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR, TITLE='YEAR                         : ', VALUE=FIRST_YEAR, OBJECT=YEARV,/NOEDIT) $
    ELSE DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_YEAR  = FSC_FIELD(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR, TITLE='YEAR :         ', VALUE=FIRST_YEAR, OBJECT=YEARV,/NOEDIT)
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='<',UVALUE= 'YEAR<',EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE')
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='>',UVALUE= 'YEAR>',EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE')
  
  IF WIN_FLAG THEN DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_CALID  = WIDGET_DROPLIST(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR, TITLE='METHOD PROCESS : ', VALUE=METHOD_SEARCH, UVALUE=METHOD, EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE') $
    ELSE DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_CALID  = WIDGET_DROPLIST(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR, TITLE='METHOD PROCESS :         ', VALUE=METHOD_SEARCH, UVALUE=METHOD, EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE')
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='<',UVALUE= 'METHOD<',EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE')
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR_TMP   = WIDGET_BUTTON(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_PAR,VALUE='>',UVALUE= 'METHOD>',EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_CHANGE')
  
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_BTM = WIDGET_BASE(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB, ROW=1,/ALIGN_RIGHT)  
  
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_BTM_BTN   = WIDGET_BUTTON(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_BTM,VALUE='STAT VIEW',UVALUE='PROCESS',EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_PROCESS')
  DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_BTM_BTN   = WIDGET_BUTTON(DHMI_SENSOR_TO_SIMULATION_REPORT_TLB_BTM,VALUE='CLOSE',EVENT_PRO='DHMI_SENSOR_TO_SIMULATION_REPORT_EXIT')

;--------------------------
; STORE IMPORTANT INFORMATION IN A STRUCTURE
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME + ': STORING ALL INFORMATION FOR WIDGET'  
  DHMI_SENSOR_TO_SIMULATION_REPORT_INFO = {                                  $
                      DIMS          : DIMS              ,$
                      CDIR          : CDIR              ,$
                      INPUT_FOLDER  : INPUT_FOLDER      ,$
                      METHOD        : METHOD            ,$
                      DL            : DL                ,$
                      VSITE         : VSITE             ,$
                      SNAME         : SNAME             ,$
                      PROCV         : PROCV             ,$
                      YEARV         : YEARV             ,$
                    ;  METHODV       : METHODV           ,$
                      YIDX          : 0                 ,$
                      VIDX          : 0                 ,$
                      SIDX          : 0                 ,$
                      PIDX          : 0                 ,$
                      MIDX          : 0                 ,$
                      MAX_COLOUR    : 40                ,$
                      NSENS         : NSENS             ,$
                      NPROC         : NPROC             ,$
                      NYEAR         : NYEAR             ,$
                      NMETHOD       : NMETHOD           ,$
                      YEAR_SEARCH   : YEAR_SEARCH       ,$
                      SITE_SEARCH   : SITE_SEARCH       ,$
                      SENS_SEARCH   : SENS_SEARCH       ,$
                      PROC_SEARCH   : PROC_SEARCH       ,$
                      METHOD_SEARCH : METHOD_SEARCH     ,$
                      IVERBOSE      : IVERBOSE          $
                      }
;--------------------------
; REALISE THE WIDGET AND REGISTER 
; WITH THE X-MANAGER

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME + ': REALISING THE WIDGET AND REGISTERING WITH THE XMANAGER'  
  IF N_ELEMENTS(GROUP_LEADER) GT 0 THEN $  
    WIDGET_CONTROL, DHMI_SENSOR_TO_SIMULATION_REPORT_TLB, /REALIZE,GROUP_LEADER=GROUP_LEADER,SET_UVALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO, /NO_COPY  $
      ELSE WIDGET_CONTROL, DHMI_SENSOR_TO_SIMULATION_REPORT_TLB, /REALIZE,SET_UVALUE=DHMI_SENSOR_TO_SIMULATION_REPORT_INFO,/NO_COPY
  
  XMANAGER,'DHMI_SENSOR_TO_SIMULATION_REPORT', DHMI_SENSOR_TO_SIMULATION_REPORT_TLB
  
  
 
END 