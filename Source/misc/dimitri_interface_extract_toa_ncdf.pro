;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      DIMITRI_INTERFACE_EXTRACT_TOA_NCDF   
;* 
;* PURPOSE:
;*      THIS FUNCTION EITHER OUTPUTS A NEW NETCDF INTERNAL FILE, OR MERGES THE DATA 
;*      PROVIDED WITH THE EXISTING FILE
;*
;* CALLING SEQUENCE:
;*      RES = DIMITRI_INTERFACE_EXTRACT_TOA_NCDF(SENSOR_TOA_DATA,NCDF_FILENAME)
;* 
;* INPUTS:
;*      SENSOR_TOA_DATA - A STRUCTURE CONTAING THE REQUIRED OUTPUT INFORMATION (SEE GET_DIMITRI_EXTRACT_NCDF_DATA_STRUCTURE)
;*      NCDF_FILENAME   - THE FULLY QUALIFIED PATH OF THE OUTPUT FILENAME
;*
;* KEYWORDS:
;*      VERBOSE   - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS    - 0 IS NOMINAL, 1 SOME KIND OF ERROR ENCOUNTERED
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      23 AUG 2011 - C KENT   - DIMITRI-2 V1.0
;*      30 AUG 2011 - C KENT   - ADDED MANUAL CLOUD SCREENING OUTPUT TO NETCDF
;*
;* VALIDATION HISTORY:
;*      
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION DIMITRI_INTERFACE_EXTRACT_TOA_NCDF,SENSOR_TOA_DATA,NCDF_FILENAME,VERBOSE=VERBOSE

;-----------------------------------
; DEFINE NEW VARIABLES INCLUDING DATE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_INTERFACE_EXTRACT_TOA_NCDF: STARTING NETCDF INTERFACE'
  TB_STR = '_TEMP_BACKUP'
  CALDAT, SYSTIME(/UTC,/JULIAN),TMM,TDD,TYY,THR,TMN,TSS

  TYY = STRTRIM(STRING(TYY),2)
  TMM = TMM LT 10 ? '0'+STRTRIM(STRING(TMM),2) : STRTRIM(STRING(TMM),2)
  TDD = TDD LT 10 ? '0'+STRTRIM(STRING(TDD),2) : STRTRIM(STRING(TDD),2)
  THR = THR LT 10 ? '0'+STRTRIM(STRING(THR),2) : STRTRIM(STRING(THR),2)
  TMN = TMN LT 10 ? '0'+STRTRIM(STRING(TMN),2) : STRTRIM(STRING(TMN),2)
  TSS = TSS LT 10 ? '0'+STRTRIM(STRING(TSS,FORMAT='(I)'),2) : STRTRIM(STRING(TSS,FORMAT='(I)'),2)

  CDATE = TYY+TMM+TDD+' '+THR+':'+TMN+':'+TSS
  MDATE = CDATE

;-----------------------------------
; READ THE CURRENT NETCDF PRODUCT

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_INTERFACE_EXTRACT_TOA_NCDF: READING THE CURRENT NETCDF PRODUCT'
  NCDF_DATA = READ_DIMITRI_EXTRACT_TOA_NCDF(NCDF_FILENAME,VERBOSE=VERBOSE)

;-----------------------------------
; GET LISTS OF ALL TAG NAMES

  IDATA_TAG   = TAG_NAMES(SENSOR_TOA_DATA)
  NDATA_TAG   = TAG_NAMES(NCDF_DATA)
  TEMP_STRUCT = {TT:0} 

;-----------------------------------
; LOOP OVER EACH VARIABLE AND MERGE IF PREVIOUS FILE EXISTS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_INTERFACE_EXTRACT_TOA_NCDF: LOOPING OVER EACH VARIABLE, AND MERGING IF NEEDED'
  FOR IDIE=0,N_ELEMENTS(IDATA_TAG)-1 DO BEGIN
    IF NCDF_DATA.ERROR EQ 0 THEN BEGIN
      IDIMS = SIZE(SENSOR_TOA_DATA.(IDIE))
      IDX = WHERE(NDATA_TAG EQ IDATA_TAG[IDIE],COUNT)
      IF COUNT EQ 0 OR IDIMS[0] EQ 0 THEN GOTO,NO_MATCH
      NDIMS = SIZE(NCDF_DATA.(IDX[0]))
      ITYPE = IDIMS[ IDIMS[0]+1 ]
      ; TEST IF VARIABLE TYPE IS STRING TYPE (STRING IS CODED AS BYTE IN NCDF FILES)
      IF ITYPE EQ 7 THEN BEGIN
        NDATA = STRING(NCDF_DATA.(IDX[0])) 
        NDIMS = SIZE(NDATA)
      ENDIF ELSE NDATA = NCDF_DATA.(IDX[0])
      IDATA = SENSOR_TOA_DATA.(IDIE)
      IF IDIMS[0] NE NDIMS[0] THEN BEGIN
        CASE NDIMS[0] OF
          2: IDATA = REFORM(IDATA, IDIMS[1], 1, /OVERWRITE)
          3: IDATA = REFORM(IDATA, IDIMS[1], IDIMS[2], 1, /OVERWRITE)
          ELSE: BEGIN
                PRINT, 'DIMITRI_INTERFACE_EXTRACT_TOA_NCDF: TAG ',IDATA_TAG[IDIE], ' ISSUE ON REFORM ACTION...'
                PRINT, '--- IDATA:'
                help, IDATA
                PRINT, '--- NDATA:'
                help, NDATA
                END
        ENDCASE
      ENDIF
      IF NDIMS[0] EQ 1 THEN TEMP_STRUCT = CREATE_STRUCT(TEMP_STRUCT,IDATA_TAG[IDIE],[ IDATA, NDATA ]) $
                       ELSE TEMP_STRUCT = CREATE_STRUCT(TEMP_STRUCT,IDATA_TAG[IDIE],[ [IDATA], [NDATA] ]) 
    ENDIF ELSE BEGIN
      NO_MATCH:
      TEMP_STRUCT = CREATE_STRUCT(TEMP_STRUCT,IDATA_TAG[IDIE],SENSOR_TOA_DATA.(IDIE))
    ENDELSE
  ENDFOR

;-----------------------------------
; UPDATE MODIFICATION DATE AND CREATION DATE IF REQUIRED

  TEMP_STRUCT.ATT_MTIME = MDATE
  IF NCDF_DATA.ERROR EQ 0 THEN TEMP_STRUCT.ATT_CTIME = STRING(NCDF_DATA.ATT_CTIME) ELSE TEMP_STRUCT.ATT_CTIME = CDATE

;-----------------------------------
; COPY OLD FILE TO A TEMP LOCATION & 
; DELETE THE OLD FILE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_INTERFACE_EXTRACT_TOA_NCDF: REMOVING PREVIOUS COPY IF PRESENT AND CREATING TEMP BACKUP'
  IF NCDF_DATA.ERROR EQ 0 THEN BEGIN
    FILE_COPY,NCDF_FILENAME,NCDF_FILENAME+TB_STR
    FILE_DELETE,NCDF_FILENAME
  ENDIF

;-----------------------------------
; SEND THE DATA STRUCTURE TO THE WRITE ROUTINE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_INTERFACE_EXTRACT_TOA_NCDF: SENDING DATA TO OUTPUT ROUTINE'
  WRITE_DIMITRI_EXTRACT_TOA_NCDF,TEMP_STRUCT,NCDF_FILENAME,VERBOSE=VERBOSE

;-----------------------------------
; CHECK NEW FILE HAS BE GENERATED OK

  IF FILE_TEST(NCDF_FILENAME) THEN ERROR = 0 ELSE ERROR = 1

;-----------------------------------
; DELETE THE TEMP BACKUP

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_INTERFACE_EXTRACT_TOA_NCDF: REMOVING TEMP BACKUP (IF NOMINAL) AND RETURNING'
  IF ERROR EQ 0 AND NCDF_DATA.ERROR EQ 0 THEN FILE_DELETE,NCDF_FILENAME+TB_STR
  RETURN,ERROR

END