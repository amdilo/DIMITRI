;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      GET_MODIS_BRDF
;*
;* PURPOSE:
;*      RETURNS THE BRDF VALUES FROM MODIS
;*
;* CALLING SEQUENCE:
;*      GET_MODIS_BRDF
;*
;* INPUTS:
;*      THETA_S = THETA S VALUE
;*      THETA_V = THETA V VALUE
;*      DPHI = DPHI VALUE
;*      BRDF_P1 = BRDF COEFFICIENT 1
;*      BRDF_P2 = BRDF COEFFICIENT 2
;*      BRDF_P3 = BRDF COEFFICIENT 3
;*
;* KEYWORDS:

;*      VERBOSE  - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;       BRDF_VALUE  - BRDF VALUE
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      18 JUN 2014 - PML / MAGELLIUM - CREATION
;*      23 FEB 2015 - NCG / MAGELLIUM - ADD GET_MODIS_BRDF_INFOS FUCNTION (DIMITRI V4)
;*
;* VALIDATION HISTORY:
;*      18 JUN 2014 - PML / MAGELLIUM   - WINDOWS 64-BIT MACHINE IDL 8.2.3 : COMPILATION AND CALLING SUCCESSFUL
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION EVAL_BRDF, THETA_S, THETA_V, PHI, BRDF_P1, BRDF_P2, BRDF_P3, VERBOSE=VERBOSE

THETAS=THETA_S*!DTOR
THETAV=THETA_V*!DTOR
DPHI=PHI*!DTOR

DPHI=ABS(DPHI);
CTS=COS(THETAS);
CTV=COS(THETAV);
STS=SIN(THETAS);
STV=SIN(THETAV);
CFI=COS(DPHI);
SFI=SIN(DPHI);
CPHA=CTS*CTV+STS*STV*CFI;
RPHA=ACOS(CPHA);

ROSSELT=(!PI/2-RPHA)*CPHA+SIN(RPHA);
ROSSTHICK=(ROSSELT/(CTS+CTV))-!PI/4.;

TANTI=TAN(THETAS);
TANTV=TAN(THETAV);

ANGDIST=TANTI*TANTI+TANTV*TANTV-2.*TANTI*TANTV*CFI;
ANGDIST=SQRT(ANGDIST);

ANGTEMP=1./CTS+1./CTV;
COST=2.*SQRT(ANGDIST*ANGDIST+TANTI*TANTI*TANTV*TANTV*SFI*SFI);
COST=COST/ANGTEMP;

INDX_SAT_UP=WHERE(COST GE 1., COUNT_SAT_UP)
INDX_SAT_LOW=WHERE(COST LE -1., COUNT_SAT_LOW)

IF COUNT_SAT_UP GT 0 THEN COST(INDX_SAT_UP)=1.
IF COUNT_SAT_LOW GT 0 THEN COST(INDX_SAT_LOW)=-1.

TVAR=ACOS(COST);
SINT=SQRT(1.-COST*COST);
ANGOVER=(TVAR-SINT*COST)*ANGTEMP/!PI;
LISPARS=ANGOVER-ANGTEMP+0.5*(1.+CPHA)/CTS/CTV;

BRDF_VALUE = BRDF_P1+BRDF_P2*ROSSTHICK+BRDF_P3*LISPARS;

RETURN, BRDF_VALUE

END

FUNCTION GET_MODIS_BRDF_INFOS, VERBOSE=VERBOSE

;    MODIS_BRDF_STRUCT = CREATE_STRUCT( 'BAND' , [646, 857, 466, 554, 1242, 1629, 2114], $
    MODIS_BRDF_STRUCT = CREATE_STRUCT( 'BAND' , [645.5, 856.5, 465.6, 553.6, 1241.6, 1629.1, 2114.1], $
                                       'BAND_ID_PRODUCT_L1B' , [21,22,16,17,18,19,20], $
                                       'BAND_ID_PRODUCT_BRDF', [3, 4, 1, 2, 5, 6, 7] )

  RETURN, MODIS_BRDF_STRUCT
END

FUNCTION GET_MODIS_BRDF, ACQUI_DATE, UNIQ_SITE, LAT, LON, THETA_S, THETA_V, DPHI, VERBOSE=VERBOSE

		DEBUG_MODE = 0			; SET TO 1 IF WANT TO DEBUG THIS PROCEDURE
		
    ; READ BRDF VALUES FROM NETCDF FILES CORRESPONDING TO SITE
    DL = GET_DIMITRI_LOCATION('DL',VERBOSE=VERBOSE)
    DESERT_BRDF_COEFFS_PATH = GET_DIMITRI_LOCATION('DESERT_BRDF_COEFFS',VERBOSE=VERBOSE) + 'Site_' + UNIQ_SITE + DL

    ; Interpolate coefficients values based on acquisition date
    ; 
    ; Interpolate coefficients based on lat/lon values
    REF_2008_01_01=JULDAY(01,01,2008) ;
    DAYS=INDGEN(365/8+1)*8  ; ONE PRODUCT EVERY 8 DAYS => 46 PRODUCTS PER YEAR => 46 DAYS TABLE
    
    DATES_2008 = JULDAY(01,01,2008) + DAYS
    DATES_2009 = JULDAY(01,01,2009) + DAYS
    DATES_2010 = JULDAY(01,01,2010) + DAYS
    DATES_2011 = JULDAY(01,01,2011) + DAYS
    DATES_2012 = JULDAY(01,01,2012) + DAYS
    PRODDATE = FLOAT([ DATES_2008, DATES_2009, DATES_2010, DATES_2011, DATES_2012 ])
    
    NB_DATES = N_ELEMENTS(PRODDATE)
    
    IDX_DATE = WHERE( ACQUI_DATE GE PRODDATE, COUNT )
    IF COUNT EQ 0 THEN BEGIN 
      IDX_DATE_START = 0
      IDX_DATE_END = 0
    ENDIF ELSE BEGIN
      IDX_DATE_START = IDX_DATE[COUNT -1]
      IDX_DATE_END = MIN( [ IDX_DATE_START+1, NB_DATES-1 ] )
    ENDELSE
    IF COUNT EQ NB_DATES THEN BEGIN
      IDX_DATE_START = NB_DATES-1
      IDX_DATE_END = NB_DATES-1
    ENDIF
    IDX_DIFF_DATE = IDX_DATE_END - IDX_DATE_START
    
    IF IDX_DIFF_DATE NE 0 THEN COEFF_INTERP_LINEAR_DATE = FLOAT( ACQUI_DATE / PRODDATE(IDX_DATE_START) ) $
                                                            / FLOAT( PRODDATE(IDX_DATE_END) - PRODDATE(IDX_DATE_START) )
       
    MODIS_BRDF_STRUCT = GET_MODIS_BRDF_INFOS(VERBOSE=VERBOSE)
      
    NB_BANDS_MODIS_BRDF = SIZE(MODIS_BRDF_STRUCT.BAND_ID_PRODUCT_L1B, /N_ELEMENTS)
    
    NB_PIX = N_ELEMENTS(THETA_S)
    BRDF_VALUES = FLTARR(NB_PIX,NB_BANDS_MODIS_BRDF)
    
    ; LOAD THE 7 BRDF FILES IN L1B PRODUCT BAND ORDER
    FOR INDX_MODIS_BRDF=0, NB_BANDS_MODIS_BRDF-1 DO BEGIN

      CUR_BAND_PRODUCT_BRDF = MODIS_BRDF_STRUCT.BAND_ID_PRODUCT_BRDF(INDX_MODIS_BRDF)

      BRDF_COEFFS_FILENAME = DESERT_BRDF_COEFFS_PATH + UNIQ_SITE + '_MODIS_BRDF_Kf_BS' + STRTRIM(STRING(CUR_BAND_PRODUCT_BRDF),1) + '.nc'
      DESERT_BRDF_COEFFS=NETCDFREAD_BRDF_COEFFS(BRDF_COEFFS_FILENAME)

      IF IDX_DIFF_DATE NE 0 THEN BEGIN
        
        NB_PTS = N_ELEMENTS(DESERT_BRDF_COEFFS.K1(*,IDX_DATE_START))
        K1_ACQUIDATE = FLTARR(NB_PTS)
        K2_ACQUIDATE = FLTARR(NB_PTS)
        K3_ACQUIDATE = FLTARR(NB_PTS)       
        FOR PTS=0, NB_PTS-1 DO BEGIN
        
            K1_ACQUIDATE(PTS) = INTERP1D(PRODDATE, DESERT_BRDF_COEFFS.K1(PTS,*), FLOAT(ACQUI_DATE))
            K2_ACQUIDATE(PTS) = INTERP1D(PRODDATE, DESERT_BRDF_COEFFS.K2(PTS,*)*100, FLOAT(ACQUI_DATE))/100
            K3_ACQUIDATE(PTS) = INTERP1D(PRODDATE, DESERT_BRDF_COEFFS.K3(PTS,*)*100, FLOAT(ACQUI_DATE))/100
    
        ENDFOR

				IF DEBUG_MODE THEN BEGIN
					TXT_FILENAME = DESERT_BRDF_COEFFS_PATH + '/IDL_output_brdf' 
					OPENW,outunit,TXT_FILENAME + '_K1_'+STRTRIM(STRING(INDX_MODIS_BRDF),2)+'_origStartDate.txt',/GET_LUN
					CALDAT, PRODDATE(IDX_DATE_START), Month1, Day1, Year1
					PRINTF, outunit, IDX_DATE_START, PRODDATE(IDX_DATE_START), Month1, Day1, Year1
					PRINTF, outunit, DESERT_BRDF_COEFFS.K1(*,IDX_DATE_START)
					FREE_LUN, outunit

					TXT_FILENAME = DESERT_BRDF_COEFFS_PATH + '/IDL_output_brdf' 
					OPENW,outunit,TXT_FILENAME + '_K1_'+STRTRIM(STRING(INDX_MODIS_BRDF),2)+'_interp1D.txt',/GET_LUN
					CALDAT, PRODDATE(IDX_DATE_START), Month1, Day1, Year1
					PRINTF, outunit, IDX_DATE_START, PRODDATE(IDX_DATE_START), Month1, Day1, Year1
					PRINTF, outunit, IDX_DATE_END, PRODDATE(IDX_DATE_END)
					PRINTF, outunit, K1_ACQUIDATE
					FREE_LUN, outunit

					OPENW,outunit,TXT_FILENAME + '_K2_'+STRTRIM(STRING(INDX_MODIS_BRDF),2)+'_interp1D.txt',/GET_LUN
					PRINTF, outunit, K2_ACQUIDATE
					FREE_LUN, outunit

					OPENW,outunit,TXT_FILENAME + '_K3_'+STRTRIM(STRING(INDX_MODIS_BRDF),2)+'_interp1D.txt',/GET_LUN
					PRINTF, outunit, K3_ACQUIDATE
					FREE_LUN, outunit
			  ENDIF

      ENDIF ELSE BEGIN
      
        K1_ACQUIDATE = DESERT_BRDF_COEFFS.K1(*,IDX_DATE_START)
        K2_ACQUIDATE = DESERT_BRDF_COEFFS.K2(*,IDX_DATE_START)
        K3_ACQUIDATE = DESERT_BRDF_COEFFS.K3(*,IDX_DATE_START)
      
      ENDELSE
      
      ; TODO : PERFORM INTERPOLATION BW. DATE_START AND DATE_END : TO BE DONE / CURRENTLY ONLY INDEXING ON PERIOD DATE_START
;      SIZE_COEFFS=SIZE(DESERT_BRDF_COEFFS.K1)
;      NB_DATE=SIZE_COEFFS(2)
;      IF IDX_DATE_START GT NB_DATE THEN BEGIN
;         IDX_DATE_START = NB_DATE-1
;      ENDIF
;      K1_NCDF = DESERT_BRDF_COEFFS.K1(*,IDX_DATE_START)
;      K2_NCDF = DESERT_BRDF_COEFFS.K2(*,IDX_DATE_START)
;      K3_NCDF = DESERT_BRDF_COEFFS.K3(*,IDX_DATE_START)
                        
      
      LON_NCDF = DESERT_BRDF_COEFFS.LONGITUDE
      LAT_NCDF = DESERT_BRDF_COEFFS.LATITUDE
      
      TRIANGULATE, LON_NCDF, LAT_NCDF, TRIANGLES_SIMPLE
      K1 = GRIDDATA(LON_NCDF, LAT_NCDF, K1_ACQUIDATE, METHOD = 'NATURALNEIGHBOR', XOUT = LON, YOUT = LAT, TRIANGLES=TRIANGLES_SIMPLE, MISSING = !VALUES.F_NAN)
      K2 = GRIDDATA(LON_NCDF, LAT_NCDF, K2_ACQUIDATE, METHOD = 'NATURALNEIGHBOR', XOUT = LON, YOUT = LAT, TRIANGLES=TRIANGLES_SIMPLE, MISSING = !VALUES.F_NAN)
      K3 = GRIDDATA(LON_NCDF, LAT_NCDF, K3_ACQUIDATE, METHOD = 'NATURALNEIGHBOR', XOUT = LON, YOUT = LAT, TRIANGLES=TRIANGLES_SIMPLE, MISSING = !VALUES.F_NAN)

			IF DEBUG_MODE THEN BEGIN
				TXT_FILENAME = DESERT_BRDF_COEFFS_PATH + '/IDL_output_brdf' 
				OPENW,outunit,TXT_FILENAME + '_K1_'+STRTRIM(STRING(INDX_MODIS_BRDF),2)+'_griddataTRsimple.txt',/GET_LUN
				PRINTF, outunit, K1
				FREE_LUN, outunit

				OPENW,outunit,TXT_FILENAME + '_K2_'+STRTRIM(STRING(INDX_MODIS_BRDF),2)+'_griddataTRsimple.txt',/GET_LUN
				PRINTF, outunit, K2
				FREE_LUN, outunit

				OPENW,outunit,TXT_FILENAME + '_K3_'+STRTRIM(STRING(INDX_MODIS_BRDF),2)+'_griddataTRsimple.txt',/GET_LUN
				PRINTF, outunit, K3
				FREE_LUN, outunit
			ENDIF
			
      QHULL, LON_NCDF, LAT_NCDF, TRIANGLES_K, /DELAUNAY
      K1 = GRIDDATA(LON_NCDF, LAT_NCDF, K1_ACQUIDATE, METHOD = 'NATURALNEIGHBOR', XOUT = LON, YOUT = LAT, TRIANGLES=TRIANGLES_K, MISSING = !VALUES.F_NAN)
      K2 = GRIDDATA(LON_NCDF, LAT_NCDF, K2_ACQUIDATE, METHOD = 'NATURALNEIGHBOR', XOUT = LON, YOUT = LAT, TRIANGLES=TRIANGLES_K, MISSING = !VALUES.F_NAN)
      K3 = GRIDDATA(LON_NCDF, LAT_NCDF, K3_ACQUIDATE, METHOD = 'NATURALNEIGHBOR', XOUT = LON, YOUT = LAT, TRIANGLES=TRIANGLES_K, MISSING = !VALUES.F_NAN)
    
			IF DEBUG_MODE THEN BEGIN
				TXT_FILENAME = DESERT_BRDF_COEFFS_PATH + '/IDL_output_brdf' 
				OPENW,outunit,TXT_FILENAME + '_K1_'+STRTRIM(STRING(INDX_MODIS_BRDF),2)+'_griddata.txt',/GET_LUN
				CALDAT, PRODDATE(IDX_DATE_START), Month1, Day1, Year1
				PRINTF, outunit, IDX_DATE_START, PRODDATE(IDX_DATE_START), Month1, Day1, Year1
				PRINTF, outunit, IDX_DATE_END, PRODDATE(IDX_DATE_END)
				PRINTF, outunit, K1
				FREE_LUN, outunit

				OPENW,outunit,TXT_FILENAME + '_K2_'+STRTRIM(STRING(INDX_MODIS_BRDF),2)+'_griddata.txt',/GET_LUN
				PRINTF, outunit, K2
				FREE_LUN, outunit

				OPENW,outunit,TXT_FILENAME + '_K3_'+STRTRIM(STRING(INDX_MODIS_BRDF),2)+'_griddata.txt',/GET_LUN
				PRINTF, outunit, K3
				FREE_LUN, outunit
		 	ENDIF

      BRDF_VALUES(*,INDX_MODIS_BRDF) = EVAL_BRDF(THETA_S, THETA_V, DPHI, K1, K2, K3, VERBOSE=VERBOSE)

    ENDFOR
     
    BRDF_STRUCT = CREATE_STRUCT( 'BAND' , MODIS_BRDF_STRUCT.BAND, $
                                 'BAND_ID_PRODUCT_L1B' , MODIS_BRDF_STRUCT.BAND_ID_PRODUCT_L1B, $
                                 'BAND_ID_PRODUCT_BRDF',  MODIS_BRDF_STRUCT.BAND_ID_PRODUCT_BRDF, $
                                 'BRDF_REF_VALUES', BRDF_VALUES ) 

    RETURN, BRDF_STRUCT

END
