;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      ROUJEAN_BRDF       
;* 
;* PURPOSE:
;*      COMPUTES THE ROUJEAN BRDF FOR A GIVEN REFERENCE SENSOR AND ANY RECALIBRATED SENSORS
;* 
;* CALLING SEQUENCE:
;*      RES = ROUJEAN_BRDF(OFOLDER,RB_REGION,REF_SENSOR,REF_PROC_VER,BRDF_BIN)     
;* 
;* INPUTS:
;*      OFOLDER       - A STRING OF THE BASE OUTPUT FOLDER
;*      RB_REGION     - A STRING OF THE VALIDATION SITE FOR BRDF COMPUTATION
;*      REF_SENSOR    - A STRING OF THE REFERENCE SENSOR FOR BRDF COMPUTATION
;*      REF_PROC_VER  - A STRING OF THE REFERENCE SENSORS PROCESSING VERSION
;*      BRDF_BIN      - AN INTEGER OF THE BINNING PERIOD REQUIRED (E.G. 5 = 5 DAY BINS)
;*
;* KEYWORDS:    
;*      NO_PLOTS      - SET TO STOP THE ROUTINE GENERTAIN BRDF PLOTS FOR EACH BAND AND EACH BIN
;*      VERBOSE       - PROCESSING STATUS OUTPUTS
;* 
;* OUTPUTS:
;*      STATUS        - 1 = NOMINAL, (-1) OR 0 = ERROR
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      22 MAR 2007 - M BOUVET  - PROTOTYPE DIMITRI VERSION
;*      24 JAN 2011 - C KENT    - DIMITRI-2 V1.0
;*      25 JAN 2011 - C KENT    - MOVED BRDF PLOTS TO A NEW FUNCTION, 
;*                                ADDED CSV FILE OUTPUT AND NO_PLOTS OPTION
;*      15 APR 2011 - C KENT    - MINOR BUG FIXES
;*      27 APR 2011 - C KENT    - REMOVED SUPER SENSOR CONCATENTATION TO RECALBRAITON ROUTINE, 
;*                                MODIFIED LAYOUT AND ADDED UNCERTAINTY ANALYSIS
;*      04 JUL 2011 - C KENT    - UPDATED SAV'S TO ACCOUNT FOR AUXILIARY INFO
;*      19 SEP 2011 - C KENT    - ADDED CENTRE WAVELENGTH INFORMATION TO CSV
;*      27 SEP 2011 - C KENT    - UPDATED BRDF BIN ANGLE STORAGE
;*      17 FEB 2014 - C MAZERAN - UPDATED FORMAT OUTPUTS TO CORRECTLY WORKS WHEN BRDF_BIN=1 + BAND EXCEPTION FOR MODISA
;*
;* VALIDATION HISTORY:
;*      15 APR 2011 - C KENT    - WINDOWS 32-BIT IDL 7.1 AND LINUX 64-BIT IDL 8.0 NOMINAL
;*                                COMPILATION AND OPERATION. TESTED ON MERIS 2ND REPROCESSING 
;*                                WITH MERIS 3RD REPROCESSING AND MODISA COLLECTION 5 
;*      17 FEB 2014 - C MAZERAN - LINUX 64-BIT IDL 8.2 NOMINAL COMPILATION AND OPERATION
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION ROUJEAN_BRDF,OFOLDER,RB_REGION,REF_SENSOR,REF_PROC_VER,BRDF_BIN,NO_PLOTS=NO_PLOTS,$
  VERBOSE=VERBOSE,START_TIME=START_TIME,STOP_TIME=STOP_TIME,NB_ACQUI_LIMIT=NB_ACQUI_LIMIT

  IF KEYWORD_SET(VERBOSE) THEN PRINT,"ROUJEAN BRDF: STARTING BRDF BINNING AND COMPUTATION"
;-----------------------------------------
; CHECK OFOLDER EXISTS 
  
  RES = FILE_INFO(OFOLDER)
  IF RES.EXISTS EQ 0 THEN BEGIN
    PRINT,"ROUJEAN BRDF: OUTPUT FOLDER DOESN'T EXIST"
    RETURN,-1
  ENDIF
  
;--------------------------------  
; DEFINE I/O FILES

  IF KEYWORD_SET(VERBOSE) THEN PRINT,"ROUJEAN BRDF: DEFINING I/O FILES"
  DL        = GET_DIMITRI_LOCATION('DL')
  RC_FOLDER = STRING(OFOLDER+DL+'RECALIBRATION'+DL)
  RB_FOLDER = STRING(OFOLDER+DL+'ROUJEAN_BRDF' +DL)
  PT_FOLDER = STRING(RB_FOLDER +'BRDF_PLOTS' +DL)
  SSEN_DATA = STRING(RC_FOLDER +'SSEN_'      +RB_REGION+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'_')
  K1_FILE   = STRING(RB_FOLDER +'ROUJEAN_K1_'+RB_REGION+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'.dat')
  K2_FILE   = STRING(RB_FOLDER +'ROUJEAN_K2_'+RB_REGION+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'.dat')
  K3_FILE   = STRING(RB_FOLDER +'ROUJEAN_K3_'+RB_REGION+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'.dat')
  KERR_FILE = STRING(RB_FOLDER +'ROUJEAN_ER_'+RB_REGION+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'.dat')
  CSV_FILE  = STRING(OFOLDER+DL+'ROUJEAN_'   +RB_REGION+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'.csv')
  BRDF_LOG  = STRING(RB_FOLDER +'BRDF_LOG_'  +RB_REGION+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'.txt')
  UCERT_FILE= STRING(RB_FOLDER +'ROUJEAN_UC_'+RB_REGION+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'.dat')

;-------------------------------
; CODE TO CHECK FV FOLDERS...

;  print,'************************';
;  print,'FOLDER LOCATIONS
;  print,'RECAL     :',RC_FOLDER
;  print,'ROUJEAN   :',RB_FOLDER
;  print,'PLOTS     :',PT_FOLDER
;  print,'************************'

;--------------------------------
; CREATE ROUJEAN FOLDER IF IT DOESN'T EXIST

  RES = FILE_INFO(RB_FOLDER)
  IF RES.EXISTS NE 1 OR RES.DIRECTORY NE 1 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT,"ROUJEAN BRDF: ROUJEAN FOLDER DOESN'T EXIST, CREATING"
    FILE_MKDIR,RB_FOLDER 
  ENDIF

  RES = FILE_INFO(PT_FOLDER)
  IF RES.EXISTS NE 1 OR RES.DIRECTORY NE 1 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT,"ROUJEAN BRDF: PLOT FOLDER DOESN'T EXIST, CREATING"
    FILE_MKDIR,PT_FOLDER 
  ENDIF

  OPENW,OUT_LOG,BRDF_LOG,/GET_LUN
  PRINTF,OUT_LOG,'VALIDATION SITE               = ',RB_REGION  
  PRINTF,OUT_LOG,'REFERENCE SENSOR              = ',REF_SENSOR
  PRINTF,OUT_LOG,'REFERENCE PROCESSING VERSION  = ',REF_PROC_VER
  PRINTF,OUT_LOG,'BINNING PERIOD                = ',STRTRIM(STRING(BRDF_BIN),2),' DAYS'

;--------------------------------
; GET NUMBER OF BANDS IN REF SENSOR

  NB_BANDS = SENSOR_BAND_INFO(REF_SENSOR)
  NB_BANDS = NB_BANDS[0]
  IF NOT KEYWORD_SET(NB_ACQUI_LIMIT) THEN NB_ACQUI_LIMIT = 3

;-----------------------------------------
; MODISA SURFACE DEPENDANCE EXCEPTION

  SITE_TYPE = GET_SITE_TYPE(RB_REGION,VERBOSE=VERBOSE)
  IF REF_SENSOR EQ 'MODISA' THEN BEGIN
    IF STRUPCASE(SITE_TYPE) EQ 'OCEAN' THEN TEMP_SENSOR = REF_SENSOR+'_O' ELSE TEMP_SENSOR = REF_SENSOR+'_L'
  ENDIF ELSE TEMP_SENSOR = REF_SENSOR

;--------------------------------
; GET EARLIEST AND LATEST DATES AVAILABLE, 
; COMPUTE NUMBER OF DAYS DIVIDED BY BIN_PERIOD

  IF KEYWORD_SET(VERBOSE) THEN PRINT,"ROUJEAN BRDF: DEFINING BIN CHARACTERISTICS"
  
  IF NOT KEYWORD_SET(START_TIME) OR NOT KEYWORD_SET(STOP_TIME) THEN BEGIN
    RB_START = 2002.0
    TEMP = SYSTIME()
    RB_END = FLOAT(STRMID(TEMP,20,4))+1.0
  ENDIF ELSE BEGIN
    RB_START = START_TIME
    RB_END = STOP_TIME  
  ENDELSE
    
  NB_DAYS  = ABS(RB_END-RB_START)/(1.0/365.0)
  NB_ACQUI = CEIL(float(NB_DAYS)/float(BRDF_BIN))
  
  PRINTF,OUT_LOG,'START BIN DATE                = ',STRTRIM(STRING(RB_START),2)
  PRINTF,OUT_LOG,'END BIN DATE                  = ',STRTRIM(STRING(RB_END)  ,2)
  PRINTF,OUT_LOG,'NUMBER OF DAYS                = ',STRTRIM(STRING(NB_DAYS) ,2)
  PRINTF,OUT_LOG,'NUMBER OF BINS                = ',STRTRIM(STRING(NB_ACQUI),2)
  FREE_LUN,OUT_LOG
  
;--------------------------------
; CREATE K ARRAYS TO HOLD BRDF COEFICIENTS

  NUM_NON_REFS = 5+12 ;TIME, ANGLES (4) AND AUX INFO (12)
  NUM_NON_BRDF = 2 ;TIME, NUM ACQUISITIONS
  NUM_NON_UCRT = 9 ;TIME,NUM_ACQUISITIONS,VZA MIN,VZA MAX,SZA MIN,SZAMAX,RAA MIN,RAA MAX,POLY_ERR_FLAG
  K1_ROUJEAN  = MAKE_ARRAY(NUM_NON_BRDF+NB_BANDS,NB_ACQUI,/FLOAT,VALUE=-999.0)
  K2_ROUJEAN  = MAKE_ARRAY(NUM_NON_BRDF+NB_BANDS,NB_ACQUI,/FLOAT,VALUE=-999.0)
  K3_ROUJEAN  = MAKE_ARRAY(NUM_NON_BRDF+NB_BANDS,NB_ACQUI,/FLOAT,VALUE=-999.0)
  ERR_ROUJEAN = MAKE_ARRAY(NUM_NON_BRDF+NB_BANDS,NB_ACQUI,/FLOAT,VALUE=-999.0)
  NMATCHES    = MAKE_ARRAY(/INTEGER,NB_ACQUI,VALUE=0)
  NSENSORS    = MAKE_ARRAY(/INTEGER,NB_ACQUI,VALUE=0)
  BRDF_UCERT  = MAKE_ARRAY(NUM_NON_UCRT+2*NB_BANDS,NB_ACQUI,/FLOAT,VALUE=-999.0)
  
;-------------------------------
; LOOP OVER EACH REF SENSOR BAND AND RESTORE DATA
    
  FOR RB_BAND=0,NB_BANDS-1 DO BEGIN
    
    BAND_STR  = CONVERT_INDEX_TO_WAVELENGTH(RB_BAND,TEMP_SENSOR)
    BAND_FILE = SSEN_DATA+STRTRIM(BAND_STR)+'.DAT'
    
    IF FILE_TEST(BAND_FILE) EQ 0 THEN BEGIN
      IF KEYWORD_SET(VERBOSE) THEN PRINT,'ROUJEAN BRDF: ERROR, SUPER SENSOR BAND NOT FOUND'
      GOTO,NEXT_RB_BAND
    ENDIF

    RESTORE,BAND_FILE
    
;--------------------------------  
; LOOP OVER EACH BINNING PERIOD

    IF KEYWORD_SET(VERBOSE) THEN PRINT,"ROUJEAN BRDF: STARTING LOOP OVER EACH BINNING PERIOD"  
    cc=0
    FOR RB_BIN =0,NB_ACQUI-1 DO BEGIN

      BIN_START = RB_START +(RB_BIN*(BRDF_BIN/365.0))
      BIN_END   = BIN_START+(BRDF_BIN/365.0)
      
      
      BIN_LOC = WHERE(SS_DATA[0,*] GE BIN_START AND SS_DATA[0,*] LT BIN_END,COUNT)
      IF BIN_LOC[0] EQ -1 OR COUNT LT NB_ACQUI_LIMIT THEN GOTO,NEXT_BIN ELSE NMATCHES[RB_BIN]=COUNT

;--------------------------------   
; STORE ACQUISITION DATE OF BIN
    
      TEMP                   = DOUBLE(MEAN([BIN_START,BIN_END]))
      K1_ROUJEAN[0,RB_BIN]   = TEMP
      K2_ROUJEAN[0,RB_BIN]   = TEMP
      K3_ROUJEAN[0,RB_BIN]   = TEMP
      ERR_ROUJEAN[0,RB_BIN]  = TEMP
      BRDF_UCERT[0,RB_BIN]   = TEMP
      
;-------------------------------
; SORT OUT RAA ANGLES

      BRDF_RAA  = ABS(SS_DATA[4,*]-SS_DATA[2,*])
      RES = WHERE(BRDF_RAA GT 180.0,COUNT)
      IF COUNT GT 0 THEN BRDF_RAA[RES] = 360.0 - BRDF_RAA[RES]

;--------------------------------  
; COMPUTE BRDF COEFICIENTS  

      IF KEYWORD_SET(VERBOSE) THEN PRINT,"ROUJEAN BRDF: COMPUTING ROUJEAN COEFICIENTS"   
      K = ROUJEAN_BRDF_COEF(SS_DATA[3,BIN_LOC],SS_DATA[1,BIN_LOC],BRDF_RAA[BIN_LOC],SS_DATA[NUM_NON_REFS,BIN_LOC],$
                            /DEGREES,VERBOSE=VERBOSE)

      K1_ROUJEAN[NUM_NON_BRDF+RB_BAND,RB_BIN] = K[0]
      K2_ROUJEAN[NUM_NON_BRDF+RB_BAND,RB_BIN] = K[1]
      K3_ROUJEAN[NUM_NON_BRDF+RB_BAND,RB_BIN] = K[2]
 
;--------------------------------  
; COMPUTE STDEV OF INVERSION  

      IF KEYWORD_SET(VERBOSE) THEN PRINT,"ROUJEAN BRDF: COMPUTING ROUJEAN RHO VALUES FOR BIN"  
      TEMP_RHO    = ROUJEAN_BRDF_COMPUTE_RHO(SS_DATA[3,BIN_LOC],SS_DATA[1,BIN_LOC],BRDF_RAA[BIN_LOC],K,/DEGREES,VERBOSE=VERBOSE)
      RHO_ROUJEAN = MEAN(TEMP_RHO)
      ERR_ROUJEAN[NUM_NON_BRDF+RB_BAND,RB_BIN] = STDDEV((RHO_ROUJEAN-SS_DATA[NUM_NON_REFS,BIN_LOC])/SS_DATA[NUM_NON_REFS,BIN_LOC])*100.
 
      TEMP_DIFF = SS_DATA[NUM_NON_REFS,BIN_LOC]-TEMP_RHO
      RMSE = SQRT(TOTAL(TEMP_DIFF^2)/N_ELEMENTS(TEMP_DIFF))
      BRDF_UCERT_R = 3.*RMSE
      BRDF_UCERT_S = RMSE/SQRT(N_ELEMENTS(TEMP_DIFF))
 
 ;------------------------------
 ; UPDATE UNCERTAINTY VARIABLES
 
      IF CC EQ 0 THEN BEGIN
        BRDF_UCERT[1,RB_BIN] =  NMATCHES[RB_BIN]
        BRDF_UCERT[2,RB_BIN] =  MIN(SS_DATA[1,BIN_LOC])
        BRDF_UCERT[3,RB_BIN] =  MAX(SS_DATA[1,BIN_LOC])
        BRDF_UCERT[4,RB_BIN] =  MIN(SS_DATA[3,BIN_LOC])
        BRDF_UCERT[5,RB_BIN] =  MAX(SS_DATA[3,BIN_LOC])
        BRDF_UCERT[6,RB_BIN] =  MIN(BRDF_RAA[BIN_LOC])
        BRDF_UCERT[7,RB_BIN] =  MAX(BRDF_RAA[BIN_LOC])
      ENDIF ELSE BEGIN
        IF NMATCHES[RB_BIN] GT BRDF_UCERT[1,RB_BIN] THEN BRDF_UCERT[1,RB_BIN] = NMATCHES[RB_BIN]
        IF MIN(SS_DATA[1,BIN_LOC]) LT BRDF_UCERT[2,RB_BIN] THEN BRDF_UCERT[2,RB_BIN] = MIN(SS_DATA[1,BIN_LOC])
        IF MAX(SS_DATA[1,BIN_LOC]) GT BRDF_UCERT[3,RB_BIN] THEN BRDF_UCERT[3,RB_BIN] = MAX(SS_DATA[1,BIN_LOC])
        IF MIN(SS_DATA[3,BIN_LOC]) LT BRDF_UCERT[4,RB_BIN] THEN BRDF_UCERT[4,RB_BIN] = MIN(SS_DATA[3,BIN_LOC])
        IF MAX(SS_DATA[3,BIN_LOC]) GT BRDF_UCERT[5,RB_BIN] THEN BRDF_UCERT[5,RB_BIN] = MAX(SS_DATA[3,BIN_LOC])
        IF MIN(BRDF_RAA[BIN_LOC]) LT BRDF_UCERT[6,RB_BIN] THEN BRDF_UCERT[6,RB_BIN] =  MIN(BRDF_RAA[BIN_LOC])
        IF MAX(BRDF_RAA[BIN_LOC]) GT BRDF_UCERT[7,RB_BIN] THEN BRDF_UCERT[7,RB_BIN] =  MAX(BRDF_RAA[BIN_LOC])
      ENDELSE
 
;------------------------------
; COMBINE BRDF SYSTEMATIC UNCERTAINTY WITH SUPER SENSOR VALUE  
   
      TEMP_SYS = TOTAL(SS_DATA[NUM_NON_REFS+1,BIN_LOC]^2)+BRDF_UCERT_S^2
      BRDF_UCERT[NUM_NON_UCRT+RB_BAND,RB_BIN] = SQRT(TEMP_SYS/(NMATCHES[RB_BIN]+1.))

;------------------------------
; COMBINE BRDF RANDOM UNCERTAINTY WITH SUPER SENSOR VALUE

      TEMP_SYS = TOTAL(SS_DATA[NUM_NON_REFS+2,BIN_LOC]^2)+BRDF_UCERT_R^2
      BRDF_UCERT[NUM_NON_UCRT+NB_BANDS+RB_BAND,RB_BIN] = SQRT(TEMP_SYS/(NMATCHES[RB_BIN]+1.))
      
      BRDF_UCERT[8,RB_BIN] = MAX(SS_DATA[1,BIN_LOC]); IS RAISED IF ANY OF THE SUPER SENSOR OBSERVATIONS HAVE RAISED FLAG
      
      NEXT_BIN:
    ENDFOR ;LOOP ON EACH BINNING PERIOD
  CC++
  NEXT_RB_BAND:
  ENDFOR ;LOOP OVER EACH BAND

;--------------------------------
; FILTER OUT GOOD DATA
  IF KEYWORD_SET(VERBOSE) THEN PRINT,"ROUJEAN BRDF: STORING ONLY THE VALID DATA"    
  RES = WHERE(K1_ROUJEAN[0,*] GT 0.0)
  IF RES[0] GT -1 THEN BEGIN
    K1_ROUJEAN  = K1_ROUJEAN[*,RES]
    K2_ROUJEAN  = K2_ROUJEAN[*,RES]
    K3_ROUJEAN  = K3_ROUJEAN[*,RES]
    ERR_ROUJEAN = ERR_ROUJEAN[*,RES]
    NMATCHES    = NMATCHES[RES]
    BRDF_UCERT  = BRDF_UCERT[*,RES]
  ENDIF ELSE BEGIN
    PRINT, "ROUJEAN BRDF: ERROR, NO GOOD DATA FOUND"  
    RETURN,-1
  ENDELSE

;--------------------------------
; ADD NUMBER OF MATCHES 

   K1_ROUJEAN[1,*] =  NMATCHES
   K2_ROUJEAN[1,*] =  NMATCHES
   K3_ROUJEAN[1,*] =  NMATCHES
   ERR_ROUJEAN[1,*]=  NMATCHES

;--------------------------------  
; SAVE THE DATA 

  IF KEYWORD_SET(VERBOSE) THEN PRINT,"ROUJEAN BRDF: SAVING THE ROUJEAN COEFICIENTS" 
  SAVE, K1_ROUJEAN,  FILENAME=K1_FILE
  SAVE, K2_ROUJEAN,  FILENAME=K2_FILE
  SAVE, K3_ROUJEAN,  FILENAME=K3_FILE
  SAVE, ERR_ROUJEAN, FILENAME=KERR_FILE
  SAVE, BRDF_UCERT,  FILENAME=UCERT_FILE

;-------------------------------- 
; GENERATE CSV FILE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,"ROUJEAN BRDF: GENERATING A CSV FILE"  
  DIMS = SIZE(K1_ROUJEAN)
  IF DIMS[0] EQ 1 THEN DIMS=[2,DIMS[1],1,DIMS[2],DIMS[3]]
  OPENW,OUTF,CSV_FILE,/GET_LUN
  TYPES = ['ROUJEAN_K1','ROUJEAN_K2','ROUJEAN_K3','ROUJEAN_ERR','SYSTEMATIC_ERROR','RANDOM_ERROR']
  HEADER = ['BRDF_TYPE','WAVELENGTH',REFORM(STRTRIM(STRING(K1_ROUJEAN[0,*],format='((F15.6))'),2),DIMS[2])]
  PRINTF,OUTF,FORMAT = '(  '+STRTRIM(STRING((1+DIMS[2])),2)+'(A,1H;),1(A))',HEADER
  PRINTF,OUTF,FORMAT = '(  2(A,1H;), '+STRTRIM(STRING(DIMS[2]),2)+'(i,:,1H;))','NUM_MATCHES','',K1_ROUJEAN[1,*]
  
  FOR OUT_K = 0,5 DO BEGIN
    CASE OUT_K OF
      0 : TEMP = K1_ROUJEAN
      1 : TEMP = K2_ROUJEAN
      2 : TEMP = K3_ROUJEAN
      3 : TEMP = ERR_ROUJEAN
      4 : TEMP = BRDF_UCERT
      5 : TEMP = BRDF_UCERT
    ENDCASE
    FOR OUT_BAND=0,NB_BANDS-1 DO BEGIN 
     ;BAND_NAME =  CONVERT_INDEX_TO_WAVELENGTH(OUT_BAND,REF_SENSOR) 
     BAND_NAME = GET_SENSOR_BAND_NAME(REF_SENSOR,OUT_BAND) 
    
    IF OUT_K LE 3 THEN PRINTF,OUTF, FORMAT=STRING('(  2(A,1H;),'+STRTRIM(STRING(DIMS[2]),2)+'(F15.6,:,1H;))'),$
                        TYPES[OUT_K],BAND_NAME+'_NM',TEMP[OUT_BAND+NUM_NON_BRDF,*] $
    ELSE BEGIN
      IF OUT_K EQ 5 THEN TT_BAND = OUT_BAND+NB_BANDS ELSE TT_BAND=OUT_BAND
      PRINTF,OUTF, FORMAT=STRING('(  2(A,1H;),'+STRTRIM(STRING(DIMS[2]),2)+'(F15.6,:,1H;))'),$
        TYPES[OUT_K],BAND_NAME+'_NM',TEMP[NUM_NON_UCRT+TT_BAND,*]    
    ENDELSE
    
    ENDFOR
  ENDFOR
  
  FREE_LUN,OUTF

;-------------------------------- 
; GENERATE BRDF PLOTS

  IF NOT KEYWORD_SET(NO_PLOTS) THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT,"ROUJEAN BRDF: CALLING BRDF PLOT FUNCTION" 
    RES = ROUJEAN_BRDF_PLOTS(PT_FOLDER,RB_REGION,REF_SENSOR,K1_ROUJEAN,K2_ROUJEAN,K3_ROUJEAN,ERR_ROUJEAN,/VERBOSE)
  ENDIF ELSE RES = 0

;-------------------------------- 
; RETURN STATUS

  IF RES[0] EQ -1 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'ROUJEAN BRDF: ERROR ENCOUNTERED DURING PLOT PROCESSING'
    RETURN,-1
  ENDIF ELSE BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'ROUJEAN BRDF: NO ERRORS REPORTED DURING PROCESSING'
    RETURN,1
  ENDELSE

END
