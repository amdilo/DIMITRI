;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      CLOUD_MODULE_VGT_DESERT
;* 
;* PURPOSE:
;*      THIS FUNCTION PERFORMS THE OPERATIONAL VEGETATION CLOUD SCREENING TEST ON A 
;*      GIVEN ARRAY F SPECTRAL DATA. THE ALGORITHM FOR THE TEST IS DESCRIBED IN 
;*      "DEVELOPMENT OF A CLOUD,SNOW AND CLOUD SHADOW MASK FOR VEGETATION IMAGERY" 
;*      BY G LISSENS, P KEMPENEERS AND F FIERENS
;* 
;* CALLING SEQUENCE:
;*      PIXEL_MASK = CLOUD_MODULE_VGT_DESERT(SITE_NAME,VGT_REF)
;* 
;* INPUTS:
;*      SITE_NAME  - A STRING OF THE DIMITRI VALIDATION SITE NAME '
;*      VGT_REF    - A FLOAT ARRAY CONTAINING THE TOA REFLECTANCE [NB_PIXELS,RHO_BANDS]
;*      CS_ANG     - A 4 ELEMENT ARRAY CONTAINING THE SZA, SAA, VZA AND VAA VALUES 
;*
;* KEYWORDS:
;*      VERBOSE    - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      CLASS_PIXELS - AN INTEGER ARRAY OF SIXE NUMBER OF PIXELS, 0 MEANS CLEAR PIXEL, 
;*                     1 MEANS CLOUDY
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      18 NOV 2014 - NCG / MAGELLIUM   - DIMITRI-MAG V3.0
;*
;* VALIDATION HISTORY:
;*      20 JAN 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION CLOUD_MODULE_VGT_DESERT, SITE_NAME, VGT_REF_ALL, CS_ANG, CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX, VERBOSE=VERBOSE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'CLOUD_MODULE_VGT_DESERT: STARTING CLOUD SCREENING'

  STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
  STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')

  MISSING_VALUE_LONG   = LONG(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))
  MISSING_VALUE_INT    = FIX(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))
  MISSING_VALUE_FLOAT    = FLOAT(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))
  
;-----------------------
; DEFINE NUMBER OF PIXELS 
; AND PIXEL/SNOW MASK ARRAYS

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'CLOUD_MODULE_VGT_DESERT: STARTING CLOUD SCREENING TESTS'
  NUM_PIXELS  = N_ELEMENTS(VGT_REF_ALL[*,0])
  PIXEL_MASK  = INTARR(NUM_PIXELS)-1
  SNOW_MASK   = INTARR(NUM_PIXELS)
  
  B1 = 0 ;BLUE
  B2 = 1 ;VIS
  B3 = 2 ;NIR
  B4 = 3 ;SWIR

;-----------------------
; DEFINE CLOUD SCREENING FLAG VALUES

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'CLOUD_MODULE_VGT_DESERT: DEFINING FLAGS'
  CLEAR_FLAG      = 0
  CLOUDY_FLAG     = 1
  SNOW_FLAG       = 2

  PX_CLEAR = 0
  PX_CLOUD = 1
  
  UNCERTAIN_FLAG  = CLEAR_FLAG

;-----------------------
; DEFINE CLOUD SCREENING THRESHOLDS

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'CLOUD_MODULE_VGT_DESERT: DEFINING THRESHOLDS'
  THRESHOLD_SF = 0.0005

  THRESH_1BLUE = 493.0
  THRESH_1SWIR = 180.0
  THRESH_2BLUE = 720.0
  THRESH_2SWIR = 320.0

  THRESH_SNOW_RED = 615.0
  THRESH_SNOW_MIR = 481.0
  THRESH_SNOW_1   = -773.0
  THRESH_SNOW_2   = 87.0
  THRESH_SNOW_3   = 77.0


 ;----------------------------
  ; ADDED BBT
  ; On s assure que tous les canaux sont valides
  ; on ne conserve que les pixels non perturb√©s dans les canaux choisis
  
   NB_PIXELS_ALL     = N_ELEMENTS(VGT_REF_ALL[*,0])
   NBVALID           = INTARR(NB_PIXELS_ALL)
   
   CS_CLASSIF_MATRIX= MAKE_ARRAY(NB_PIXELS_ALL,2,/LONG,VALUE=MISSING_VALUE_LONG)
   
  IDX_VALID  = WHERE ( VGT_REF_ALL[*,B2] NE MISSING_VALUE_FLOAT AND $ 
                       VGT_REF_ALL[*,B3] NE MISSING_VALUE_FLOAT , NB_PIXELS)
                       
  IF NB_PIXELS EQ 0 THEN BEGIN
    PRINT,'CLOUD_MODULE_VGT_DESERT: ERROR, NO VALID PIXELS !!!'
    RETURN, STATUS_ERROR
  ENDIF
  
  CS_CLASSIF_MATRIX[IDX_VALID,0]=IDX_VALID
  
 ;
 ; VALID PIXELS
 ;
 
; cree tableau VGT_REF

  TEMP_DIMS     = SIZE(VGT_REF_ALL,/DIMENSIONS)
  NBCAN=TEMP_DIMS[1]
 
  OUTPUT_ARRAY= MAKE_ARRAY(NB_PIXELS,/LONG,VALUE=MISSING_VALUE_LONG)
   
  VGT_REF = VGT_REF_ALL(IDX_VALID,*)
  COL_IND= VGT_REF_ALL(*,NBCAN-2)
  LIG_IND= VGT_REF_ALL(*,NBCAN-1)
  
  LATITUDE=CS_ANG(IDX_VALID,0)
  LONGITUDE=CS_ANG(IDX_VALID,1)
  
  THETAS=CS_ANG(IDX_VALID,2)
  PHIS  =CS_ANG(IDX_VALID,3)
  THETAV=CS_ANG(IDX_VALID,4)
  PHIV  =CS_ANG(IDX_VALID,5)
      
;----------------------------
; DEFINE ARRAY TO HOLD PIXEL CLASSIFICATION

  ;PIXEL_CLASSIFICATION = INTARR(NB_PIXELS)
  BADVAL=0
  NBTEST=2 ; 3 tests
  
  PIXEL_CLASSIFICATION= MAKE_ARRAY(NBTEST,NB_PIXELS,/INTEGER,VALUE=MISSING_VALUE_INT)
  TOTAL_PIXEL_CLASSIFICATION = MAKE_ARRAY(NB_PIXELS,/INTEGER,VALUE=MISSING_VALUE_INT)
  
;-----------------------
; TEST 1: CLEAR PIXEL TEST

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'CLOUD_MODULE_VGT_DESERT: RUNNING CLEAR PIXEL TEST'  
  CLEAR_PIXELS = WHERE( (VGT_REF[*,B1] LT THRESH_1BLUE*THRESHOLD_SF OR VGT_REF[*,B4] LT THRESH_1SWIR*THRESHOLD_SF),COUNT, COMPLEMENT=N_CLEAR_PIXELS, NCOMPLEMENT=N_COUNT )

  IF CLEAR_PIXELS[0] GT -1 THEN PIXEL_MASK[CLEAR_PIXELS] = CLEAR_FLAG
  
  IF N_COUNT NE 0 THEN PIXEL_CLASSIFICATION[0,N_CLEAR_PIXELS]  = CLOUDY_FLAG
  IF   COUNT NE 0 THEN PIXEL_CLASSIFICATION[0,CLEAR_PIXELS]    = CLEAR_FLAG
  
;-----------------------
; TEST 2: CLOUDY PIXEL TEST

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'CLOUD_MODULE_VGT_DESERT: RUNNING CLOUDY PIXEL TEST' 
  CLOUDY_PIXELS = WHERE(PIXEL_MASK   NE CLEAR_FLAG                  AND $
                       (VGT_REF[*,B1] GE THRESH_2BLUE*THRESHOLD_SF   OR  $
                        VGT_REF[*,B4] GE THRESH_2SWIR*THRESHOLD_SF) ,$
                        COUNT_CLOUDY_PIXELS,COMPLEMENT=N_CLOUDY_PIXELS, NCOMPLEMENT=N_COUNT_CLOUDY_PIXELS )

  IF CLOUDY_PIXELS[0] GT -1 THEN PIXEL_MASK[CLOUDY_PIXELS] = CLOUDY_FLAG
  
  IF   COUNT_CLOUDY_PIXELS NE 0 THEN PIXEL_CLASSIFICATION[1,CLOUDY_PIXELS]      = CLOUDY_FLAG
  IF N_COUNT_CLOUDY_PIXELS NE 0 THEN PIXEL_CLASSIFICATION[1,N_CLOUDY_PIXELS]    = CLEAR_FLAG

;-----------------------
; TEST 2: UNCERTAIN PIXEL TEST

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'CLOUD_MODULE_VGT_DESERT: RESETTING UNCERTAIN FLAGS'   
  UNCERTAIN_PIXELS = WHERE(PIXEL_MASK NE CLEAR_FLAG AND PIXEL_MASK NE CLOUDY_FLAG, COUNT_UNCERTAIN_PIXELS $
                          ,COMPLEMENT=N_UNCERTAIN_PIXELS, NCOMPLEMENT=N_COUNT_UNCERTAIN_PIXELS )
  
  IF UNCERTAIN_PIXELS[0] GT -1 THEN PIXEL_MASK[UNCERTAIN_PIXELS] = UNCERTAIN_FLAG
  
 ; IF   COUNT_UNCERTAIN_PIXELS NE 0 THEN PIXEL_CLASSIFICATION[2,UNCERTAIN_PIXELS]      = CLEAR_FLAG 
 ; IF N_COUNT_UNCERTAIN_PIXELS NE 0 THEN PIXEL_CLASSIFICATION[2,N_UNCERTAIN_PIXELS]    = CLOUDY_FLAG


;-----------------------
; SNOW TEST PART 1

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'CLOUD_MODULE_VGT_DESERT: STARTING PART 1 OF SNOW TEST' 
  SNOW1 = WHERE(VGT_REF[*,B2] GE THRESH_SNOW_RED*THRESHOLD_SF AND $
                VGT_REF[*,B4] LT THRESH_SNOW_MIR*THRESHOLD_SF )

  IF SNOW1[0] EQ -1 THEN GOTO,SKIP_SNOW_TEST
  SNOW_MASK[SNOW1] = SNOW_FLAG

;-----------------------
; SNOW TEST PART 2

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'CLOUD_MODULE_VGT_DESERT: STARTING PART 2 OF SNOW TEST' 
  VAR1 = 1000*(VGT_REF[*,B1]-VGT_REF[*,B3])/(VGT_REF[*,B1]+VGT_REF[*,B3])
  VAR2 = 1000*(VGT_REF[*,B1]-VGT_REF[*,B4])/(VGT_REF[*,B1]+VGT_REF[*,B4])
  VAR3 = ((VGT_REF[*,B1]+VGT_REF[*,B2])/2.0)-VGT_REF[*,B4]

  SNOW2 = WHERE(SNOW_MASK EQ SNOW_FLAG                  AND $
                VAR1      GE THRESH_SNOW_1              AND $
                VAR2      GE THRESH_SNOW_2              AND $
                VAR3      GE THRESH_SNOW_3*THRESHOLD_SF )

  IF SNOW2[0] GT -1 THEN PIXEL_MASK[SNOW2] = CLEAR_FLAG ;PIXELS ARE SNOW AND NOT CLOUD!

;-----------------------
; SET NON-CLOUD PIXELS TO CLEAR AND RETURN

  SKIP_SNOW_TEST:
  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'CLOUD_MODULE_VGT_DESERT: RETURNING CLOUD MASK' 
  
  
  RES = WHERE(PIXEL_MASK NE CLOUDY_FLAG)
  IF RES[0] GT -1 THEN PIXEL_MASK[RES] = CLEAR_FLAG


  ;READ CLIMATOLOGY OF NIR REFLECTANCE

  CLIMREF_PIXEL_CLASSIFICATION = CLOUD_MODIS_CLIMREF_FILTERING(SITE_NAME, LATITUDE, LONGITUDE, CS_ANG(IDX_VALID,2:5), $
                                                                VGT_REF[*,B2], VGT_REF[*,B3], VGT_REF[*,B1], VERBOSE=VERBOSE)

  PIXEL_CLASSIFICATION[0,*] = CLIMREF_PIXEL_CLASSIFICATION
  IDX_CLEAR = WHERE(PIXEL_CLASSIFICATION[0,*] EQ PX_CLEAR, COUNT_CLEAR)
  IF COUNT_CLEAR EQ 0 THEN BEGIN
    TOTAL_PIXEL_CLASSIFICATION[*] = PX_CLOUD
    GOTO, SKIP_PASS_3
  ENDIF
                
                
  ;MASK DILATATION  
  
   TOTAL_PIXEL_CLASSIFICATION=TRANSPOSE(1-PIXEL_CLASSIFICATION[0,*])            
  
   IDX_N0 = WHERE(TOTAL_PIXEL_CLASSIFICATION NE 0 ,IDX_COUNT,COMPLEMENT=NIDX_INV, NCOMPLEMENT=NINVCOUNT)
   IF IDX_COUNT NE 0 THEN TOTAL_PIXEL_CLASSIFICATION[IDX_N0]  = 1-PX_CLEAR

   ;on reconstruit l'extrait
   NBCOL=MAX(COL_IND)-MIN(COL_IND)+1
   NBLIG=MAX(LIG_IND)-MIN(LIG_IND)+1
   
   COLO=FIX(COL_IND-MIN(COL_IND))
   LIG=FIX(LIG_IND-MIN(LIG_IND))
        
   ARRAY_OTHERS_MASK = MAKE_ARRAY(NBCOL, NBLIG,/FLOAT,VALUE=0)
   FOR IPIX=0L,NB_PIXELS-1 DO BEGIN           
     ARRAY_OTHERS_MASK[COLO[IDX_VALID[IPIX]], LIG[IDX_VALID[IPIX]]]=1-TOTAL_PIXEL_CLASSIFICATION[[IPIX]]
   ENDFOR    
 
    S= REPLICATE(1, 3, 3)  
    NEW_MASK_DILATE=DILATE(ARRAY_OTHERS_MASK,S)    

     ; on remet sous forme de vecteur 
     ; On reconstruit tout le masque 
     FOR IPIX=0L,NB_PIXELS-1 DO BEGIN
       PIXEL_CLASSIFICATION[1,IPIX]=NEW_MASK_DILATE[COLO[IDX_VALID[IPIX]], LIG[IDX_VALID[IPIX]]]
     ENDFOR
 
 RES = WHERE(PIXEL_CLASSIFICATION[1,*] EQ MISSING_VALUE_INT, COUNT)
    IF COUNT GT 0 THEN BEGIN
      PRINT,'CLOUD_MODULE_VGT_DESERT: ERROR, SOME PIXELS NOT CLASSIFIED!!!', ' NUM PIX = ',COUNT
      RETURN, STATUS_ERROR
    ENDIF
 ;

    FOR IPIX=0L,NB_PIXELS-1 DO BEGIN     
      TOTAL_PIXEL_CLASSIFICATION[IPIX]=(1-PIXEL_CLASSIFICATION[1,IPIX])                                                     
    ENDFOR
  
; On inverse les codes 
; cloud =1
; clear =0 
 
   ID_CLOUD = WHERE(TOTAL_PIXEL_CLASSIFICATION EQ 0,CLD_COUNT,COMPLEMENT=ID_CLEAR, NCOMPLEMENT=NCLD_COUNT)
   IF CLD_COUNT   NE 0 THEN TOTAL_PIXEL_CLASSIFICATION[ID_CLOUD]  = 1
   IF NCLD_COUNT  NE 0 THEN TOTAL_PIXEL_CLASSIFICATION[ID_CLEAR]  = 0
 
 ; RES = WHERE(TOTAL_PIXEL_CLASSIFICATION EQ BADVAL, COUNT)
;    IF COUNT GT 0 THEN BEGIN
;    PRINT,'CLOUD_MODULE_LCCA: ERROR, SOME PIXELS NOT CLASSIFIED!!!', ' NUM PIX = ',COUNT
 ;   RETURN, STATUS_ERROR
 ; ENDIF
    
    SKIP_PASS_3:

     CS_CLASSIF_MATRIX[IDX_VALID,0]=IDX_VALID
     CS_CLASSIF_MATRIX[IDX_VALID,1]=TOTAL_PIXEL_CLASSIFICATION
    
   RETURN, STATUS_OK
END