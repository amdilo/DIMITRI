;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      DIMITRI_INTERFACE_CALIB_REPORT 
;* 
;* PURPOSE:
;*      INTERFACE BETWEEN THE DESERT CALIBRATION RESULTS AND STATISTICAL ANALYSIS
;* 
;* CALLING SEQUENCE:
;*      RES = DIMITRI_INTERFACE_CALIB_REPORT(SITE_NAME,SENSOR,PROC_VERSION)      
;* 
;* INPUTS:
;*      SITE_NAME = A STRING CONTAINING THE NAME OF THE REGION TO BE USED
;*      SENSOR    = A STRING CONTAINING THE NAME OF THE SENSOR TO BE USED
;*      PROC_VERSION = A STRING CONTAINING THE NAME OF THE PROCESSING_VERSION TO BE USED
;*      CALIB_INPUT  =  A STRING CONTAINIGN THE NAME OF THE CALIB FOLDER TO BE USED
;*
;* KEYWORDS:
;*      ALL      - SET TO SEARCH FOR ALL DIMITRI PRODUCTS
;*      YEAR     - A STRING OF THE YEAR TO BE INGESTED (E.G. '2002')
;*      VERBOSE  - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS   - 1: NOMINAL, (-1): ERROR, 0: NO PRODUCTS FOUND
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      02 MAR 2015 - NCG / MAGELLIUM - CREATION (DIMITRI V4)
;*
;* VALIDATION HISTORY:
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION DIMITRI_INTERFACE_CALIB_REPORT,SITE_NAME,SENSOR,PROC_VERSION,CALIB_INPUT,ALL=ALL,YEAR=YEAR,VERBOSE=VERBOSE

  FCT_NAME = 'DIMITRI_INTERFACE_CALIB_REPORT'
  
;------------------------
; KEYWORD PARAMETER CHECK

  CFIG_DATA = GET_DIMITRI_CONFIGURATION(VERBOSE=VERBOSE)

  STATUS_NODATA = GET_DIMITRI_LOCATION('STATUS_NODATA')
  STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')
  STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
  
  ;----------------------
  ; IDENTIFY CURRENT DIRECTORY AND INPUT FOLDER

  DL           = GET_DIMITRI_LOCATION('DL')
  INPUT_FOLDER = GET_DIMITRI_LOCATION('OUTPUT')
  MISSING_VALUE = GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE')
  MISSING_VALUE_FLT = FLOAT(MISSING_VALUE)
  
  INPUT_FOLDER = INPUT_FOLDER + DL + CALIB_INPUT
  OUT_FILEPATH = INPUT_FOLDER + DL + 'STAT_REPORT'
  

  CALDAT, SYSTIME(/JULIAN),TMM,TDD,TYY,THR,TMN,TSS
  TYY = STRTRIM(STRING(TYY),2)
  TMM = TMM LT 10 ? '0'+STRTRIM(STRING(TMM),2) : STRTRIM(STRING(TMM),2)
  TDD = TDD LT 10 ? '0'+STRTRIM(STRING(TDD),2) : STRTRIM(STRING(TDD),2)
  THR = THR LT 10 ? '0'+STRTRIM(STRING(THR),2) : STRTRIM(STRING(THR),2)
  TMN = TMN LT 10 ? '0'+STRTRIM(STRING(TMN),2) : STRTRIM(STRING(TMN),2)
  TSS = TSS LT 10 ? '0'+STRTRIM(STRING(TSS,FORMAT='(I)'),2) : STRTRIM(STRING(TSS,FORMAT='(I)'),2)
  
  CREATE_CSV_DATE = TYY+'-'+TMM+'-'+TDD+'  '+THR+':'+TMN+':'+TSS
  
  OUT_BASE_FILENAME = OUT_FILEPATH + DL + SITE_NAME+'_'+SENSOR+'_'+PROC_VERSION+'_'+CALIB_INPUT+'_'
  
  ;---------------------
  ; SEARCH FOR DATA PRODUCTS

  IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ': RETRIEVING PRODUCT SEARCH FILTER'

  SEARCH_FOLDER = INPUT_FOLDER+DL+'Site_'+SITE_NAME+DL+SENSOR+DL+'Proc_'+PROC_VERSION+DL
  SEARCH_FILTER = '*.nc'
 
  FILE_RESULT = FILE_SEARCH(SEARCH_FOLDER, SEARCH_FILTER, COUNT=NB_FILES)
  IF NB_FILES EQ 0 THEN BEGIN
    PRINT, FCT_NAME + ': ERROR, NO INPUT PRODUCTS FOUND'
    RETURN, STATUS_NODATA
  ENDIF

  ;----------------------
  ; GET BAND INFO STRUCTURE (NB_BANDS, BAND_ID, BAND_LABEL_STD, BAND_WAVELENGTH)
  
  CUR_SENSOR_BAND_INFOS = GET_SENSOR_BAND_INFO(SENSOR)
  NB_BANDS_SENSOR  = CUR_SENSOR_BAND_INFOS.NB_BAND
  IF STRUPCASE(SENSOR) EQ 'AATSR' OR STRUPCASE(SENSOR) EQ 'ATSR2' THEN BEGIN
    NB_BANDS_SENSOR = 4
  ENDIF

  NB_DIRECTIONS = SENSOR_DIRECTION_INFO(SENSOR)
  NB_DIRECTIONS = NB_DIRECTIONS[0]
  
  SENSOR_CONFIG = GET_SENSOR_BAND_CONFIG(SENSOR) ; GET USED CHANNELS / STD LABELS / SMAC FILENAME / LUT FILENAME

  ;---------------------
  ; GET CSV REPORT STRUCTURE

  CSV_REPORT_STRUCT = GET_CSV_CALIB_REPORT_STRUCT(NB_DIRECTIONS, NB_BANDS_SENSOR, NB_FILES, VERBOSE=VERBOSE)

  ;---------------------
  ; LOOP ON THE CALIBRATION FILES

  FOR NUM_FILE=0, NB_FILES-1 DO BEGIN
  
    ;---------------------
    ; READ CALIB OUTPUT FILE
    
    NCDF_FILENAME = FILE_RESULT[NUM_FILE]
    STATUS = NETCDFREAD_CALIB_OUTPUT(NCDF_FILENAME, NCDF_CALIB_STRUCT=NCDF_CALIB_STRUCT, VERBOSE=VERBOSE)
    IF STATUS NE STATUS_OK THEN BEGIN
      PRINT, FCT_NAME + ': ERROR DURING NCDF FILE READING (', NCDF_FILENAME, ')'
      RETURN, STATUS
    ENDIF
    
    ;----------------------
    ; CHECK COMPATIBILITY BETWEEN NCDF FILE AND DEFAULT SENSOR SPECIFICITIES

    NB_BANDS = N_ELEMENTS(NCDF_CALIB_STRUCT.VARIABLES.REFL_BAND_IDS)
    BAND_MAX = MAX(NCDF_CALIB_STRUCT.VARIABLES.REFL_BAND_IDS)
    
    IF NB_DIRECTIONS NE NCDF_CALIB_STRUCT.DIMENSIONS.VIEWDIR_NUMBER THEN BEGIN
      PRINT, FCT_NAME + ': ERROR, NUMBER OF DIRECTIONS OF THE NCDF FILE DOES NOT MATCH THE DEFAULT SENSOR DIRECTION NUMBER (', NCDF_FILENAME, ')'
      RETURN, STATUS_ERROR
    ENDIF

    IF NB_BANDS_SENSOR LT NB_BANDS THEN BEGIN
      PRINT, FCT_NAME + ': ERROR, NUMBER OF BANDS OF THE NCDF FILE GREATER THAN THE DEFAULT SENSOR BAND NUMBER (', NCDF_FILENAME, ')'
      RETURN, STATUS_ERROR
    ENDIF

    IF NB_BANDS_SENSOR LT BAND_MAX THEN BEGIN
      PRINT, FCT_NAME + ': ERROR, MAX BAND ID OF THE NCDF FILE GREATER THAN THE DEFAULT SENSOR BAND NUMBER (', NCDF_FILENAME, ')'
      RETURN, STATUS_ERROR
    ENDIF

    ;----------------------
    ; POPULATE CSV STRUCTURE WITH INFORMATION
    
    CSV_REPORT_STRUCT.FIELDS.NCDF_FILENAME[NUM_FILE] = FILE_BASENAME(NCDF_FILENAME)
    CSV_REPORT_STRUCT.FIELDS.L1_FILENAME[NUM_FILE]   = NCDF_CALIB_STRUCT.GLOBAL_ATT.L1_FILENAME
    CSV_REPORT_STRUCT.FIELDS.VIEWING_DIRECTION = INDGEN(NB_DIRECTIONS)+1
    
    DATE_TABLE = STRSPLIT(NCDF_CALIB_STRUCT.GLOBAL_ATT.ACQUISITION_DATE, ':- ', /EXTRACT)
    IF N_ELEMENTS(DATE_TABLE) NE 5 THEN BEGIN
      PRINT, FCT_NAME + ': ERROR, INCORRECT ACQUISITION DATE FORMAT IN NCDF FILE  (', NCDF_FILENAME, ')'
      RETURN, STATUS_ERROR
    ENDIF
    CSV_REPORT_STRUCT.FIELDS.YEAR[NUM_FILE]    = DATE_TABLE[0]
    CSV_REPORT_STRUCT.FIELDS.MONTH[NUM_FILE]   = DATE_TABLE[1]
    CSV_REPORT_STRUCT.FIELDS.DAY[NUM_FILE]     = DATE_TABLE[2]
    CSV_REPORT_STRUCT.FIELDS.HOUR[NUM_FILE]    = DATE_TABLE[3]
    CSV_REPORT_STRUCT.FIELDS.MINUTES[NUM_FILE] = DATE_TABLE[4]
    
    ; COMPUTE DECIMAL YEAR
    IF FLOAT(DATE_TABLE[0]) MOD 4 EQ 0 THEN DIY = DOUBLE(366.0) ELSE DIY = DOUBLE(365.0)
    TTIME = DOUBLE( (DATE_TABLE[3]/(DIY*24.))+(DATE_TABLE[4]/(DIY*60.*24.)) )
    DAY_OF_YEAR = DOUBLE(JULDAY(DATE_TABLE[1],DATE_TABLE[2],DATE_TABLE[0])-JULDAY(1,0,DATE_TABLE[0]))
    
    CSV_REPORT_STRUCT.FIELDS.DECIMAL_YEAR[NUM_FILE]  = DOUBLE(DATE_TABLE[0])+ DAY_OF_YEAR/DIY + TTIME
    
    ;----------------------
    ; LOOP ON VIEWING DIRECTIONS
    
    FOR NUM_DIR=0, NB_DIRECTIONS-1 DO BEGIN
    
      ;----------------------
      ; COMPUTE STATISTICS ON VALID CALIB_PIXEL ONLY
      
      CALIB_PIXEL_NUMBER = NCDF_CALIB_STRUCT.VARIABLES.CALIB_PIXEL_NUMBER[NUM_DIR]
      IF CALIB_PIXEL_NUMBER EQ 0 THEN BEGIN
        PRINT, FCT_NAME + ': WARNING, NO CALIB PIXEL FOR DIRECTION ', NUM_DIR, ' >> DIRECTION SKIPPED'
        GOTO, NEXT_DIR
      ENDIF
      
      CALIB_VALID_INDEX = NCDF_CALIB_STRUCT.VARIABLES.CALIB_VALID_INDEX[0:CALIB_PIXEL_NUMBER-1,NUM_DIR]
             
      CSV_REPORT_STRUCT.FIELDS.SZA_MEAN[NUM_DIR, NUM_FILE] = MEAN(NCDF_CALIB_STRUCT.VARIABLES.SZA[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.SZA_STD[NUM_DIR, NUM_FILE]  = STDDEV(NCDF_CALIB_STRUCT.VARIABLES.SZA[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.SAA_MEAN[NUM_DIR, NUM_FILE] = MEAN(NCDF_CALIB_STRUCT.VARIABLES.SAA[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.SAA_STD[NUM_DIR, NUM_FILE]  = STDDEV(NCDF_CALIB_STRUCT.VARIABLES.SAA[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.VZA_MEAN[NUM_DIR, NUM_FILE] = MEAN(NCDF_CALIB_STRUCT.VARIABLES.VZA[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.VZA_STD[NUM_DIR, NUM_FILE]  = STDDEV(NCDF_CALIB_STRUCT.VARIABLES.VZA[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.VAA_MEAN[NUM_DIR, NUM_FILE] = MEAN(NCDF_CALIB_STRUCT.VARIABLES.VAA[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.VAA_STD[NUM_DIR, NUM_FILE]  = STDDEV(NCDF_CALIB_STRUCT.VARIABLES.VAA[CALIB_VALID_INDEX, NUM_DIR])
      
      CSV_REPORT_STRUCT.FIELDS.ERA_WIND_SPEED_MEAN[NUM_DIR, NUM_FILE]  = MEAN(NCDF_CALIB_STRUCT.VARIABLES.ERA_WIND_SPEED[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.ERA_WIND_SPEED_STD[NUM_DIR, NUM_FILE]   = STDDEV(NCDF_CALIB_STRUCT.VARIABLES.ERA_WIND_SPEED[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.ERA_WIND_DIR_MEAN[NUM_DIR, NUM_FILE]    = MEAN(NCDF_CALIB_STRUCT.VARIABLES.ERA_WIND_DIR[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.ERA_WIND_DIR_STD[NUM_DIR, NUM_FILE]     = STDDEV(NCDF_CALIB_STRUCT.VARIABLES.ERA_WIND_DIR[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.ERA_OZONE_MEAN[NUM_DIR, NUM_FILE]       = MEAN(NCDF_CALIB_STRUCT.VARIABLES.ERA_OZONE[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.ERA_OZONE_STD[NUM_DIR, NUM_FILE]        = STDDEV(NCDF_CALIB_STRUCT.VARIABLES.ERA_OZONE[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.ERA_PRESSURE_MEAN[NUM_DIR, NUM_FILE]    = MEAN(NCDF_CALIB_STRUCT.VARIABLES.ERA_PRESSURE[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.ERA_PRESSURE_STD[NUM_DIR, NUM_FILE]     = STDDEV(NCDF_CALIB_STRUCT.VARIABLES.ERA_PRESSURE[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.ERA_WATERVAPOUR_MEAN[NUM_DIR, NUM_FILE] = MEAN(NCDF_CALIB_STRUCT.VARIABLES.ERA_WATERVAPOUR[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.ERA_WATERVAPOUR_STD[NUM_DIR, NUM_FILE]  = STDDEV(NCDF_CALIB_STRUCT.VARIABLES.ERA_WATERVAPOUR[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.ESA_CHLOROPHYLL_MEAN[NUM_DIR, NUM_FILE] = MEAN(NCDF_CALIB_STRUCT.VARIABLES.ESA_CHLOROPHYLL[CALIB_VALID_INDEX, NUM_DIR])
      CSV_REPORT_STRUCT.FIELDS.ESA_CHLOROPHYLL_STD[NUM_DIR, NUM_FILE]  = STDDEV(NCDF_CALIB_STRUCT.VARIABLES.ESA_CHLOROPHYLL[CALIB_VALID_INDEX, NUM_DIR])
      
      ;----------------------
      ; LOOP ON BANDS
      
      FOR NUM_BAND=0, NB_BANDS-1 DO BEGIN
      
        IDX_NUM_BAND = NCDF_CALIB_STRUCT.VARIABLES.REFL_BAND_IDS[NUM_BAND]
        
        BAND_REF_LABEL = SENSOR_CONFIG.BAND_REF_LABEL[IDX_NUM_BAND]
        CSV_REPORT_STRUCT.COMPLEMENT.REFL_BAND_IDS[NUM_BAND] = BAND_REF_LABEL
      
        BAND_VALID_INDEX = NCDF_CALIB_STRUCT.VARIABLES.BAND_VALID_INDEX[*, NUM_DIR, NUM_BAND]
        IDX_BAND_VALID_INDEX = WHERE(BAND_VALID_INDEX NE MISSING_VALUE, NB_BAND_VALID_INDEX)
                  
        CSV_REPORT_STRUCT.FIELDS.BAND_REF_TO_SIM_RATIO_PIX_NUM[NUM_DIR, NUM_BAND, NUM_FILE] = NB_BAND_VALID_INDEX
        
        IF NB_BAND_VALID_INDEX GT 0 THEN BEGIN
          BAND_VALID_INDEX = BAND_VALID_INDEX(IDX_BAND_VALID_INDEX)
          CSV_REPORT_STRUCT.FIELDS.BAND_REF_TO_SIM_RATIO_MEAN[NUM_DIR, NUM_BAND, NUM_FILE] = MEAN(NCDF_CALIB_STRUCT.VARIABLES.BAND_REF_TO_SIM_RATIO[BAND_VALID_INDEX, NUM_DIR, NUM_BAND])
          CSV_REPORT_STRUCT.FIELDS.BAND_REF_TO_SIM_RATIO_STD[NUM_DIR, NUM_BAND, NUM_FILE]  = STDDEV(NCDF_CALIB_STRUCT.VARIABLES.BAND_REF_TO_SIM_RATIO[BAND_VALID_INDEX, NUM_DIR, NUM_BAND])
          CSV_REPORT_STRUCT.FIELDS.BAND_RHO_SIM_UNCERT_MEAN[NUM_DIR, NUM_BAND, NUM_FILE]   = MEAN(NCDF_CALIB_STRUCT.VARIABLES.BAND_RHO_SIM_UNCERT[BAND_VALID_INDEX, NUM_DIR, NUM_BAND])
          CSV_REPORT_STRUCT.FIELDS.BAND_RHO_SIM_UNCERT_STD[NUM_DIR, NUM_BAND, NUM_FILE]    = STDDEV(NCDF_CALIB_STRUCT.VARIABLES.BAND_RHO_SIM_UNCERT[BAND_VALID_INDEX, NUM_DIR, NUM_BAND])
        ENDIF ELSE BEGIN
          IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ': WARNING, NO VALID POINTS FOR BAND ', BAND_REF_LABEL, ' ON VIEWING DIRECTION ', STRTRIM(STRING(NUM_DIR+1),2), ' >> BAND SKIPPED'
        ENDELSE
               
      ENDFOR
      
      NEXT_DIR:

    ENDFOR
    
  ENDFOR
  
  ;----------------------
  ; GET THE ACQUISITION PERIOD OF THE PRODUCTS
  
  YEAR_MAX = MAX(CSV_REPORT_STRUCT.FIELDS.YEAR, MIN=YEAR_MIN)
  PERIOD = STRTRIM(STRING(YEAR_MIN),2)+'_'+STRTRIM(STRING(YEAR_MAX+1),2)
  
  ;----------------------
  ; CREATE CSV OUTPUT FILE
  
  OUT_FILENAME_REPORT = OUT_BASE_FILENAME + PERIOD + '.csv'
  STATUS = WRITE_CSV_CALIB_REPORT(OUT_FILENAME_REPORT, CSV_REPORT_STRUCT, VERBOSE=VERBOSE)
  IF STATUS NE STATUS_OK THEN BEGIN
    PRINT, FCT_NAME + ': ERROR DURING CSV REPORT FILE WRITING (', OUT_FILENAME_REPORT, ')'
    RETURN, STATUS_ERROR
  ENDIF

  ;----------------------
  ; CREATE FIGURES FOR EACH DIRECTION/BAND
  
  METHOD = STRSPLIT(CALIB_INPUT,'_2',/REGEX,/EXTRACT)
  METHOD = METHOD[0]
  
  FOR NUM_DIR=0, NB_DIRECTIONS-1 DO BEGIN
    
    IF NUM_DIR+1 LT 10 THEN DIR_ID = 'DIR0' + STRTRIM(STRING(NUM_DIR+1),2) $
                    ELSE DIR_ID = 'DIR' + STRTRIM(STRING(NUM_DIR+1),2)

    FOR NUM_BAND=0, NB_BANDS-1 DO BEGIN
    
      IDX_NUM_BAND = NCDF_CALIB_STRUCT.VARIABLES.REFL_BAND_IDS[NUM_BAND]
       
      BAND_ID = SENSOR_CONFIG.BAND_REF_LABEL[IDX_NUM_BAND]
      WAVELENGTH = STRTRIM(STRING(SENSOR_CONFIG.BAND_WAVELENGTH[IDX_NUM_BAND]),2)
      
      ; EXTRACT ONLY VALID VALUES
      IDX_VALID = WHERE(CSV_REPORT_STRUCT.FIELDS.BAND_REF_TO_SIM_RATIO_PIX_NUM[NUM_DIR, NUM_BAND, *] GT 0, NB_VALID)
      IF NB_VALID GT 0 THEN BEGIN
        
        DECIMAL_YEAR = CSV_REPORT_STRUCT.FIELDS.DECIMAL_YEAR[IDX_VALID]
        BAND_REF_TO_SIM_RATIO_MEAN = CSV_REPORT_STRUCT.FIELDS.BAND_REF_TO_SIM_RATIO_MEAN[NUM_DIR, NUM_BAND, IDX_VALID]
        BAND_RHO_SIM_UNCERT_MEAN = CSV_REPORT_STRUCT.FIELDS.BAND_RHO_SIM_UNCERT_MEAN[NUM_DIR, NUM_BAND, IDX_VALID]
        
        ; ----- PATCH FOR MAGELLIUM CALIBRATION (NO UNCERTAINTY COMPUTED AT THE MOMENT)
        IDX_UNCERT = WHERE(BAND_RHO_SIM_UNCERT_MEAN EQ MISSING_VALUE_FLT, COUNT_UNCERT)
        IF COUNT_UNCERT NE 0 THEN BAND_RHO_SIM_UNCERT_MEAN[IDX_UNCERT] = 0.0
        ; -----
                
        ; CREATE OUTPUT PLOT
        OUT_FILENAME_FIG = OUT_BASE_FILENAME + DIR_ID + '_' + BAND_ID + '_' + WAVELENGTH + '_' + PERIOD + '.jpg'
        STATUS = GET_SENSOR_TO_SIMULATION_TIMESERIES_PLOTS(METHOD, OUT_FILENAME_FIG, DECIMAL_YEAR, BAND_REF_TO_SIM_RATIO_MEAN, BAND_RHO_SIM_UNCERT_MEAN, VERBOSE=VERBOSE)
        IF STATUS EQ STATUS_ERROR THEN RETURN, STATUS_ERROR
        
      ENDIF ELSE BEGIN
        IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ': WARNING, NO FILES WITH VALID POINTS FOR VIEWING DIRECTION ', DIR_ID, ' AND BAND ', BAND_ID, ' >> NO GRAPHS CREATED
      ENDELSE
      
    ENDFOR
    
  ENDFOR

  IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME + ': ***** PROCESS COMPLETED SUCCESSFULLY *****'
  
  RETURN, STATUS_OK
  
END

