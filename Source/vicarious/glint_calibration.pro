;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      GLINT_CALIBRATION
;* 
;* PURPOSE:
;*      APPLY GLINT VICARIOUS INTERBAND CALIBRATION FOLLOWING HAGOLLE ET AL 1999.
;*      CALIBRATION FACTOR "AK" ARE COMPUTED FROM A REFERENCE BAND (GENERALLY 560 OR 620 NM)
;* 
;* CALLING SEQUENCE:
;*      RES = GLINT_CALIBRATION(OUTPUT_FOLDER,VIC_REGION,VIC_SENSOR,VIC_PROC_VER, $
;*		   	       YEAR, CLOUD_PERCENTAGE, ROI_PERCENTAGE, WS_MAX, CONE_MAX, BREF, ABS_CALREF, CHL, AER)
;* 
;* INPUTS:
;*      OUTPUT_FOLDER    - THE FULL PATH OF THE OUTPUT FOLDER
;*      VIC_REGION       - THE VALIDATION SITE NAME E.G. 'Uyuni'
;*      VIC_SENSOR       - THE NAME OF THE REFERENCE SENSOR FOR INTERCALIBRATION
;*      VIC_PROC_VER     - THE PROCESSING VERSION OF THE REFERENCE SENSOR
;*      YEAR             - THE YEAR E.G. 2003 OR 'ALL'
;*	CLOUD_PERCENTAGE - THE PERCENTAGE CLOUD COVER THRESHOLD ALLOWED WITHIN PRODUCTS E.G. 60.0
;*	ROI_PERCENTAGE   - THE PERCENTAGE ROI COVERAGE ALLOWED WITHIN PRODUCTS E.G. 75.0 
;*	WS_MAX           - THE MAXIMUM WIND SPEED IN M/S ALLOWED FOR AN OBSERVATION E.G. 5.0 
;*	CONE_MAX         - THE MAXIMUM ANGLE IN DEGREE AROUND THE SPECULAR DIRECTION E.G. 3.0 
;*	BREF             - THE REFERENCE BAND INDEX FOR CHOSEN SENSOR E.G. 5
;*	ABS_CALREF       - THE ABSOLUTE CALIBRATION COEFFICIENT AT BREF E.G. 1.01 
;*	CHL              - THE CHLOROPHYLL CONCENTRATION IN MG/M3 E.G. 0.035 
;*	TAUA_865_CLIM    - THE AEROSOL OPTICAL THICKNESS AT 865 NM FROM A CLIMATOLOGY E.G. 0.1
;*	AER              - THE AEROSOL NAME IN RTM FILE E.G. IAER_1
;*
;* KEYWORDS:
;*      CLIM            - OPTION TO READ CHL CLIMATOLOGY
;*      PIX             - OPTION TO ACTIVATE THE PIXEL-PER-PIXEL MODE
;*      VERBOSE         - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS          - 1: NO ERRORS REPORTED, (-1) OR 0: ERRORS DURING INGESTION 
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*        01 NOV 2013 - C MAZERAN - FIRST IMPLEMENTATION
;*        02 JAN 2014 - C MAZERAN - ADDED CORRECTION FOR PRESSURE AND PIXEL-BY-PIXEL CLOUD SCREENING
;*        20 JAN 2014 - C MAZERAN - ADDED SPECTRAL REFRACTIVE INDEX FOR FRESNEL REFLECTANCE
;*
;* VALIDATION HISTORY:
;*        01 NOV 2013 - C MAZERAN - LINUX 64-BIT MACHINE IDL 8.0, NOMINAL COMPILATION AND OPERATION.
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION GLINT_CALIBRATION, OUTPUT_FOLDER, VIC_REGION, VIC_SENSOR, VIC_PROC_VER,$
			       YEAR, CLOUD_PERCENTAGE, ROI_PERCENTAGE, WS_MAX, CONE_MAX, BREF, ABS_CALREF, CHL, TAUA_865_CLIM, CLIM=CLIM, AER, PIX=PIX, VERBOSE=VERBOSE

  COMMON RTM_LUT

;-----------------------------------------
; DEFINE CURRENT FUNCTION NAME
; AND SOME NUMERICAL CONSTANTS

  FCT_NAME         = 'GLINT_CALIBRATION'
  BADVAL           = -999.0 
  TOL              = 0.000001 ; TOLERANCE FOR FLOAT COMPARISON
  REF_WIND         = 5.
  REF_O3           = 300.0
  REF_P            = 1013.25
 
;-----------------------------------------
; CHECK SITE TYPE

  SITE_TYPE = GET_SITE_TYPE(VIC_REGION,VERBOSE=VERBOSE)
  IF STRUPCASE(SITE_TYPE) NE 'OCEAN' THEN BEGIN
     PRINT,FCT_NAME+': ERROR, INPUT SITE IS NOT EXISTING OR NOT OCEANIC'
     RETURN,-1
  ENDIF

;----------------------------------------
; SEARCH FOR WAV AT BREF BAND
 
  WAVREF = FLOAT(GET_SENSOR_BAND_NAME(VIC_SENSOR,BREF))

;----------------------------------------
; SEARCH FOR 865 NM BAND INDEX
 
  IF VIC_SENSOR EQ 'MODISA' THEN TEMP_SENSOR = 'MODISA_O' ELSE TEMP_SENSOR = VIC_SENSOR
  B865 = GET_SENSOR_BAND_INDEX(TEMP_SENSOR,18,VERBOSE=VERBOSE)
  IF VIC_SENSOR EQ 'VEGETATION' THEN B865 = GET_SENSOR_BAND_INDEX(TEMP_SENSOR,16,VERBOSE=VERBOSE)

  IF B865 LT 0 THEN BEGIN
    PRINT, FCT_NAME+': ERROR, NO 865 NM BAND FOUND FOR CHOSEN SENSOR'
    RETURN,-1
  ENDIF

;----------------------------------------
; SEARCH FOR ALL WAV + VIS BAND <=865 NM 

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': SEARCH FOR ALL WAV + VIS BANDS <=885 NM'
  NB_BANDS = (SENSOR_BAND_INFO(VIC_SENSOR,VERBOSE=VERBOSE))[0]
  WAV_ALL = STRARR(NB_BANDS)
  FOR BK=0, NB_BANDS-1 DO WAV_ALL[BK]=GET_SENSOR_BAND_NAME(VIC_SENSOR,BK)

  K_GAS=[11,13,14, 20]
  BAND_VIS = []
  WAV_VIS  = []
  FOR K = 1, 19 DO BEGIN
     
     ; AVOID GASEOUS ABSORPTION BAND
     I = WHERE(K_GAS EQ K)
     IF I[0] NE -1 THEN CONTINUE

     BK = GET_SENSOR_BAND_INDEX(TEMP_SENSOR,K,VERBOSE=VERBOSE)
     IF BK LT 0 THEN CONTINUE ELSE BEGIN
       WAVK     = GET_SENSOR_BAND_NAME(VIC_SENSOR,BK)
       BAND_VIS = [BAND_VIS, BK]
       WAV_VIS  = [WAV_VIS, FLOAT(WAVK)]
     ENDELSE
  ENDFOR
  NB_BANDS_VIS=N_ELEMENTS(BAND_VIS)

  IF NB_BANDS_VIS EQ 0 THEN BEGIN
    PRINT, FCT_NAME+': ERROR, NO VISIBLE BAND <= 885 NM'
    RETURN,-1
  ENDIF

;--------------------------------
; CREATE OUTPUT FOLDER IF IT DOESN'T EXIST

  RES = FILE_INFO(OUTPUT_FOLDER)
  IF RES.EXISTS NE 1 OR RES.DIRECTORY NE 1 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+": OUTPUT FOLDER DOESN'T EXIST, CREATING"
    FILE_MKDIR,OUTPUT_FOLDER
  ENDIF

;-----------------------------------------
; CHECKS INPUT CRITERIA ARE OK

  CP_LIMIT = FLOAT(CLOUD_PERCENTAGE)*0.01
  RP_LIMIT = FLOAT(ROI_PERCENTAGE)*0.01
  IF CP_LIMIT GT  1.0 OR CP_LIMIT LT 0.0 OR $
     RP_LIMIT GT  1.0 OR RP_LIMIT LT 0.0 OR $
     WS_MAX   LT  0.0 OR                    $
     CONE_MAX GT  90. OR                    $
     CHL      GT 30.0 OR CHL      LT 0.0 THEN BEGIN
    PRINT, FCT_NAME+': ERROR, CLOUD/ROI/WIND/CONE/CHL CRITERIA OUT OF RANGE'
    RETURN,-1
  ENDIF
  
  YEAR = STRTRIM(YEAR,2)

;-----------------------------------------
; DEFINE INPUT/OUTPUT FILES

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': DEFINING INPUT/OUTPUT FILES'
  SITE_FILE     = GET_DIMITRI_LOCATION('SITE_DATA')
  DB_FILE       = GET_DIMITRI_LOCATION('DATABASE')
  DL            = GET_DIMITRI_LOCATION('DL')
  MAIN_DIRC     = GET_DIMITRI_LOCATION('DIMITRI')
  RTM_DIR       = FILEPATH(VIC_SENSOR, ROOT_DIR=GET_DIMITRI_LOCATION('RTM'))
  MARINE_DIR    = GET_DIMITRI_LOCATION('MARINE')

  IF KEYWORD_SET(PIX) THEN BEGIN
    VIC_IFILE = STRING(MAIN_DIRC+'Input'+DL+'Site_'+VIC_REGION+DL+VIC_SENSOR+DL+'Proc_'+VIC_PROC_VER+DL+VIC_SENSOR+'_TOA_REF_PIX.dat')
    OFILE_DAT     = STRING(OUTPUT_FOLDER+DL+'GLINT_CAL_'+VIC_REGION+'_'+VIC_SENSOR+'_'+VIC_PROC_VER+'_PIX.dat')
  ENDIF ELSE BEGIN
    VIC_IFILE = STRING(MAIN_DIRC+'Input'+DL+'Site_'+VIC_REGION+DL+VIC_SENSOR+DL+'Proc_'+VIC_PROC_VER+DL+VIC_SENSOR+'_TOA_REF.dat') 
  ENDELSE
  OFILE_AVG_DAT   = STRING(OUTPUT_FOLDER+DL+'GLINT_CAL_'+VIC_REGION+'_'+VIC_SENSOR+'_'+VIC_PROC_VER+'_AVG.dat')
  OFILE_AVG_CSV   = STRING(OUTPUT_FOLDER+DL+'GLINT_CAL_'+VIC_REGION+'_'+VIC_SENSOR+'_'+VIC_PROC_VER+'_AVG.csv')
  OFILE_STAT_CSV  = STRING(OUTPUT_FOLDER+DL+'GLINT_CAL_'+VIC_REGION+'_'+VIC_SENSOR+'_'+VIC_PROC_VER+'_STAT.csv')
  VIC_LOG         = STRING(OUTPUT_FOLDER+DL+'GLINT_CAL_LOG.txt')

;-----------------------------------------
; CHECK DIMITRI DATABASE EXISTS

  TEMP = FILE_INFO(DB_FILE)
  IF TEMP.EXISTS EQ 0 THEN BEGIN
    PRINT, FCT_NAME+': ERROR, DIMITRI DATABASE FILE DOES NOT EXIST'
    RETURN,-1
  ENDIF

;-----------------------------------------
; CHECK INPUT SAV FILE EXISTS

  TEMP = FILE_INFO(VIC_IFILE)
  IF TEMP.EXISTS EQ 0 THEN BEGIN
    PRINT, FCT_NAME+': ERROR, INPUT SAV FILE DOES NOT EXIST'
    RETURN,-1
  ENDIF

;-----------------------------------------
; RECORD THIS PROCESSING REQUEST IN A LOG

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+": WRITTING LOG FILE"
  TMP_DATE = SYSTIME()
  TMP_DATE = STRING(STRMID(TMP_DATE,8,2)+'-'+STRMID(TMP_DATE,4,3)+'-'+STRMID(TMP_DATE,20,4)+' '+STRMID(TMP_DATE,11,8))
  TEMP = FILE_INFO(VIC_LOG)
  IF TEMP.EXISTS EQ 0 THEN BEGIN
    OPENW, LUNLOG,VIC_LOG,/GET_LUN
    PRINTF,LUNLOG,'DATE;REGION;SENSOR;PROC_VER;YEAR;CLOUD_PERCENTAGE;ROI_PERCENTAGE;WS_MAX;CONE_MAX;WAVREF;ABS_CALREF;CLIM;CHL;TAU865;AER;PIX'
  ENDIF ELSE OPENW,LUNLOG,VIC_LOG,/GET_LUN,/APPEND

  PRINTF,LUNLOG,FORMAT='(5(A,1H;),4(F6.3,1H;),(F8.2,1H;),(F6.3,1H;),(A,1H;),2(F6.3,1H;),(A,1H;),A)',$
  TMP_DATE,VIC_REGION,VIC_SENSOR,VIC_PROC_VER,YEAR,CP_LIMIT,RP_LIMIT,WS_MAX,CONE_MAX,WAVREF,ABS_CALREF,STRTRIM(KEYWORD_SET(CLIM),2),CHL,TAUA_865_CLIM,AER,STRTRIM(KEYWORD_SET(PIX),2)

  FREE_LUN,LUNLOG

;-----------------------------------------
; COMPUTE ROI AREA IN KM^2

  ICOORDS = GET_SITE_COORDINATES(VIC_REGION,SITE_FILE,VERBOSE=VERBOSE)

  IF ICOORDS[0] EQ -1 THEN BEGIN
    PRINT,FCT_NAME+': ERROR, REGION COORDINATES NOT FOUND'
    RETURN,-1
  ENDIF

  ROI_X     = GREAT_CIRCLE_DISTANCE(ICOORDS[0],ICOORDS[2],ICOORDS[0],ICOORDS[3],/DEGREES,VERBOSE=VERBOSE)
  ROI_Y     = GREAT_CIRCLE_DISTANCE(ICOORDS[0],ICOORDS[2],ICOORDS[1],ICOORDS[2],/DEGREES,VERBOSE=VERBOSE)
  ROI_AREA  = FLOAT(ROI_X)*FLOAT(ROI_Y)
  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': COMPUTED ROI AREA = ',ROI_AREA

;-----------------------------------------
; GET PIXEL AREA RESOLUTIONS OF SENSOR

  SPX_AREA = (SENSOR_PIXEL_SIZE(VIC_SENSOR,/AREA,VERBOSE=VERBOSE))[0]

;-----------------------------------------
; DEFINE ROI PIX THRESHOLD

  PX_THRESH  = FLOOR(DOUBLE(RP_LIMIT*ROI_AREA)/DOUBLE(SPX_AREA))
  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': COMPUTED PX_THRESHOLDS = ',PX_THRESH

;-----------------------------------------
; ROICOVERAGE CHECK

  IF RP_LIMIT GE 1.0 THEN BEGIN
    ROICOVER = 1
    PX_THRESH = 1
  ENDIF ELSE ROICOVER = 0

;----------------------------------------
; READ THE DIMITRI DATABASE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': READING DIMITRI DATABASE'
  DB_TEMPLATE = GET_DIMITRI_TEMPLATE(1,/TEMPLATE)
  DB_DATA     = READ_ASCII(DB_FILE,TEMPLATE=DB_TEMPLATE)

;----------------------------------------
; SELECT DATA UPON ROI, CLOUD AND YEAR CRITERIA
  
  IF YEAR EQ 'ALL' THEN CYEAR  = '*' ELSE CYEAR = YEAR

  RES = WHERE(STRCMP(DB_DATA.REGION,VIC_REGION)               EQ 1 AND $
              STRCMP(DB_DATA.SENSOR,VIC_SENSOR)               EQ 1 AND $
              STRCMP(DB_DATA.PROCESSING_VERSION,VIC_PROC_VER) EQ 1 AND $
              STRMATCH(STRTRIM(DB_DATA.YEAR,2),CYEAR)              AND $  
              DB_DATA.ROI_COVER  GE ROICOVER                       AND $
              DB_DATA.NUM_ROI_PX GE PX_THRESH                      AND $
              (DB_DATA.MANUAL_CS EQ 0. OR (DB_DATA.MANUAL_CS LT 1. AND DB_DATA.AUTO_CS GT -1.0 AND DB_DATA.AUTO_CS LE CP_LIMIT + TOL)))

  IF RES[0] EQ -1 THEN BEGIN
    PRINT, FCT_NAME+': WARNING, NO SENSOR DATA FOUND WITHIN PIXEL THRESHOLD OR CLOUD CONDITION, RETURN'
    RETURN,0
  ENDIF

;----------------------------------------
; RESTORE THE SENSOR TOA DATA

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': RESTORING SENSOR DATA'
  RESTORE,VIC_IFILE

  IF KEYWORD_SET(PIX) THEN BEGIN
    SENSOR_L1B_REF     = SENSOR_L1B_REF_PIX
    SENSOR_L1B_REF_PIX = 0
    NUM_NON_REF        = 5 + 1 + 6
    IO                 = 6
    IP                 = 7  
    IWZ                = 9
    IWM                = 10
  ENDIF ELSE BEGIN
    NUM_NON_REF        = 5 + 12 ;NUMBER OF VALUES BEFORE REFLECTANCE WITHIN ARRAY IN .DAT FILE
    IO                 = 5
    IP                 = 7
    IWZ                = 11
    IWM                = 13 
  ENDELSE

;----------------------------------------
; SEARCH SENSOR TOA CORRESPONDING TO
; DATABASE SELECTION

  GD_ID = []
  MONTH = []
  FOR GD = 0l,N_ELEMENTS(RES)-1 DO BEGIN
     ID = WHERE(ABS(SENSOR_L1B_REF[0,*]-DB_DATA.DECIMAL_YEAR[RES[GD]]) LE TOL)
     IF ID[0] GT -1 THEN BEGIN 
       GD_ID = [GD_ID,ID]
       MONTH = [MONTH,DB_DATA.MONTH[RES[GD]]]
     ENDIF
  ENDFOR
  
  IF N_ELEMENTS(GD_ID) EQ 0 THEN BEGIN
    PRINT, FCT_NAME+': ERROR, NO SENSOR DATA MATCHING THE DATABASE SELECTION, RETURN'
    RETURN, -1
  ENDIF

;----------------------------------------
; ASSIGN STANDARD VALUE TO MISSING AUX DATA

  OZONE = REFORM(SENSOR_L1B_REF[IO,GD_ID])
  ID = WHERE(OZONE EQ BADVAL)
  IF ID[0] NE -1 THEN OZONE[ID]=REF_O3

  PRESSURE = REFORM(SENSOR_L1B_REF[IP,GD_ID])
  ID = WHERE(PRESSURE EQ BADVAL)
  IF ID[0] NE -1 THEN PRESSURE[ID]=REF_P

  WIND_SPEED = REFORM(SQRT(SENSOR_L1B_REF[IWZ,GD_ID]*SENSOR_L1B_REF[IWZ,GD_ID]+SENSOR_L1B_REF[IWM,GD_ID]*SENSOR_L1B_REF[IWM,GD_ID]))
  ID = WHERE(SENSOR_L1B_REF[IWZ,GD_ID] EQ BADVAL OR SENSOR_L1B_REF[IWM,GD_ID] EQ BADVAL)  
  IF ID[0] NE -1 THEN WIND_SPEED[ID]=REF_WIND
  
;----------------------------------------
; DEFINE ANGLES
 
  VZA = REFORM(SENSOR_L1B_REF[1,GD_ID])
  SZA = REFORM(SENSOR_L1B_REF[3,GD_ID])
  RAA = ACOS(COS(REFORM(SENSOR_L1B_REF[2,GD_ID]-SENSOR_L1B_REF[4,GD_ID])*!DTOR))*!RADEG
 
  GLINT_ANGLE = ACOS(COS(SZA*!DTOR)*COS(VZA*!DTOR)-SIN(SZA*!DTOR)*SIN(VZA*!DTOR)*COS(RAA*!DTOR))*!RADEG

;----------------------------------------
; DEFINE CLOUD MASK; 0 BY DEFAULT FOR AVERAGED INPUT

  IF KEYWORD_SET(PIX) THEN CLOUD_MASK = REFORM(SENSOR_L1B_REF[5,GD_ID]) ELSE CLOUD_MASK=INTARR(N_ELEMENTS(GD_ID))

;----------------------------------------
; SELECT DATA UPON WIND, CLOUD MASK, CONE ANGLE CONDITIONS AND CLOUD MASK

  ID =  WHERE(WIND_SPEED LE WS_MAX AND GLINT_ANGLE LE CONE_MAX AND CLOUD_MASK EQ 0) 
  IF ID[0] EQ -1 THEN BEGIN
    PRINT, FCT_NAME+': WARNING, NO SENSOR DATA FOUND WITH CLEAR SKY OR LOW WIND SPEED OR CONE ANGLE, RETURN'
    RETURN, 0
  ENDIF

  GD_ID      = GD_ID[ID]
  MONTH      = MONTH[ID]
  OZONE      = OZONE[ID]
  PRESSURE   = PRESSURE[ID]
  WIND_SPEED = WIND_SPEED[ID]
  VZA        = VZA[ID]
  SZA        = SZA[ID]
  RAA        = RAA[ID]
  GLINT_ANGLE = GLINT_ANGLE[ID]

;----------------------------------------
; READ RTM LUT

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': READING RAYLEIGH REFLECTANCE LUT'
  STATUS = READ_RAYLEIGH(FILEPATH('RHOR_'+VIC_SENSOR+'.txt', ROOT_DIR=RTM_DIR))

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': READING XC LUT'
  STATUS = READ_XC(FILEPATH('XC_'+VIC_SENSOR+'_'+STRTRIM(AER,2)+'.txt', ROOT_DIR=RTM_DIR))

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': READING TAUA LUT'
  STATUS = READ_TAUA(FILEPATH('TAUA_'+VIC_SENSOR+'_'+STRTRIM(AER,2)+'.txt', ROOT_DIR=RTM_DIR))

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': READING TOTAL TRANSMITTANCE LUT'
  STATUS = READ_TRA(FILEPATH('TRA_DOWN_'+VIC_SENSOR+'_'+STRTRIM(AER,2)+'.txt', ROOT_DIR=RTM_DIR),$
            FILEPATH('TRA_UP_'  +VIC_SENSOR+'_'+STRTRIM(AER,2)+'.txt', ROOT_DIR=RTM_DIR))

;----------------------------------------
; READ CHL CLIMATOLOGY FILE

  IF KEYWORD_SET(CLIM) THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': READING CHLOROPHYLL CLIMATOLOGY'
    CHL_CLIM_F = FILEPATH('CHL_CLIM_'+VIC_REGION+'.txt', ROOT_DIR=MARINE_DIR)
    CHL_CLIM   = (READ_ASCII(CHL_CLIM_F)).(0)
  ENDIF

;----------------------------------------
; ASSIGN CHL VALUES

  IF KEYWORD_SET(CLIM) THEN BEGIN
    CHL = DBLARR(N_ELEMENTS(GD_ID))
    FOR M=1, 12 DO BEGIN
       INDEX=WHERE(MONTH EQ M)
       IF INDEX[0] NE -1 THEN CHL[INDEX] = CHL_CLIM[M-1]
    ENDFOR
  ENDIF ELSE CHL=MAKE_ARRAY(N_ELEMENTS(GD_ID),/DOUBLE,VALUE=CHL)

;----------------------------------------
; COMPUTE MARINE SIGNAL WRT CHLOROPHYLL
    
  R0_REF   = R0_MM01(WAVREF, CHL, SZA)
  RHOW_REF = 0.5287*R0_REF ; rhow =PI*Rgoth/Q*R(0-)  Q=PI

;----------------------------------------
; APPLY ABSOLUTE CALIBRATION AT BREF

  SENSOR_L1B_REF[NUM_NON_REF+BREF,GD_ID] /= ABS_CALREF

;----------------------------------------
; CORRECT SIGNAL FOR OZONE AT BREF

  AIR_MASS = REFORM(1./COS(SZA*!DTOR)+1./COS(VZA*!DTOR))

  TO3_REF_REF = (GET_OZONE_TRANSMISSION(WAVREF,VERBOSE=VERBOSE))[0]
  TGS         = (GET_GASEOUS_TRANSMISSION(WAVREF,VERBOSE=VERBOSE))[0]
  TAUO3_REF   = -0.5*ALOG((TO3_REF_REF>0.000001)/TGS)

  TO3_REF     = EXP(-TAUO3_REF*(OZONE/REF_O3)*AIR_MASS)

  MI_REF_OZ   = REFORM(SENSOR_L1B_REF[NUM_NON_REF+BREF,GD_ID])/TO3_REF

;----------------------------------------
; ASSIGN TAUA VALUE

  TAUA_865 = MAKE_ARRAY(N_ELEMENTS(GD_ID),/FLOAT,VALUE=TAUA_865_CLIM)

;----------------------------------------
; PROPAGATE TAU AT BREF

  TAUA_REF = SPECTRAL_DEP(TAUA_865, B865, BREF)

;----------------------------------------
; COMPUTE DIRECT TRANSMITTANCE AT BREF, WITH CORRECTION FOR PRESSURE

  TAUR_REF = TAUR_HT74(WAVREF) 
  TD_REF = EXP(-(TAUA_REF+TAUR_REF*PRESSURE/REF_P)*AIR_MASS)

;----------------------------------------
; ITERATE ON WIND SPEED INVERSION

  FOR ITER=0, 5 do BEGIN
;----------------------------------------
; COMPUTE RAYLEIGH AT BREF

     RHOR_REF = COMPUTE_RAYLEIGH(WIND_SPEED, RAA, VZA, SZA, BREF, /COS) 

;----------------------------------------
; COMPUTE RHOPATH AT BREF AND CORRECT FOR PRESSURE

     XC_REF = COMPUTE_XC(WIND_SPEED, RAA, VZA, SZA, TAUA_REF, BREF, /COS)
     RHOPATH_REF = XC_REF*RHOR_REF
     RHOPATH_REF = RHOPATH_REF*(1.+TAUR_REF/(TAUR_REF+TAUA_REF)*(PRESSURE/REF_P-1.))

;----------------------------------------
; COMPUTE TOTAL (DIRECT+DIFFUSE) TRANSMITTANCE AND CORRECT FOR PRESSURE

     TRANS_REF = COMPUTE_TRA(WIND_SPEED, VZA, SZA, TAUA_REF, BREF, /COS)
     TRANS_REF = TRANS_REF*EXP(-0.5*TAUR_REF*AIR_MASS*(PRESSURE/REF_P-1.))

;----------------------------------------
; COMPUTE GLINT FROM BREF SIGNAL
     
     RHO_G = (MI_REF_OZ - RHOPATH_REF - TRANS_REF*RHOW_REF)/ TD_REF

;----------------------------------------
; INVERSE WIND SPEED FROM GLINT REFLECTANCE
  
     WIND_SPEED = INV_RHO_GLINT_CM54(RHO_G, WIND_SPEED, RAA, VZA, SZA, WAVREF)

     ID = WHERE(WIND_SPEED GE 0.)
       IF ID[0] EQ -1 THEN BEGIN
       PRINT, FCT_NAME+': WARNING, NO SENSOR DATA FOUND WITH POSITIVE INVERSED WIND AT BREF'
       RETURN, 0
     ENDIF
 
;----------------------------------------
; UPDATE ARRAYS ACCORDING TO RHO_G TEST

     GD_ID      = GD_ID[ID]
     OZONE      = OZONE[ID]
     PRESSURE   = PRESSURE[ID]
     WIND_SPEED = WIND_SPEED[ID]
     VZA        = VZA[ID]
     SZA        = SZA[ID]
     RAA        = RAA[ID]
     GLINT_ANGLE = GLINT_ANGLE[ID]
     AIR_MASS   = AIR_MASS[ID]
     TAUA_865   = TAUA_865[ID]
     TAUA_REF   = TAUA_REF[ID]
     MI_REF_OZ  = MI_REF_OZ[ID]
     RHO_G      = RHO_G[ID]
     TD_REF     = TD_REF[ID]
     CHL        = CHL[ID]
     RHOW_REF   = RHOW_REF[ID]
 
  ENDFOR

;----------------------------------------
; DEFINE OUPUT ARRAY

  VIC_COEF = MAKE_ARRAY([NUM_NON_REF+NB_BANDS*2, N_ELEMENTS(GD_ID)], /FLOAT, VALUE=BADVAL)
  VIC_COEF[0:NUM_NON_REF-1,*] = SENSOR_L1B_REF[0:NUM_NON_REF-1,GD_ID]

;----------------------------------------
; LOOP ON VIS BAND 
 
  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': STARTING LOOP OVER BANDS <=865 NM'
  FOR K=0, NB_BANDS_VIS-1 DO BEGIN

     BK   = BAND_VIS[K]
     WAVK = WAV_VIS[K] 

;----------------------------------------
; CORRECT SIGNAL FOR OZONE
 
     TO3_K_REF = (GET_OZONE_TRANSMISSION(WAVK,VERBOSE=VERBOSE))[0]
     TGS       = (GET_GASEOUS_TRANSMISSION(WAVK,VERBOSE=VERBOSE))[0]
     TAUO3_K   = -0.5*ALOG((TO3_K_REF>0.000001)/TGS)
  
     TO3_K     = EXP(-TAUO3_K*(OZONE/REF_O3)*AIR_MASS)
  
     MI_K_OZ   = REFORM(SENSOR_L1B_REF[NUM_NON_REF+BK,GD_ID])/TO3_K

;----------------------------------------
; COMPUTE MARINE SIGNAL WRT CHLOROPHYLL
    
     R0_K   = R0_MM01(WAVK, CHL, SZA)
     RHOW_K = !PI*0.5287/3.*R0_K ; rhow =PI*Rgoth/Q*R(0-)

;----------------------------------------
; COMPUTE RAYLEIGH OPTICAL THICKNESS AND REFLECTANCE
  
     TAUR_K = TAUR_HT74(WAVK) 
     RHOR_K = COMPUTE_RAYLEIGH(WIND_SPEED, RAA, VZA, SZA, BK, /COS) 
   
;----------------------------------------
; PROPAGATE TAU AT BAND BK

     TAUA_K = SPECTRAL_DEP(TAUA_865, B865, BK)

;----------------------------------------
; COMPUTE RHOPATH AT BAND BK AND CORRECT FOR PRESSURE

     XC_K = COMPUTE_XC(WIND_SPEED, RAA, VZA, SZA, TAUA_K, BK, /COS)
     RHOPATH_K = RHOR_K*XC_K
     RHOPATH_K = RHOPATH_K*(1.+TAUR_K/(TAUR_K+TAUA_K)*(PRESSURE/REF_P-1.))

;----------------------------------------
; COMPUTE TOTAL (DIRECT+DIFFUSE) TRANSMITTANCE AND CORRECT FOR PRESSURE

     TRANS_K = COMPUTE_TRA(WIND_SPEED, VZA, SZA, TAUA_K, BK, /COS)
     TRANS_K = TRANS_K*EXP(-0.5*TAUR_K*AIR_MASS*(PRESSURE/REF_P-1.))
    
;----------------------------------------
; COMPUTE DIRECT TRANSMITTANCE WITH CORRECTION FOR PRESSURE

     TD_K = EXP(-(TAUA_K+TAUR_K*PRESSURE/REF_P)*AIR_MASS)

;----------------------------------------
; COMPUTE TOTAL TOA SIGNAL
     
     I_K     =  RHOPATH_K + TRANS_K*RHOW_K + TD_K*RHO_G*FRESNEL(RAA, VZA, SZA, WAVK)/FRESNEL(RAA, VZA, SZA, WAVREF)
  
;----------------------------------------
; COMPUTE VICARIOUS COEFFICIENTS
; FOLLOWING HAGOLLE ET AL 1999 

     VIC_COEF[NUM_NON_REF+BK,*] = I_K/MI_K_OZ
 
;----------------------------------------
; COMPUTE UNCERTAINTY (INTERBAND)
; 1% MAX ACCORDING TO HAGOLLE ET AL 1999
 
     VIC_COEF[NUM_NON_REF+NB_BANDS+BK,*] = 0.01*VIC_COEF[NUM_NON_REF+BK,*]

;----------------------------------------
; RETRIEVE AEROSOL OPTICAL THICKNESS AT 865 NM

   IF BK EQ B865 THEN BEGIN
     RHOPATH_865 = MI_K_OZ-TRANS_K*RHOW_K-TD_K*RHO_G
     RHOPATH_865_PSTD=RHOPATH_865*(1.-TAUR_K/(TAUR_K+TAUA_K)*(PRESSURE/REF_P-1.))
     TAUA_865_CHECK = INVERSE_XC(WIND_SPEED, RAA, VZA, SZA,RHOPATH_865_PSTD/RHOR_K,BK, /COS)
   ENDIF

  ENDFOR ; ENDLOOP ON VIS BANDS  

;----------------------------------------
; DEFINE ABSOLUTE CALIBRATION AT BREF (OTHERWHISE IT WOULD BE 1) 

  VIC_COEF[NUM_NON_REF+BREF,*] /= ABS_CALREF

;----------------------------------------
; CHECK RETRIEVED AEROSOL OPTICAL THICKNESS AT 865 NM

  INDEX = WHERE(ABS(TAUA_865_CHECK - TAUA_865_CLIM) LE 0.02)
  IF INDEX[0] EQ -1 THEN BEGIN
    PRINT, FCT_NAME+':  WARNING, NO SENSOR DATA FOUND WITH PROPER TAUA_865'
    RETURN, 0
  ENDIF
  VIC_COEF = VIC_COEF[*,INDEX]

;----------------------------------------
; SAVE VICARIOUS COEFFICIENTS 

  IF KEYWORD_SET(PIX) THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': SAVING PIX VICARIOUS FACTOR AS SAV FILE'
    SAVE, VIC_COEF, FILENAME=OFILE_DAT
  ENDIF

;----------------------------------------
; AVERAGE PIXEL-BY-PIXEL VICARIOUS FILE
 
  NUM_NON_REF_A = 5+12
  
  INDEX = UNIQ(VIC_COEF[0,*])
  N_UNIQ    = N_ELEMENTS(INDEX)

  IF KEYWORD_SET(PIX) THEN BEGIN
    VIC_COEF_AVG = MAKE_ARRAY([NUM_NON_REF_A+NB_BANDS*2, N_UNIQ], /FLOAT, VALUE=BADVAL)
    FOR I=0, N_UNIQ-1 DO BEGIN
       VIC_COEF_AVG[0:4,I] = VIC_COEF[0:4,INDEX[I]]
       FOR J=0, 5 DO BEGIN
          VIC_COEF_AVG[5+2*J,I]     =   MEAN(VIC_COEF[IO+J,(I GT 0?INDEX[I-1]+1:0):INDEX[I]])
          VIC_COEF_AVG[5+2*J+1,I]   = STDDEV(VIC_COEF[IO+J,(I GT 0?INDEX[I-1]+1:0):INDEX[I]])
       ENDFOR
       FOR B=0, NB_BANDS-1 DO BEGIN
          VIC_COEF_AVG[NUM_NON_REF_A+B,I]          = MEDIAN(VIC_COEF[NUM_NON_REF+B,(I GT 0?INDEX[I-1]+1:0):INDEX[I]],/EVEN)
          VIC_COEF_AVG[NUM_NON_REF_A+NB_BANDS+B,I] = MEDIAN(VIC_COEF[NUM_NON_REF+NB_BANDS+B,(I GT 0 ?INDEX[I-1]+1:0):INDEX[I]],/EVEN)
       ENDFOR
    ENDFOR

  ENDIF ELSE VIC_COEF_AVG = VIC_COEF

;----------------------------------------
; SAVE AVG VICARIOUS COEFFICIENTS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': SAVING AVG VICARIOUS FACTOR AS SAV FILE'
  SAVE, VIC_COEF_AVG, FILENAME=OFILE_AVG_DAT

;----------------------------------------
; WRITE AVG VICARIOUS IN CSV FILE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,FCT_NAME+': SAVING AVG VICARIOUS FACTOR AS A CSV FILE'
  HEADER = ['REGION','SENSOR','PROCESSING_VERSION']
  HEADER = [HEADER, 'TIME','VZA','VAA','SZA','SAA','OZONE_MU','OZONE_SD','PRESSURE_MU','PRESSURE_SD','HUMIDITY_MU','HUMIDITY_SD', $
            'WIND_ZONAL_MU','WIND_ZONAL_SD','WIND_MERID_MU','WIND_MERID_SD','WVAP_MU','WVAP_SD']
  FOR I=0, NB_BANDS-1 DO HEADER = [HEADER,'A_'+WAV_ALL[I]]
  FOR I=0, NB_BANDS-1 DO HEADER = [HEADER,'UCRT_A_'+WAV_ALL[I]]

  HEADER=HEADER+';'
  FORMAT=STRING('('+STRTRIM(N_ELEMENTS(HEADER),2)+'(A))')

  IF SIZE(VIC_COEF_AVG,/N_DIMENSIONS) EQ 2 THEN N= (SIZE(VIC_COEF_AVG,/DIMENSIONS))[1] ELSE N =1

  A_REGION = MAKE_ARRAY(N,/STRING, VALUE=VIC_REGION)
  A_SENSOR = MAKE_ARRAY(N,/STRING, VALUE=VIC_SENSOR)
  A_PROC   = MAKE_ARRAY(N,/STRING, VALUE=VIC_PROC_VER)
  TAB = STRTRIM([TRANSPOSE(A_REGION), TRANSPOSE(A_SENSOR), TRANSPOSE(A_PROC), STRTRIM(VIC_COEF_AVG,2)]+';',2)
  OPENW,    LUNAVG, OFILE_AVG_CSV,/GET_LUN
  PRINTF,   LUNAVG, FORMAT=FORMAT, HEADER
  PRINTF,   LUNAVG, FORMAT=FORMAT, TAB
  FREE_LUN, LUNAVG

;----------------------------------------
; MEAN COEFFICIENT OVER THE TIME-SERIES

  MEDI_COEF = FLTARR(NB_BANDS_VIS)
  MEAN_COEF = FLTARR(NB_BANDS_VIS)
  STDD_COEF = FLTARR(NB_BANDS_VIS)
  MEAN_UCRT = FLTARR(NB_BANDS_VIS)
  
  OPENW, LUNCSV, OFILE_STAT_CSV,/GET_LUN
  PRINTF,LUNCSV,'WAV;MEDIAN_COEF;MEAN_COEF;STD_COEF;MEAN_UCRT;N'
  
  FOR K=0, NB_BANDS_VIS-1 DO BEGIN
     BK   = BAND_VIS[K]
     MEDI_COEF[K] = MEDIAN(VIC_COEF_AVG[NUM_NON_REF_A+BK,*],/EVEN)
     MEAN_COEF[K] =   MEAN(VIC_COEF_AVG[NUM_NON_REF_A+BK,*])
     STDD_COEF[K] = STDDEV(VIC_COEF_AVG[NUM_NON_REF_A+BK,*])
     MEAN_UCRT[K] =   MEAN(VIC_COEF_AVG[NUM_NON_REF_A+NB_BANDS+BK,*])
     PRINTF,LUNCSV,FORMAT='(F6.2,1H;,4(F6.3,1H;),I)', WAV_VIS[K],MEDI_COEF[K],MEAN_COEF[K],STDD_COEF[K],MEAN_UCRT[K],N_UNIQ
  ENDFOR

  CLOSE, LUNCSV

;-----------------------
; GET CURRENT DEVICE TYPE FOR PLOT

  IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME+': CHANGING TO THE ZBUFFER'
  MACHINE_WINDOW = !D.NAME
  SET_PLOT, 'Z'
  DEVICE, SET_RESOLUTION=[700,400],SET_PIXEL_DEPTH=24
  ERASE  
  DEVICE, DECOMPOSED = 0
  LOADCT, 39
 
;-----------------------
; DEFINE FILLED CIRCLE SYMBOL

  A = FINDGEN(32) * (!PI*2/31.)
  USERSYM, COS(A), SIN(A), /FILL
 
;-----------------------
; PLOT AVG VICARIOUS COEF AGAINST DOY

  YMIN = 0.8
  YMAX = 1.2
  XMIN = FIX(MIN(VIC_COEF_AVG[0,*]))
  XMAX = CEIL(MAX(VIC_COEF_AVG[0,*]))
  rho  ='!4q!X'

  FOR K=0, NB_BANDS_VIS-1 DO BEGIN

     BK   = BAND_VIS[K]
     WAVK = WAV_VIS[K]
    
     PLOT, VIC_COEF_AVG[0,*], VIC_COEF_AVG[NUM_NON_REF_A+BK,*], COLOR=0, BACKGROUND=255, PSYM=8,$
     YTITLE = rho+'_sim/'+rho+'_obs('+STRTRIM(FIX(WAVK),2)+')', XTITLE = 'DECIMAL YEAR',  XRANGE = [XMIN,XMAX], YRANGE = [YMIN,YMAX],$
     XTICKFORMAT='((F8.3))'

     TEMP = TVRD(TRUE=1)
     JPEG = STRJOIN(['GLINT_CAL',VIC_REGION,VIC_SENSOR,VIC_PROC_VER,STRTRIM(FIX(WAVK),2)],'_')+'.JPG'
     OUT_JPEG=FILEPATH(JPEG, ROOT_DIR=OUTPUT_FOLDER)
     WRITE_JPEG,OUT_JPEG,TEMP,TRUE=1,QUALITY=100
     ERASE

  ENDFOR

;-----------------------
; PLOT MEAN VICARIOUS COEF AGAINST WAVELENGTH

  B = WHERE(BAND_VIS EQ BREF)
  PLOT, WAV_VIS[B:NB_BANDS_VIS-1], MEAN_COEF[B:NB_BANDS_VIS-1], COLOR=0, BACKGROUND=255, PSYM=-8,$
  YTITLE = rho+'_sim/'+rho+'_obs', XTITLE = 'WAVELENGTH (NM)', YRANGE = [YMIN, YMAX]
  ERRPLOT, WAV_VIS[B:NB_BANDS_VIS-1], (MEAN_COEF-0.5*STDD_COEF)[B:NB_BANDS_VIS-1],(MEAN_COEF+0.5*STDD_COEF)[B:NB_BANDS_VIS-1], COLOR=0  

  TEMP = TVRD(TRUE=1)
  JPEG = STRJOIN(['GLINT_CAL',VIC_REGION,VIC_SENSOR,VIC_PROC_VER],'_')+'_MEAN.JPG'
  OUT_JPEG=FILEPATH(JPEG, ROOT_DIR=OUTPUT_FOLDER)
  WRITE_JPEG,OUT_JPEG,TEMP,TRUE=1,QUALITY=100
  ERASE

;-----------------------------------------------
; RETURN DEVISE WINDOW TO NOMINAL SETTING

  IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME+': RESETTING DEVICE WINDOW PROPERTIES'
  SET_PLOT, MACHINE_WINDOW

  IF KEYWORD_SET(VERBOSE) THEN PRINT, FCT_NAME+': SUCCESSFULL'
  RETURN,1

END
