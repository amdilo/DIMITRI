;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      CLOUD_MODULE_MERIS_DESERT       
;* 
;* PURPOSE:
;*      THIS FUNCTION PERFORMS THE CLOUDSCREENING ALGORITHM DEVELOPED FOR THE MERIS SENSOR   
;*      OVER DESERT SITE. 
;* 
;* CALLING SEQUENCE:
;*      RES = CLOUD_MODULE_MERIS_DESERT(SITE_TYPE,GCARBON_REF,TOA_GEO)    
;* 
;* INPUTS:
;*      SITE_NAME  - A STRING OF THE DIMITRI VALIDATION SITE NAME '
;*      GCARBON_REF- A FLOAT ARRAY CONTAINING THE TOA REFLECTANCE AT 443,705,750 AND 
;*                   865NM [NB_PIXELS,RHO_BANDS]
;*      CS_ANG     - A 4 ELEMENT ARRAY CONTAINING THE SZA, SAA, VZA AND VAA VALUES 
;*
;* KEYWORDS:
;*      VERBOSE    - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      CLASS_PIXELS - AN INTEGER ARRAY OF SIXE NUMBER OF PIXELS, 0 MEANS CLEAR PIXEL, 
;*                     1 MEANS CLOUDY
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      18 NOV 2014 - NCG / MAGELLIUM   - DIMITRI-MAG V3.0
;*
;* VALIDATION HISTORY:
;*      20 JAN 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*      30 MAR 2015 - NCG / MAGELLIUM      - WINDOWS 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL (DIMITRI V4.0) 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION CLOUD_MODULE_MERIS_DESERT, SITE_NAME, GCARBON_REF_ALL, CS_ANG, CS_CLASSIF_MATRIX=CS_CLASSIF_MATRIX, VERBOSE=VERBOSE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'CLOUD_MODULE_MERIS_DESERT: STARTING CLOUD SCREENING'

  STATUS_OK = GET_DIMITRI_LOCATION('STATUS_OK')
  STATUS_ERROR = GET_DIMITRI_LOCATION('STATUS_ERROR')

  MISSING_VALUE_LONG   = LONG(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))
  MISSING_VALUE_INT    = FIX(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))
  MISSING_VALUE_FLOAT    = FLOAT(GET_DIMITRI_LOCATION('NCDF_MISSING_VALUE'))
  
;-------------------------
; RESTORE BRIGHT LUT INFORMATION

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'CLOUD_MODULE_MERIS_DESERT: RESTORING BRIGHT LUT INFORMATION'
  TEMP_LUT = GET_DIMITRI_LOCATION('BRIGHT_LUT')
  RESTORE,TEMP_LUT

;-------------------------
; DEFINE SNOW AND CLOUD THRESHOLDS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'CLOUD_MODULE_MERIS_DESERT: DEFINING THRESHOLDS AND PARAMETERS'
  SNOW_THRESH   = 1.0
  CLOUD_THRESH  = 0.8

; comment BBT : rajouter test pression avecx
  B3 = 1  ; VIS
  B4 = 5  ; NIR
  
  B1 = 0  ; bright
  B2 = 2  ; rededge
  B5 = 3  ; O2
  B6 = 4  ; 02
  
 ;----------------------------
  ; ADDED BBT
  ; On s assure que tous les canaux sont valides
  ; on ne conserve que les pixels non perturb√©s dans les canaux choisis
  
   NB_PIXELS_ALL     = N_ELEMENTS(GCARBON_REF_ALL[*,0])
   NBVALID           = INTARR(NB_PIXELS_ALL)
   
   CS_CLASSIF_MATRIX= MAKE_ARRAY(NB_PIXELS_ALL,2,/LONG,VALUE=MISSING_VALUE_LONG)
   
  IDX_VALID  = WHERE ( GCARBON_REF_ALL[*,B1] NE MISSING_VALUE_FLOAT AND $
                       GCARBON_REF_ALL[*,B2] NE MISSING_VALUE_FLOAT AND $ 
                       GCARBON_REF_ALL[*,B3] NE MISSING_VALUE_FLOAT AND $
                       GCARBON_REF_ALL[*,B4] NE MISSING_VALUE_FLOAT, NB_PIXELS)
                       
  IF NB_PIXELS EQ 0 THEN BEGIN
    PRINT,'CLOUD_MODULE_MERIS_DESERT: ERROR, NO VALID PIXELS !!!'
    RETURN, STATUS_ERROR
  ENDIF

  CS_CLASSIF_MATRIX[IDX_VALID,0] = IDX_VALID

 ;
 ; VALID PIXELS
 ;
 
; cree tableau GCARBON_REF

  TEMP_DIMS     = SIZE(GCARBON_REF_ALL,/DIMENSIONS)
  NBCAN=TEMP_DIMS[1]
  
  GCARBON_REF = GCARBON_REF_ALL(IDX_VALID,*)
 
  COL_IND= GCARBON_REF_ALL(*,6)
  LIG_IND= GCARBON_REF_ALL(*,7)
  
  LATITUDE=CS_ANG(IDX_VALID,0)
  LONGITUDE=CS_ANG(IDX_VALID,1)
  
  THETAS=CS_ANG(IDX_VALID,2)
  PHIS  =CS_ANG(IDX_VALID,3)
  THETAV=CS_ANG(IDX_VALID,4)
  PHIV  =CS_ANG(IDX_VALID,5)
  
;-------------------------
; DEFINE PARAMETERS FOR CLOUD SCREENING

;  TEMP_DIMS     = SIZE(GCARBON_REF,/DIMENSIONS)
;  NB_PIXELS     = TEMP_DIMS[0]
  BRIGHT_PIXELS = INTARR(NB_PIXELS)
  CLASS_PIXELS  = INTARR(NB_PIXELS)

  PX_CLEAR = 0
  PX_CLOUD = 1

;  ICLEAR  = 0
;  ICLOUD  = 1
  ISNOW   = 2
  IBRIGHT = 3
  
  ;----------------------------
; DEFINE ARRAY TO HOLD PIXEL CLASSIFICATION

  ;PIXEL_CLASSIFICATION = INTARR(NB_PIXELS)
  BADVAL=0
  NBTEST=2 ; desert + dilate
  
  PIXEL_CLASSIFICATION= MAKE_ARRAY(NBTEST,NB_PIXELS,/INTEGER,VALUE=MISSING_VALUE_INT)
  TOTAL_PIXEL_CLASSIFICATION = MAKE_ARRAY(NB_PIXELS,/INTEGER,VALUE=MISSING_VALUE_INT)
  
 ; BRIGHT PIXEL over OCEAN TEST
  TOA_GEO = MAKE_ARRAY(NB_PIXELS,4,/FLOAT,VALUE=MISSING_VALUE_FLOAT)
  TOA_GEO[*,0] = THETAS
  TOA_GEO[*,1] = THETAV
  TOA_GEO[*,2] = PHIS
  TOA_GEO[*,3] = PHIV
  FOR GCI=0L,NB_PIXELS-1 DO BRIGHT_PIXELS[GCI] = DIMITRI_CLOUD_SCREENING_BRIGHT_RHO(GCARBON_REF[GCI,B1],TOA_GEO[GCI,*],BRIGHT_RHO)
 ;-------------------------
; IF NO BRIGHT PIXELS THEN RETURN ALL PIXELS AS CLEAR

  BRIGHTF = WHERE(BRIGHT_PIXELS EQ 1,BRIGTH_COUNT,COMPLEMENT=NOBRIGHTF, NCOMPLEMENT=NBRIGTH_COUNT)
  
;-----------------------------------------------------------------------------
;ADDED BBT--------------------------------------------------------------------
;-----------------------------------------------------------------------------
;
;READ CLIMATOLOGY OF NIR REFLECTANCE
;
  CLIMREF_PIXEL_CLASSIFICATION = CLOUD_MODIS_CLIMREF_FILTERING(SITE_NAME, LATITUDE, LONGITUDE, CS_ANG(IDX_VALID,2:5), $
  																															GCARBON_REF[*,B3], GCARBON_REF[*,B4], GCARBON_REF[*,B1], VERBOSE=VERBOSE)

  PIXEL_CLASSIFICATION[0,*] = CLIMREF_PIXEL_CLASSIFICATION
  IDX_CLEAR = WHERE(PIXEL_CLASSIFICATION[0,*] EQ PX_CLEAR, COUNT_CLEAR)
  IF COUNT_CLEAR EQ 0 THEN BEGIN
    TOTAL_PIXEL_CLASSIFICATION[*] = PX_CLOUD
    GOTO, SKIP_PASS_3
  ENDIF
                
                
  ;MASK DILATATION  

  TOTAL_PIXEL_CLASSIFICATION = TRANSPOSE(1-PIXEL_CLASSIFICATION[0,*])
  ;FOR IPIX=0L,NB_PIXELS-1 DO BEGIN     
  ;    TOTAL_PIXEL_CLASSIFICATION[IPIX]=(1-PIXEL_CLASSIFICATION[0,IPIX])            
  ;ENDFOR

; FUNCTION CLOUD_MASK_DILATATION( TOTAL_PIXEL_CLASSIFICATION, COL_IND, LIG_IND, IDX_VALID)
  
   IDX_N0 = WHERE(TOTAL_PIXEL_CLASSIFICATION NE 0 ,IDX_COUNT,COMPLEMENT=NIDX_INV, NCOMPLEMENT=NINVCOUNT)
   IF IDX_COUNT NE 0 THEN TOTAL_PIXEL_CLASSIFICATION[IDX_N0]  = 1-PX_CLEAR

   ;on reconstruit l'extrait
   NBCOL=MAX(COL_IND)-MIN(COL_IND)+1
   NBLIG=MAX(LIG_IND)-MIN(LIG_IND)+1
   
   COLO=FIX(COL_IND-MIN(COL_IND))
   LIG=FIX(LIG_IND-MIN(LIG_IND))
        
   ARRAY_OTHERS_MASK = MAKE_ARRAY(NBCOL, NBLIG,/FLOAT,VALUE=0)
   FOR IPIX=0L,NB_PIXELS-1 DO BEGIN           
     ARRAY_OTHERS_MASK[COLO[IDX_VALID[IPIX]], LIG[IDX_VALID[IPIX]]]=1-TOTAL_PIXEL_CLASSIFICATION[[IPIX]]
   ENDFOR    
 
    S= REPLICATE(1, 3, 3)  
    NEW_MASK_DILATE=DILATE(ARRAY_OTHERS_MASK,S)    

     ; on remet sous forme de vecteur 
     ; On reconstruit tout le masque 
     FOR IPIX=0L,NB_PIXELS-1 DO BEGIN
       PIXEL_CLASSIFICATION[1,IPIX]=NEW_MASK_DILATE[COLO[IDX_VALID[IPIX]], LIG[IDX_VALID[IPIX]]]
     ENDFOR
 
 RES = WHERE(PIXEL_CLASSIFICATION[1,*] EQ MISSING_VALUE_INT, COUNT)
    IF COUNT GT 0 THEN BEGIN
      PRINT,'CLOUD_MODULE_MERIS_DESERT: ERROR, SOME PIXELS NOT CLASSIFIED!!!', ' NUM PIX = ',COUNT
      RETURN, STATUS_ERROR
    ENDIF
 ;

    FOR IPIX=0L,NB_PIXELS-1 DO BEGIN     
      TOTAL_PIXEL_CLASSIFICATION[IPIX]=(1-PIXEL_CLASSIFICATION[1,IPIX])                                                     
    ENDFOR
  
; On inverse les codes 
; cloud =1
; clear =0 
 
   ID_CLOUD = WHERE(TOTAL_PIXEL_CLASSIFICATION EQ 0,CLD_COUNT,COMPLEMENT=ID_CLEAR, NCOMPLEMENT=NCLD_COUNT)
   IF CLD_COUNT   NE 0 THEN TOTAL_PIXEL_CLASSIFICATION[ID_CLOUD]  = 1
   IF NCLD_COUNT  NE 0 THEN TOTAL_PIXEL_CLASSIFICATION[ID_CLEAR]  = 0
 
 	SKIP_PASS_3:

     CS_CLASSIF_MATRIX[IDX_VALID,1]=TOTAL_PIXEL_CLASSIFICATION
    
  ;RETURN,PIXEL_CLASSIFICATION
   RETURN, STATUS_OK

END